
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009898  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a078  0800a078  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a078  0800a078  0001a078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a080  0800a080  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a084  0800a084  0001a084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800a088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001838  20000068  0800a0f0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018a0  0800a0f0  000218a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019997  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ef2  00000000  00000000  00039a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  0003d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001128  00000000  00000000  0003ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001679f  00000000  00000000  000400a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c13  00000000  00000000  00056847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a827  00000000  00000000  0007045a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005080  00000000  00000000  000fac84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ffd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009940 	.word	0x08009940

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08009940 	.word	0x08009940

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 fbda 	bl	8000c8c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 fbd5 	bl	8000c8c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__aeabi_fdiv>:
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	464f      	mov	r7, r9
 8000650:	4646      	mov	r6, r8
 8000652:	46d6      	mov	lr, sl
 8000654:	0245      	lsls	r5, r0, #9
 8000656:	b5c0      	push	{r6, r7, lr}
 8000658:	0047      	lsls	r7, r0, #1
 800065a:	1c0c      	adds	r4, r1, #0
 800065c:	0a6d      	lsrs	r5, r5, #9
 800065e:	0e3f      	lsrs	r7, r7, #24
 8000660:	0fc6      	lsrs	r6, r0, #31
 8000662:	2f00      	cmp	r7, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_fdiv+0x1c>
 8000666:	e06f      	b.n	8000748 <__aeabi_fdiv+0xfc>
 8000668:	2fff      	cmp	r7, #255	; 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fdiv+0x22>
 800066c:	e074      	b.n	8000758 <__aeabi_fdiv+0x10c>
 800066e:	2300      	movs	r3, #0
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	4699      	mov	r9, r3
 8000674:	469a      	mov	sl, r3
 8000676:	00ed      	lsls	r5, r5, #3
 8000678:	04d2      	lsls	r2, r2, #19
 800067a:	4315      	orrs	r5, r2
 800067c:	3f7f      	subs	r7, #127	; 0x7f
 800067e:	0263      	lsls	r3, r4, #9
 8000680:	0a5b      	lsrs	r3, r3, #9
 8000682:	4698      	mov	r8, r3
 8000684:	0063      	lsls	r3, r4, #1
 8000686:	0e1b      	lsrs	r3, r3, #24
 8000688:	0fe4      	lsrs	r4, r4, #31
 800068a:	2b00      	cmp	r3, #0
 800068c:	d04d      	beq.n	800072a <__aeabi_fdiv+0xde>
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d045      	beq.n	800071e <__aeabi_fdiv+0xd2>
 8000692:	4642      	mov	r2, r8
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	00d2      	lsls	r2, r2, #3
 8000698:	04c9      	lsls	r1, r1, #19
 800069a:	4311      	orrs	r1, r2
 800069c:	4688      	mov	r8, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	3b7f      	subs	r3, #127	; 0x7f
 80006a2:	0031      	movs	r1, r6
 80006a4:	1aff      	subs	r7, r7, r3
 80006a6:	464b      	mov	r3, r9
 80006a8:	4061      	eors	r1, r4
 80006aa:	b2c9      	uxtb	r1, r1
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d900      	bls.n	80006b2 <__aeabi_fdiv+0x66>
 80006b0:	e0b8      	b.n	8000824 <__aeabi_fdiv+0x1d8>
 80006b2:	4870      	ldr	r0, [pc, #448]	; (8000874 <__aeabi_fdiv+0x228>)
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	58c3      	ldr	r3, [r0, r3]
 80006b8:	469f      	mov	pc, r3
 80006ba:	2300      	movs	r3, #0
 80006bc:	4698      	mov	r8, r3
 80006be:	0026      	movs	r6, r4
 80006c0:	4645      	mov	r5, r8
 80006c2:	4692      	mov	sl, r2
 80006c4:	4653      	mov	r3, sl
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d100      	bne.n	80006cc <__aeabi_fdiv+0x80>
 80006ca:	e08d      	b.n	80007e8 <__aeabi_fdiv+0x19c>
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fdiv+0x86>
 80006d0:	e0a1      	b.n	8000816 <__aeabi_fdiv+0x1ca>
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d018      	beq.n	8000708 <__aeabi_fdiv+0xbc>
 80006d6:	003b      	movs	r3, r7
 80006d8:	337f      	adds	r3, #127	; 0x7f
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dd6d      	ble.n	80007ba <__aeabi_fdiv+0x16e>
 80006de:	076a      	lsls	r2, r5, #29
 80006e0:	d004      	beq.n	80006ec <__aeabi_fdiv+0xa0>
 80006e2:	220f      	movs	r2, #15
 80006e4:	402a      	ands	r2, r5
 80006e6:	2a04      	cmp	r2, #4
 80006e8:	d000      	beq.n	80006ec <__aeabi_fdiv+0xa0>
 80006ea:	3504      	adds	r5, #4
 80006ec:	012a      	lsls	r2, r5, #4
 80006ee:	d503      	bpl.n	80006f8 <__aeabi_fdiv+0xac>
 80006f0:	4b61      	ldr	r3, [pc, #388]	; (8000878 <__aeabi_fdiv+0x22c>)
 80006f2:	401d      	ands	r5, r3
 80006f4:	003b      	movs	r3, r7
 80006f6:	3380      	adds	r3, #128	; 0x80
 80006f8:	2bfe      	cmp	r3, #254	; 0xfe
 80006fa:	dd00      	ble.n	80006fe <__aeabi_fdiv+0xb2>
 80006fc:	e074      	b.n	80007e8 <__aeabi_fdiv+0x19c>
 80006fe:	01aa      	lsls	r2, r5, #6
 8000700:	0a52      	lsrs	r2, r2, #9
 8000702:	b2d8      	uxtb	r0, r3
 8000704:	e002      	b.n	800070c <__aeabi_fdiv+0xc0>
 8000706:	000e      	movs	r6, r1
 8000708:	2000      	movs	r0, #0
 800070a:	2200      	movs	r2, #0
 800070c:	05c0      	lsls	r0, r0, #23
 800070e:	07f6      	lsls	r6, r6, #31
 8000710:	4310      	orrs	r0, r2
 8000712:	4330      	orrs	r0, r6
 8000714:	bce0      	pop	{r5, r6, r7}
 8000716:	46ba      	mov	sl, r7
 8000718:	46b1      	mov	r9, r6
 800071a:	46a8      	mov	r8, r5
 800071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800071e:	4643      	mov	r3, r8
 8000720:	2b00      	cmp	r3, #0
 8000722:	d13f      	bne.n	80007a4 <__aeabi_fdiv+0x158>
 8000724:	2202      	movs	r2, #2
 8000726:	3fff      	subs	r7, #255	; 0xff
 8000728:	e003      	b.n	8000732 <__aeabi_fdiv+0xe6>
 800072a:	4643      	mov	r3, r8
 800072c:	2b00      	cmp	r3, #0
 800072e:	d12d      	bne.n	800078c <__aeabi_fdiv+0x140>
 8000730:	2201      	movs	r2, #1
 8000732:	0031      	movs	r1, r6
 8000734:	464b      	mov	r3, r9
 8000736:	4061      	eors	r1, r4
 8000738:	b2c9      	uxtb	r1, r1
 800073a:	4313      	orrs	r3, r2
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d838      	bhi.n	80007b2 <__aeabi_fdiv+0x166>
 8000740:	484e      	ldr	r0, [pc, #312]	; (800087c <__aeabi_fdiv+0x230>)
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	58c3      	ldr	r3, [r0, r3]
 8000746:	469f      	mov	pc, r3
 8000748:	2d00      	cmp	r5, #0
 800074a:	d113      	bne.n	8000774 <__aeabi_fdiv+0x128>
 800074c:	2304      	movs	r3, #4
 800074e:	4699      	mov	r9, r3
 8000750:	3b03      	subs	r3, #3
 8000752:	2700      	movs	r7, #0
 8000754:	469a      	mov	sl, r3
 8000756:	e792      	b.n	800067e <__aeabi_fdiv+0x32>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d105      	bne.n	8000768 <__aeabi_fdiv+0x11c>
 800075c:	2308      	movs	r3, #8
 800075e:	4699      	mov	r9, r3
 8000760:	3b06      	subs	r3, #6
 8000762:	27ff      	movs	r7, #255	; 0xff
 8000764:	469a      	mov	sl, r3
 8000766:	e78a      	b.n	800067e <__aeabi_fdiv+0x32>
 8000768:	230c      	movs	r3, #12
 800076a:	4699      	mov	r9, r3
 800076c:	3b09      	subs	r3, #9
 800076e:	27ff      	movs	r7, #255	; 0xff
 8000770:	469a      	mov	sl, r3
 8000772:	e784      	b.n	800067e <__aeabi_fdiv+0x32>
 8000774:	0028      	movs	r0, r5
 8000776:	f000 fa6b 	bl	8000c50 <__clzsi2>
 800077a:	2776      	movs	r7, #118	; 0x76
 800077c:	1f43      	subs	r3, r0, #5
 800077e:	409d      	lsls	r5, r3
 8000780:	2300      	movs	r3, #0
 8000782:	427f      	negs	r7, r7
 8000784:	4699      	mov	r9, r3
 8000786:	469a      	mov	sl, r3
 8000788:	1a3f      	subs	r7, r7, r0
 800078a:	e778      	b.n	800067e <__aeabi_fdiv+0x32>
 800078c:	4640      	mov	r0, r8
 800078e:	f000 fa5f 	bl	8000c50 <__clzsi2>
 8000792:	4642      	mov	r2, r8
 8000794:	1f43      	subs	r3, r0, #5
 8000796:	409a      	lsls	r2, r3
 8000798:	2376      	movs	r3, #118	; 0x76
 800079a:	425b      	negs	r3, r3
 800079c:	4690      	mov	r8, r2
 800079e:	1a1b      	subs	r3, r3, r0
 80007a0:	2200      	movs	r2, #0
 80007a2:	e77e      	b.n	80006a2 <__aeabi_fdiv+0x56>
 80007a4:	2303      	movs	r3, #3
 80007a6:	464a      	mov	r2, r9
 80007a8:	431a      	orrs	r2, r3
 80007aa:	4691      	mov	r9, r2
 80007ac:	33fc      	adds	r3, #252	; 0xfc
 80007ae:	2203      	movs	r2, #3
 80007b0:	e777      	b.n	80006a2 <__aeabi_fdiv+0x56>
 80007b2:	000e      	movs	r6, r1
 80007b4:	20ff      	movs	r0, #255	; 0xff
 80007b6:	2200      	movs	r2, #0
 80007b8:	e7a8      	b.n	800070c <__aeabi_fdiv+0xc0>
 80007ba:	2201      	movs	r2, #1
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	2b1b      	cmp	r3, #27
 80007c0:	dca2      	bgt.n	8000708 <__aeabi_fdiv+0xbc>
 80007c2:	379e      	adds	r7, #158	; 0x9e
 80007c4:	002a      	movs	r2, r5
 80007c6:	40bd      	lsls	r5, r7
 80007c8:	40da      	lsrs	r2, r3
 80007ca:	1e6b      	subs	r3, r5, #1
 80007cc:	419d      	sbcs	r5, r3
 80007ce:	4315      	orrs	r5, r2
 80007d0:	076a      	lsls	r2, r5, #29
 80007d2:	d004      	beq.n	80007de <__aeabi_fdiv+0x192>
 80007d4:	220f      	movs	r2, #15
 80007d6:	402a      	ands	r2, r5
 80007d8:	2a04      	cmp	r2, #4
 80007da:	d000      	beq.n	80007de <__aeabi_fdiv+0x192>
 80007dc:	3504      	adds	r5, #4
 80007de:	016a      	lsls	r2, r5, #5
 80007e0:	d544      	bpl.n	800086c <__aeabi_fdiv+0x220>
 80007e2:	2001      	movs	r0, #1
 80007e4:	2200      	movs	r2, #0
 80007e6:	e791      	b.n	800070c <__aeabi_fdiv+0xc0>
 80007e8:	20ff      	movs	r0, #255	; 0xff
 80007ea:	2200      	movs	r2, #0
 80007ec:	e78e      	b.n	800070c <__aeabi_fdiv+0xc0>
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	2600      	movs	r6, #0
 80007f2:	20ff      	movs	r0, #255	; 0xff
 80007f4:	03d2      	lsls	r2, r2, #15
 80007f6:	e789      	b.n	800070c <__aeabi_fdiv+0xc0>
 80007f8:	2300      	movs	r3, #0
 80007fa:	4698      	mov	r8, r3
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	03d2      	lsls	r2, r2, #15
 8000800:	4215      	tst	r5, r2
 8000802:	d008      	beq.n	8000816 <__aeabi_fdiv+0x1ca>
 8000804:	4643      	mov	r3, r8
 8000806:	4213      	tst	r3, r2
 8000808:	d105      	bne.n	8000816 <__aeabi_fdiv+0x1ca>
 800080a:	431a      	orrs	r2, r3
 800080c:	0252      	lsls	r2, r2, #9
 800080e:	0026      	movs	r6, r4
 8000810:	20ff      	movs	r0, #255	; 0xff
 8000812:	0a52      	lsrs	r2, r2, #9
 8000814:	e77a      	b.n	800070c <__aeabi_fdiv+0xc0>
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	03d2      	lsls	r2, r2, #15
 800081a:	432a      	orrs	r2, r5
 800081c:	0252      	lsls	r2, r2, #9
 800081e:	20ff      	movs	r0, #255	; 0xff
 8000820:	0a52      	lsrs	r2, r2, #9
 8000822:	e773      	b.n	800070c <__aeabi_fdiv+0xc0>
 8000824:	4642      	mov	r2, r8
 8000826:	016b      	lsls	r3, r5, #5
 8000828:	0155      	lsls	r5, r2, #5
 800082a:	42ab      	cmp	r3, r5
 800082c:	d21a      	bcs.n	8000864 <__aeabi_fdiv+0x218>
 800082e:	201b      	movs	r0, #27
 8000830:	2200      	movs	r2, #0
 8000832:	3f01      	subs	r7, #1
 8000834:	2601      	movs	r6, #1
 8000836:	001c      	movs	r4, r3
 8000838:	0052      	lsls	r2, r2, #1
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2c00      	cmp	r4, #0
 800083e:	db01      	blt.n	8000844 <__aeabi_fdiv+0x1f8>
 8000840:	429d      	cmp	r5, r3
 8000842:	d801      	bhi.n	8000848 <__aeabi_fdiv+0x1fc>
 8000844:	1b5b      	subs	r3, r3, r5
 8000846:	4332      	orrs	r2, r6
 8000848:	3801      	subs	r0, #1
 800084a:	2800      	cmp	r0, #0
 800084c:	d1f3      	bne.n	8000836 <__aeabi_fdiv+0x1ea>
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4183      	sbcs	r3, r0
 8000852:	4313      	orrs	r3, r2
 8000854:	001d      	movs	r5, r3
 8000856:	003b      	movs	r3, r7
 8000858:	337f      	adds	r3, #127	; 0x7f
 800085a:	000e      	movs	r6, r1
 800085c:	2b00      	cmp	r3, #0
 800085e:	dd00      	ble.n	8000862 <__aeabi_fdiv+0x216>
 8000860:	e73d      	b.n	80006de <__aeabi_fdiv+0x92>
 8000862:	e7aa      	b.n	80007ba <__aeabi_fdiv+0x16e>
 8000864:	201a      	movs	r0, #26
 8000866:	2201      	movs	r2, #1
 8000868:	1b5b      	subs	r3, r3, r5
 800086a:	e7e3      	b.n	8000834 <__aeabi_fdiv+0x1e8>
 800086c:	01aa      	lsls	r2, r5, #6
 800086e:	2000      	movs	r0, #0
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	e74b      	b.n	800070c <__aeabi_fdiv+0xc0>
 8000874:	08009c78 	.word	0x08009c78
 8000878:	f7ffffff 	.word	0xf7ffffff
 800087c:	08009cb8 	.word	0x08009cb8

08000880 <__aeabi_fmul>:
 8000880:	0243      	lsls	r3, r0, #9
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	464f      	mov	r7, r9
 8000888:	4646      	mov	r6, r8
 800088a:	4699      	mov	r9, r3
 800088c:	46d6      	mov	lr, sl
 800088e:	0fc3      	lsrs	r3, r0, #31
 8000890:	0045      	lsls	r5, r0, #1
 8000892:	4698      	mov	r8, r3
 8000894:	b5c0      	push	{r6, r7, lr}
 8000896:	464b      	mov	r3, r9
 8000898:	1c0f      	adds	r7, r1, #0
 800089a:	0e2d      	lsrs	r5, r5, #24
 800089c:	d100      	bne.n	80008a0 <__aeabi_fmul+0x20>
 800089e:	e0cb      	b.n	8000a38 <__aeabi_fmul+0x1b8>
 80008a0:	2dff      	cmp	r5, #255	; 0xff
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fmul+0x26>
 80008a4:	e0cf      	b.n	8000a46 <__aeabi_fmul+0x1c6>
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	04d2      	lsls	r2, r2, #19
 80008ac:	431a      	orrs	r2, r3
 80008ae:	2300      	movs	r3, #0
 80008b0:	4691      	mov	r9, r2
 80008b2:	2600      	movs	r6, #0
 80008b4:	469a      	mov	sl, r3
 80008b6:	3d7f      	subs	r5, #127	; 0x7f
 80008b8:	027c      	lsls	r4, r7, #9
 80008ba:	007b      	lsls	r3, r7, #1
 80008bc:	0a64      	lsrs	r4, r4, #9
 80008be:	0e1b      	lsrs	r3, r3, #24
 80008c0:	0fff      	lsrs	r7, r7, #31
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fmul+0x48>
 80008c6:	e0a9      	b.n	8000a1c <__aeabi_fmul+0x19c>
 80008c8:	2bff      	cmp	r3, #255	; 0xff
 80008ca:	d011      	beq.n	80008f0 <__aeabi_fmul+0x70>
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	00e4      	lsls	r4, r4, #3
 80008d0:	04d2      	lsls	r2, r2, #19
 80008d2:	4314      	orrs	r4, r2
 80008d4:	4642      	mov	r2, r8
 80008d6:	3b7f      	subs	r3, #127	; 0x7f
 80008d8:	195b      	adds	r3, r3, r5
 80008da:	407a      	eors	r2, r7
 80008dc:	2000      	movs	r0, #0
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	1c5d      	adds	r5, r3, #1
 80008e2:	2e0a      	cmp	r6, #10
 80008e4:	dd13      	ble.n	800090e <__aeabi_fmul+0x8e>
 80008e6:	003a      	movs	r2, r7
 80008e8:	2e0b      	cmp	r6, #11
 80008ea:	d047      	beq.n	800097c <__aeabi_fmul+0xfc>
 80008ec:	4647      	mov	r7, r8
 80008ee:	e03f      	b.n	8000970 <__aeabi_fmul+0xf0>
 80008f0:	002b      	movs	r3, r5
 80008f2:	33ff      	adds	r3, #255	; 0xff
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d11e      	bne.n	8000936 <__aeabi_fmul+0xb6>
 80008f8:	2202      	movs	r2, #2
 80008fa:	4316      	orrs	r6, r2
 80008fc:	4642      	mov	r2, r8
 80008fe:	3501      	adds	r5, #1
 8000900:	407a      	eors	r2, r7
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	35ff      	adds	r5, #255	; 0xff
 8000906:	2e0a      	cmp	r6, #10
 8000908:	dd00      	ble.n	800090c <__aeabi_fmul+0x8c>
 800090a:	e0e4      	b.n	8000ad6 <__aeabi_fmul+0x256>
 800090c:	2002      	movs	r0, #2
 800090e:	2e02      	cmp	r6, #2
 8000910:	dc1c      	bgt.n	800094c <__aeabi_fmul+0xcc>
 8000912:	3e01      	subs	r6, #1
 8000914:	2e01      	cmp	r6, #1
 8000916:	d842      	bhi.n	800099e <__aeabi_fmul+0x11e>
 8000918:	2802      	cmp	r0, #2
 800091a:	d03d      	beq.n	8000998 <__aeabi_fmul+0x118>
 800091c:	2801      	cmp	r0, #1
 800091e:	d166      	bne.n	80009ee <__aeabi_fmul+0x16e>
 8000920:	2000      	movs	r0, #0
 8000922:	2100      	movs	r1, #0
 8000924:	05c0      	lsls	r0, r0, #23
 8000926:	4308      	orrs	r0, r1
 8000928:	07d2      	lsls	r2, r2, #31
 800092a:	4310      	orrs	r0, r2
 800092c:	bce0      	pop	{r5, r6, r7}
 800092e:	46ba      	mov	sl, r7
 8000930:	46b1      	mov	r9, r6
 8000932:	46a8      	mov	r8, r5
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	2203      	movs	r2, #3
 8000938:	4316      	orrs	r6, r2
 800093a:	4642      	mov	r2, r8
 800093c:	3501      	adds	r5, #1
 800093e:	407a      	eors	r2, r7
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	35ff      	adds	r5, #255	; 0xff
 8000944:	2e0a      	cmp	r6, #10
 8000946:	dd00      	ble.n	800094a <__aeabi_fmul+0xca>
 8000948:	e0e4      	b.n	8000b14 <__aeabi_fmul+0x294>
 800094a:	2003      	movs	r0, #3
 800094c:	2101      	movs	r1, #1
 800094e:	40b1      	lsls	r1, r6
 8000950:	26a6      	movs	r6, #166	; 0xa6
 8000952:	00f6      	lsls	r6, r6, #3
 8000954:	4231      	tst	r1, r6
 8000956:	d10a      	bne.n	800096e <__aeabi_fmul+0xee>
 8000958:	2690      	movs	r6, #144	; 0x90
 800095a:	00b6      	lsls	r6, r6, #2
 800095c:	4231      	tst	r1, r6
 800095e:	d116      	bne.n	800098e <__aeabi_fmul+0x10e>
 8000960:	3eb9      	subs	r6, #185	; 0xb9
 8000962:	3eff      	subs	r6, #255	; 0xff
 8000964:	420e      	tst	r6, r1
 8000966:	d01a      	beq.n	800099e <__aeabi_fmul+0x11e>
 8000968:	46a1      	mov	r9, r4
 800096a:	4682      	mov	sl, r0
 800096c:	e000      	b.n	8000970 <__aeabi_fmul+0xf0>
 800096e:	0017      	movs	r7, r2
 8000970:	4653      	mov	r3, sl
 8000972:	003a      	movs	r2, r7
 8000974:	2b02      	cmp	r3, #2
 8000976:	d00f      	beq.n	8000998 <__aeabi_fmul+0x118>
 8000978:	464c      	mov	r4, r9
 800097a:	4650      	mov	r0, sl
 800097c:	2803      	cmp	r0, #3
 800097e:	d1cd      	bne.n	800091c <__aeabi_fmul+0x9c>
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	03c9      	lsls	r1, r1, #15
 8000984:	4321      	orrs	r1, r4
 8000986:	0249      	lsls	r1, r1, #9
 8000988:	20ff      	movs	r0, #255	; 0xff
 800098a:	0a49      	lsrs	r1, r1, #9
 800098c:	e7ca      	b.n	8000924 <__aeabi_fmul+0xa4>
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	2200      	movs	r2, #0
 8000992:	20ff      	movs	r0, #255	; 0xff
 8000994:	03c9      	lsls	r1, r1, #15
 8000996:	e7c5      	b.n	8000924 <__aeabi_fmul+0xa4>
 8000998:	20ff      	movs	r0, #255	; 0xff
 800099a:	2100      	movs	r1, #0
 800099c:	e7c2      	b.n	8000924 <__aeabi_fmul+0xa4>
 800099e:	0c20      	lsrs	r0, r4, #16
 80009a0:	4649      	mov	r1, r9
 80009a2:	0424      	lsls	r4, r4, #16
 80009a4:	0c24      	lsrs	r4, r4, #16
 80009a6:	0027      	movs	r7, r4
 80009a8:	0c0e      	lsrs	r6, r1, #16
 80009aa:	0409      	lsls	r1, r1, #16
 80009ac:	0c09      	lsrs	r1, r1, #16
 80009ae:	4374      	muls	r4, r6
 80009b0:	434f      	muls	r7, r1
 80009b2:	4346      	muls	r6, r0
 80009b4:	4348      	muls	r0, r1
 80009b6:	0c39      	lsrs	r1, r7, #16
 80009b8:	1900      	adds	r0, r0, r4
 80009ba:	1809      	adds	r1, r1, r0
 80009bc:	428c      	cmp	r4, r1
 80009be:	d903      	bls.n	80009c8 <__aeabi_fmul+0x148>
 80009c0:	2080      	movs	r0, #128	; 0x80
 80009c2:	0240      	lsls	r0, r0, #9
 80009c4:	4684      	mov	ip, r0
 80009c6:	4466      	add	r6, ip
 80009c8:	043f      	lsls	r7, r7, #16
 80009ca:	0408      	lsls	r0, r1, #16
 80009cc:	0c3f      	lsrs	r7, r7, #16
 80009ce:	19c0      	adds	r0, r0, r7
 80009d0:	0184      	lsls	r4, r0, #6
 80009d2:	1e67      	subs	r7, r4, #1
 80009d4:	41bc      	sbcs	r4, r7
 80009d6:	0c09      	lsrs	r1, r1, #16
 80009d8:	0e80      	lsrs	r0, r0, #26
 80009da:	1989      	adds	r1, r1, r6
 80009dc:	4304      	orrs	r4, r0
 80009de:	0189      	lsls	r1, r1, #6
 80009e0:	430c      	orrs	r4, r1
 80009e2:	0109      	lsls	r1, r1, #4
 80009e4:	d571      	bpl.n	8000aca <__aeabi_fmul+0x24a>
 80009e6:	2301      	movs	r3, #1
 80009e8:	0861      	lsrs	r1, r4, #1
 80009ea:	401c      	ands	r4, r3
 80009ec:	430c      	orrs	r4, r1
 80009ee:	002b      	movs	r3, r5
 80009f0:	337f      	adds	r3, #127	; 0x7f
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	dd51      	ble.n	8000a9a <__aeabi_fmul+0x21a>
 80009f6:	0761      	lsls	r1, r4, #29
 80009f8:	d004      	beq.n	8000a04 <__aeabi_fmul+0x184>
 80009fa:	210f      	movs	r1, #15
 80009fc:	4021      	ands	r1, r4
 80009fe:	2904      	cmp	r1, #4
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fmul+0x184>
 8000a02:	3404      	adds	r4, #4
 8000a04:	0121      	lsls	r1, r4, #4
 8000a06:	d503      	bpl.n	8000a10 <__aeabi_fmul+0x190>
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <__aeabi_fmul+0x298>)
 8000a0a:	401c      	ands	r4, r3
 8000a0c:	002b      	movs	r3, r5
 8000a0e:	3380      	adds	r3, #128	; 0x80
 8000a10:	2bfe      	cmp	r3, #254	; 0xfe
 8000a12:	dcc1      	bgt.n	8000998 <__aeabi_fmul+0x118>
 8000a14:	01a1      	lsls	r1, r4, #6
 8000a16:	0a49      	lsrs	r1, r1, #9
 8000a18:	b2d8      	uxtb	r0, r3
 8000a1a:	e783      	b.n	8000924 <__aeabi_fmul+0xa4>
 8000a1c:	2c00      	cmp	r4, #0
 8000a1e:	d12c      	bne.n	8000a7a <__aeabi_fmul+0x1fa>
 8000a20:	2301      	movs	r3, #1
 8000a22:	4642      	mov	r2, r8
 8000a24:	431e      	orrs	r6, r3
 8000a26:	002b      	movs	r3, r5
 8000a28:	407a      	eors	r2, r7
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	1c5d      	adds	r5, r3, #1
 8000a30:	2e0a      	cmp	r6, #10
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_fmul+0x1b6>
 8000a34:	e757      	b.n	80008e6 <__aeabi_fmul+0x66>
 8000a36:	e76a      	b.n	800090e <__aeabi_fmul+0x8e>
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d110      	bne.n	8000a5e <__aeabi_fmul+0x1de>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	2604      	movs	r6, #4
 8000a40:	2500      	movs	r5, #0
 8000a42:	469a      	mov	sl, r3
 8000a44:	e738      	b.n	80008b8 <__aeabi_fmul+0x38>
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d104      	bne.n	8000a54 <__aeabi_fmul+0x1d4>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	2608      	movs	r6, #8
 8000a4e:	25ff      	movs	r5, #255	; 0xff
 8000a50:	469a      	mov	sl, r3
 8000a52:	e731      	b.n	80008b8 <__aeabi_fmul+0x38>
 8000a54:	2303      	movs	r3, #3
 8000a56:	260c      	movs	r6, #12
 8000a58:	25ff      	movs	r5, #255	; 0xff
 8000a5a:	469a      	mov	sl, r3
 8000a5c:	e72c      	b.n	80008b8 <__aeabi_fmul+0x38>
 8000a5e:	4648      	mov	r0, r9
 8000a60:	f000 f8f6 	bl	8000c50 <__clzsi2>
 8000a64:	464a      	mov	r2, r9
 8000a66:	1f43      	subs	r3, r0, #5
 8000a68:	2576      	movs	r5, #118	; 0x76
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	426d      	negs	r5, r5
 8000a70:	4691      	mov	r9, r2
 8000a72:	2600      	movs	r6, #0
 8000a74:	469a      	mov	sl, r3
 8000a76:	1a2d      	subs	r5, r5, r0
 8000a78:	e71e      	b.n	80008b8 <__aeabi_fmul+0x38>
 8000a7a:	0020      	movs	r0, r4
 8000a7c:	f000 f8e8 	bl	8000c50 <__clzsi2>
 8000a80:	4642      	mov	r2, r8
 8000a82:	1f43      	subs	r3, r0, #5
 8000a84:	409c      	lsls	r4, r3
 8000a86:	1a2b      	subs	r3, r5, r0
 8000a88:	3b76      	subs	r3, #118	; 0x76
 8000a8a:	407a      	eors	r2, r7
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	1c5d      	adds	r5, r3, #1
 8000a92:	2e0a      	cmp	r6, #10
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_fmul+0x218>
 8000a96:	e726      	b.n	80008e6 <__aeabi_fmul+0x66>
 8000a98:	e739      	b.n	800090e <__aeabi_fmul+0x8e>
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	1acb      	subs	r3, r1, r3
 8000a9e:	2b1b      	cmp	r3, #27
 8000aa0:	dd00      	ble.n	8000aa4 <__aeabi_fmul+0x224>
 8000aa2:	e73d      	b.n	8000920 <__aeabi_fmul+0xa0>
 8000aa4:	359e      	adds	r5, #158	; 0x9e
 8000aa6:	0021      	movs	r1, r4
 8000aa8:	40ac      	lsls	r4, r5
 8000aaa:	40d9      	lsrs	r1, r3
 8000aac:	1e63      	subs	r3, r4, #1
 8000aae:	419c      	sbcs	r4, r3
 8000ab0:	4321      	orrs	r1, r4
 8000ab2:	074b      	lsls	r3, r1, #29
 8000ab4:	d004      	beq.n	8000ac0 <__aeabi_fmul+0x240>
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	400b      	ands	r3, r1
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fmul+0x240>
 8000abe:	3104      	adds	r1, #4
 8000ac0:	014b      	lsls	r3, r1, #5
 8000ac2:	d504      	bpl.n	8000ace <__aeabi_fmul+0x24e>
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e72c      	b.n	8000924 <__aeabi_fmul+0xa4>
 8000aca:	001d      	movs	r5, r3
 8000acc:	e78f      	b.n	80009ee <__aeabi_fmul+0x16e>
 8000ace:	0189      	lsls	r1, r1, #6
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	0a49      	lsrs	r1, r1, #9
 8000ad4:	e726      	b.n	8000924 <__aeabi_fmul+0xa4>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	2e0f      	cmp	r6, #15
 8000ada:	d10c      	bne.n	8000af6 <__aeabi_fmul+0x276>
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	464b      	mov	r3, r9
 8000ae0:	03c9      	lsls	r1, r1, #15
 8000ae2:	420b      	tst	r3, r1
 8000ae4:	d00d      	beq.n	8000b02 <__aeabi_fmul+0x282>
 8000ae6:	420c      	tst	r4, r1
 8000ae8:	d10b      	bne.n	8000b02 <__aeabi_fmul+0x282>
 8000aea:	4321      	orrs	r1, r4
 8000aec:	0249      	lsls	r1, r1, #9
 8000aee:	003a      	movs	r2, r7
 8000af0:	20ff      	movs	r0, #255	; 0xff
 8000af2:	0a49      	lsrs	r1, r1, #9
 8000af4:	e716      	b.n	8000924 <__aeabi_fmul+0xa4>
 8000af6:	2e0b      	cmp	r6, #11
 8000af8:	d000      	beq.n	8000afc <__aeabi_fmul+0x27c>
 8000afa:	e6f7      	b.n	80008ec <__aeabi_fmul+0x6c>
 8000afc:	46a1      	mov	r9, r4
 8000afe:	469a      	mov	sl, r3
 8000b00:	e736      	b.n	8000970 <__aeabi_fmul+0xf0>
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	464b      	mov	r3, r9
 8000b06:	03c9      	lsls	r1, r1, #15
 8000b08:	4319      	orrs	r1, r3
 8000b0a:	0249      	lsls	r1, r1, #9
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a49      	lsrs	r1, r1, #9
 8000b12:	e707      	b.n	8000924 <__aeabi_fmul+0xa4>
 8000b14:	2303      	movs	r3, #3
 8000b16:	e7df      	b.n	8000ad8 <__aeabi_fmul+0x258>
 8000b18:	f7ffffff 	.word	0xf7ffffff

08000b1c <__aeabi_i2f>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d013      	beq.n	8000b4a <__aeabi_i2f+0x2e>
 8000b22:	17c3      	asrs	r3, r0, #31
 8000b24:	18c5      	adds	r5, r0, r3
 8000b26:	405d      	eors	r5, r3
 8000b28:	0fc4      	lsrs	r4, r0, #31
 8000b2a:	0028      	movs	r0, r5
 8000b2c:	f000 f890 	bl	8000c50 <__clzsi2>
 8000b30:	239e      	movs	r3, #158	; 0x9e
 8000b32:	0001      	movs	r1, r0
 8000b34:	1a1b      	subs	r3, r3, r0
 8000b36:	2b96      	cmp	r3, #150	; 0x96
 8000b38:	dc0f      	bgt.n	8000b5a <__aeabi_i2f+0x3e>
 8000b3a:	2808      	cmp	r0, #8
 8000b3c:	d031      	beq.n	8000ba2 <__aeabi_i2f+0x86>
 8000b3e:	3908      	subs	r1, #8
 8000b40:	408d      	lsls	r5, r1
 8000b42:	026d      	lsls	r5, r5, #9
 8000b44:	0a6d      	lsrs	r5, r5, #9
 8000b46:	b2d8      	uxtb	r0, r3
 8000b48:	e002      	b.n	8000b50 <__aeabi_i2f+0x34>
 8000b4a:	2400      	movs	r4, #0
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	2500      	movs	r5, #0
 8000b50:	05c0      	lsls	r0, r0, #23
 8000b52:	4328      	orrs	r0, r5
 8000b54:	07e4      	lsls	r4, r4, #31
 8000b56:	4320      	orrs	r0, r4
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
 8000b5a:	2b99      	cmp	r3, #153	; 0x99
 8000b5c:	dd0c      	ble.n	8000b78 <__aeabi_i2f+0x5c>
 8000b5e:	2205      	movs	r2, #5
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	0028      	movs	r0, r5
 8000b64:	40d0      	lsrs	r0, r2
 8000b66:	0002      	movs	r2, r0
 8000b68:	0008      	movs	r0, r1
 8000b6a:	301b      	adds	r0, #27
 8000b6c:	4085      	lsls	r5, r0
 8000b6e:	0028      	movs	r0, r5
 8000b70:	1e45      	subs	r5, r0, #1
 8000b72:	41a8      	sbcs	r0, r5
 8000b74:	4302      	orrs	r2, r0
 8000b76:	0015      	movs	r5, r2
 8000b78:	2905      	cmp	r1, #5
 8000b7a:	dc16      	bgt.n	8000baa <__aeabi_i2f+0x8e>
 8000b7c:	002a      	movs	r2, r5
 8000b7e:	480f      	ldr	r0, [pc, #60]	; (8000bbc <__aeabi_i2f+0xa0>)
 8000b80:	4002      	ands	r2, r0
 8000b82:	076e      	lsls	r6, r5, #29
 8000b84:	d009      	beq.n	8000b9a <__aeabi_i2f+0x7e>
 8000b86:	260f      	movs	r6, #15
 8000b88:	4035      	ands	r5, r6
 8000b8a:	2d04      	cmp	r5, #4
 8000b8c:	d005      	beq.n	8000b9a <__aeabi_i2f+0x7e>
 8000b8e:	3204      	adds	r2, #4
 8000b90:	0155      	lsls	r5, r2, #5
 8000b92:	d502      	bpl.n	8000b9a <__aeabi_i2f+0x7e>
 8000b94:	239f      	movs	r3, #159	; 0x9f
 8000b96:	4002      	ands	r2, r0
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	0192      	lsls	r2, r2, #6
 8000b9c:	0a55      	lsrs	r5, r2, #9
 8000b9e:	b2d8      	uxtb	r0, r3
 8000ba0:	e7d6      	b.n	8000b50 <__aeabi_i2f+0x34>
 8000ba2:	026d      	lsls	r5, r5, #9
 8000ba4:	2096      	movs	r0, #150	; 0x96
 8000ba6:	0a6d      	lsrs	r5, r5, #9
 8000ba8:	e7d2      	b.n	8000b50 <__aeabi_i2f+0x34>
 8000baa:	1f4a      	subs	r2, r1, #5
 8000bac:	4095      	lsls	r5, r2
 8000bae:	002a      	movs	r2, r5
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <__aeabi_i2f+0xa0>)
 8000bb2:	4002      	ands	r2, r0
 8000bb4:	076e      	lsls	r6, r5, #29
 8000bb6:	d0f0      	beq.n	8000b9a <__aeabi_i2f+0x7e>
 8000bb8:	e7e5      	b.n	8000b86 <__aeabi_i2f+0x6a>
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	fbffffff 	.word	0xfbffffff

08000bc0 <__aeabi_ui2f>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	1e04      	subs	r4, r0, #0
 8000bc4:	d00e      	beq.n	8000be4 <__aeabi_ui2f+0x24>
 8000bc6:	f000 f843 	bl	8000c50 <__clzsi2>
 8000bca:	239e      	movs	r3, #158	; 0x9e
 8000bcc:	0001      	movs	r1, r0
 8000bce:	1a1b      	subs	r3, r3, r0
 8000bd0:	2b96      	cmp	r3, #150	; 0x96
 8000bd2:	dc0c      	bgt.n	8000bee <__aeabi_ui2f+0x2e>
 8000bd4:	2808      	cmp	r0, #8
 8000bd6:	d02c      	beq.n	8000c32 <__aeabi_ui2f+0x72>
 8000bd8:	3908      	subs	r1, #8
 8000bda:	408c      	lsls	r4, r1
 8000bdc:	0264      	lsls	r4, r4, #9
 8000bde:	0a64      	lsrs	r4, r4, #9
 8000be0:	b2d8      	uxtb	r0, r3
 8000be2:	e001      	b.n	8000be8 <__aeabi_ui2f+0x28>
 8000be4:	2000      	movs	r0, #0
 8000be6:	2400      	movs	r4, #0
 8000be8:	05c0      	lsls	r0, r0, #23
 8000bea:	4320      	orrs	r0, r4
 8000bec:	bd70      	pop	{r4, r5, r6, pc}
 8000bee:	2b99      	cmp	r3, #153	; 0x99
 8000bf0:	dd0a      	ble.n	8000c08 <__aeabi_ui2f+0x48>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	0020      	movs	r0, r4
 8000bf6:	321b      	adds	r2, #27
 8000bf8:	4090      	lsls	r0, r2
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	1e50      	subs	r0, r2, #1
 8000bfe:	4182      	sbcs	r2, r0
 8000c00:	2005      	movs	r0, #5
 8000c02:	1a40      	subs	r0, r0, r1
 8000c04:	40c4      	lsrs	r4, r0
 8000c06:	4314      	orrs	r4, r2
 8000c08:	2905      	cmp	r1, #5
 8000c0a:	dc16      	bgt.n	8000c3a <__aeabi_ui2f+0x7a>
 8000c0c:	0022      	movs	r2, r4
 8000c0e:	480f      	ldr	r0, [pc, #60]	; (8000c4c <__aeabi_ui2f+0x8c>)
 8000c10:	4002      	ands	r2, r0
 8000c12:	0765      	lsls	r5, r4, #29
 8000c14:	d009      	beq.n	8000c2a <__aeabi_ui2f+0x6a>
 8000c16:	250f      	movs	r5, #15
 8000c18:	402c      	ands	r4, r5
 8000c1a:	2c04      	cmp	r4, #4
 8000c1c:	d005      	beq.n	8000c2a <__aeabi_ui2f+0x6a>
 8000c1e:	3204      	adds	r2, #4
 8000c20:	0154      	lsls	r4, r2, #5
 8000c22:	d502      	bpl.n	8000c2a <__aeabi_ui2f+0x6a>
 8000c24:	239f      	movs	r3, #159	; 0x9f
 8000c26:	4002      	ands	r2, r0
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	0192      	lsls	r2, r2, #6
 8000c2c:	0a54      	lsrs	r4, r2, #9
 8000c2e:	b2d8      	uxtb	r0, r3
 8000c30:	e7da      	b.n	8000be8 <__aeabi_ui2f+0x28>
 8000c32:	0264      	lsls	r4, r4, #9
 8000c34:	2096      	movs	r0, #150	; 0x96
 8000c36:	0a64      	lsrs	r4, r4, #9
 8000c38:	e7d6      	b.n	8000be8 <__aeabi_ui2f+0x28>
 8000c3a:	1f4a      	subs	r2, r1, #5
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	0022      	movs	r2, r4
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <__aeabi_ui2f+0x8c>)
 8000c42:	4002      	ands	r2, r0
 8000c44:	0765      	lsls	r5, r4, #29
 8000c46:	d0f0      	beq.n	8000c2a <__aeabi_ui2f+0x6a>
 8000c48:	e7e5      	b.n	8000c16 <__aeabi_ui2f+0x56>
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	fbffffff 	.word	0xfbffffff

08000c50 <__clzsi2>:
 8000c50:	211c      	movs	r1, #28
 8000c52:	2301      	movs	r3, #1
 8000c54:	041b      	lsls	r3, r3, #16
 8000c56:	4298      	cmp	r0, r3
 8000c58:	d301      	bcc.n	8000c5e <__clzsi2+0xe>
 8000c5a:	0c00      	lsrs	r0, r0, #16
 8000c5c:	3910      	subs	r1, #16
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	4298      	cmp	r0, r3
 8000c62:	d301      	bcc.n	8000c68 <__clzsi2+0x18>
 8000c64:	0a00      	lsrs	r0, r0, #8
 8000c66:	3908      	subs	r1, #8
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	4298      	cmp	r0, r3
 8000c6c:	d301      	bcc.n	8000c72 <__clzsi2+0x22>
 8000c6e:	0900      	lsrs	r0, r0, #4
 8000c70:	3904      	subs	r1, #4
 8000c72:	a202      	add	r2, pc, #8	; (adr r2, 8000c7c <__clzsi2+0x2c>)
 8000c74:	5c10      	ldrb	r0, [r2, r0]
 8000c76:	1840      	adds	r0, r0, r1
 8000c78:	4770      	bx	lr
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	02020304 	.word	0x02020304
 8000c80:	01010101 	.word	0x01010101
	...

08000c8c <__clzdi2>:
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d103      	bne.n	8000c9a <__clzdi2+0xe>
 8000c92:	f7ff ffdd 	bl	8000c50 <__clzsi2>
 8000c96:	3020      	adds	r0, #32
 8000c98:	e002      	b.n	8000ca0 <__clzdi2+0x14>
 8000c9a:	0008      	movs	r0, r1
 8000c9c:	f7ff ffd8 	bl	8000c50 <__clzsi2>
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)

08000ca4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <MX_FREERTOS_Init+0x30>)
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_FREERTOS_Init+0x34>)
 8000cac:	2100      	movs	r1, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f003 fc80 	bl	80045b4 <osThreadNew>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_FREERTOS_Init+0x38>)
 8000cb8:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <MX_FREERTOS_Init+0x3c>)
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_FREERTOS_Init+0x40>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f003 fc77 	bl	80045b4 <osThreadNew>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_FREERTOS_Init+0x44>)
 8000cca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	08009cf8 	.word	0x08009cf8
 8000cd8:	08000ced 	.word	0x08000ced
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	08009d1c 	.word	0x08009d1c
 8000ce4:	08000d11 	.word	0x08000d11
 8000ce8:	2000008c 	.word	0x2000008c

08000cec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	userShellInit();
 8000cf4:	f008 fdb0 	bl	8009858 <userShellInit>
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&recv_buf, 1);
 8000cf8:	4903      	ldr	r1, [pc, #12]	; (8000d08 <StartDefaultTask+0x1c>)
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <StartDefaultTask+0x20>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f002 f914 	bl	8002f2c <HAL_UART_Receive_IT>
	while(1)
 8000d04:	e7fe      	b.n	8000d04 <StartDefaultTask+0x18>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000084 	.word	0x20000084
 8000d0c:	200000d0 	.word	0x200000d0

08000d10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	while(1)
 8000d18:	e7fe      	b.n	8000d18 <StartTask02+0x8>

08000d1a <LED_ON>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
int LED_ON(int Time)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000d22:	23a0      	movs	r3, #160	; 0xa0
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	2201      	movs	r2, #1
 8000d28:	2120      	movs	r1, #32
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 fd6e 	bl	800180c <HAL_GPIO_WritePin>
	HAL_Delay(Time);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fa9c 	bl	8001270 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d38:	23a0      	movs	r3, #160	; 0xa0
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2120      	movs	r1, #32
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 fd63 	bl	800180c <HAL_GPIO_WritePin>
	return 0;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_UART_RxCpltCallback>:
SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC), LED_ON, LED_ON, LED_ON);



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    /* 判断是哪个串口触发的中断 */
    if(huart ->Instance == USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_UART_RxCpltCallback+0x34>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10c      	bne.n	8000d7c <HAL_UART_RxCpltCallback+0x2c>
    {
        //调用shell处理数据的接收
			  shellHandler(&shell, recv_buf);
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_UART_RxCpltCallback+0x38>)
 8000d64:	781a      	ldrb	r2, [r3, #0]
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_UART_RxCpltCallback+0x3c>)
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f008 f87c 	bl	8008e68 <shellHandler>
        //使能串口中断接收
			  HAL_UART_Receive_IT(&huart1, (uint8_t*)&recv_buf, 1);
 8000d70:	4905      	ldr	r1, [pc, #20]	; (8000d88 <HAL_UART_RxCpltCallback+0x38>)
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <HAL_UART_RxCpltCallback+0x40>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 f8d8 	bl	8002f2c <HAL_UART_Receive_IT>
    }
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40013800 	.word	0x40013800
 8000d88:	20000084 	.word	0x20000084
 8000d8c:	20001628 	.word	0x20001628
 8000d90:	200000d0 	.word	0x200000d0

08000d94 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2314      	movs	r3, #20
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f008 fd84 	bl	80098b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_GPIO_Init+0x68>)
 8000daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_GPIO_Init+0x68>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	430a      	orrs	r2, r1
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_GPIO_Init+0x68>)
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	2201      	movs	r2, #1
 8000dba:	4013      	ands	r3, r2
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 fd1f 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2203      	movs	r2, #3
 8000de4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000de6:	1d3a      	adds	r2, r7, #4
 8000de8:	23a0      	movs	r3, #160	; 0xa0
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fb96 	bl	8001520 <HAL_GPIO_Init>

}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b006      	add	sp, #24
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f000 f9f8 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f80c 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f7ff ffc2 	bl	8000d94 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e10:	f000 f94c 	bl	80010ac <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000e14:	f003 fb72 	bl	80044fc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000e18:	f7ff ff44 	bl	8000ca4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e1c:	f003 fb9a 	bl	8004554 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <main+0x20>
	...

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b09d      	sub	sp, #116	; 0x74
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	2438      	movs	r4, #56	; 0x38
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	0018      	movs	r0, r3
 8000e30:	2338      	movs	r3, #56	; 0x38
 8000e32:	001a      	movs	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	f008 fd3b 	bl	80098b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3a:	2324      	movs	r3, #36	; 0x24
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2314      	movs	r3, #20
 8000e42:	001a      	movs	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f008 fd33 	bl	80098b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2324      	movs	r3, #36	; 0x24
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f008 fd2c 	bl	80098b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <SystemClock_Config+0xdc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <SystemClock_Config+0xe0>)
 8000e5e:	401a      	ands	r2, r3
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <SystemClock_Config+0xdc>)
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	0109      	lsls	r1, r1, #4
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2202      	movs	r2, #2
 8000e70:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2201      	movs	r2, #1
 8000e76:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2202      	movs	r2, #2
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	02d2      	lsls	r2, r2, #11
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	03d2      	lsls	r2, r2, #15
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f000 fcd3 	bl	8001848 <HAL_RCC_OscConfig>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000ea6:	f000 f83f 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	2124      	movs	r1, #36	; 0x24
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	220f      	movs	r2, #15
 8000eb0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2101      	movs	r1, #1
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 f87e 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ed8:	f000 f826 	bl	8000f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	003b      	movs	r3, r7
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 fac6 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ef4:	f000 f818 	bl	8000f28 <Error_Handler>
  }
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b01d      	add	sp, #116	; 0x74
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	40007000 	.word	0x40007000
 8000f04:	ffffe7ff 	.word	0xffffe7ff

08000f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d101      	bne.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000f1c:	f000 f98c 	bl	8001238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_MspInit+0x34>)
 8000f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_MspInit+0x34>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	430a      	orrs	r2, r1
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_MspInit+0x34>)
 8000f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_MspInit+0x34>)
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	0549      	lsls	r1, r1, #21
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000f52:	2302      	movs	r3, #2
 8000f54:	425b      	negs	r3, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	2103      	movs	r1, #3
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 fa34 	bl	80013c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b5b0      	push	{r4, r5, r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	0019      	movs	r1, r3
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f000 fa24 	bl	80013c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f80:	200f      	movs	r0, #15
 8000f82:	f000 fa36 	bl	80013f2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <HAL_InitTick+0xe4>)
 8000f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <HAL_InitTick+0xe4>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f92:	2308      	movs	r3, #8
 8000f94:	18fa      	adds	r2, r7, r3
 8000f96:	240c      	movs	r4, #12
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f001 fa3b 	bl	8002418 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d104      	bne.n	8000fb8 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fae:	f001 fa07 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb6:	e004      	b.n	8000fc2 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fb8:	f001 fa02 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	4923      	ldr	r1, [pc, #140]	; (8001054 <HAL_InitTick+0xe8>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff f8b0 	bl	800012c <__udivsi3>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_InitTick+0xec>)
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	05d2      	lsls	r2, r2, #23
 8000fd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_InitTick+0xec>)
 8000fdc:	4a1f      	ldr	r2, [pc, #124]	; (800105c <HAL_InitTick+0xf0>)
 8000fde:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_InitTick+0xec>)
 8000fe2:	6a3a      	ldr	r2, [r7, #32]
 8000fe4:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_InitTick+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_InitTick+0xec>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8000ff2:	252b      	movs	r5, #43	; 0x2b
 8000ff4:	197c      	adds	r4, r7, r5
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_InitTick+0xec>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fbcd 	bl	8002798 <HAL_TIM_Base_Init>
 8000ffe:	0003      	movs	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001002:	197b      	adds	r3, r7, r5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d11b      	bne.n	8001042 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800100a:	197c      	adds	r4, r7, r5
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0xec>)
 800100e:	0018      	movs	r0, r3
 8001010:	f001 fc0a 	bl	8002828 <HAL_TIM_Base_Start_IT>
 8001014:	0003      	movs	r3, r0
 8001016:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001018:	197b      	adds	r3, r7, r5
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d110      	bne.n	8001042 <HAL_InitTick+0xd6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d809      	bhi.n	800103a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	0019      	movs	r1, r3
 800102c:	200f      	movs	r0, #15
 800102e:	f000 f9cb 	bl	80013c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_InitTick+0xf4>)
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e003      	b.n	8001042 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800103a:	232b      	movs	r3, #43	; 0x2b
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001042:	232b      	movs	r3, #43	; 0x2b
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b00c      	add	sp, #48	; 0x30
 800104e:	bdb0      	pop	{r4, r5, r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	000f4240 	.word	0x000f4240
 8001058:	20000090 	.word	0x20000090
 800105c:	000003e7 	.word	0x000003e7
 8001060:	20000004 	.word	0x20000004

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <TIM2_IRQHandler+0x14>)
 8001076:	0018      	movs	r0, r3
 8001078:	f001 fc22 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000090 	.word	0x20000090

08001088 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <USART1_IRQHandler+0x14>)
 800108e:	0018      	movs	r0, r3
 8001090:	f001 ffaa 	bl	8002fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	200000d0 	.word	0x200000d0

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_USART1_UART_Init+0x5c>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010b8:	22e1      	movs	r2, #225	; 0xe1
 80010ba:	0252      	lsls	r2, r2, #9
 80010bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <MX_USART1_UART_Init+0x58>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f001 fd41 	bl	8002b78 <HAL_UART_Init>
 80010f6:	1e03      	subs	r3, r0, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010fa:	f7ff ff15 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000d0 	.word	0x200000d0
 8001108:	40013800 	.word	0x40013800

0800110c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	240c      	movs	r4, #12
 8001116:	193b      	adds	r3, r7, r4
 8001118:	0018      	movs	r0, r3
 800111a:	2314      	movs	r3, #20
 800111c:	001a      	movs	r2, r3
 800111e:	2100      	movs	r1, #0
 8001120:	f008 fbc6 	bl	80098b0 <memset>
  if(uartHandle->Instance==USART1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_UART_MspInit+0x90>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d132      	bne.n	8001194 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_UART_MspInit+0x94>)
 8001130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_UART_MspInit+0x94>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	01c9      	lsls	r1, r1, #7
 8001138:	430a      	orrs	r2, r1
 800113a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_UART_MspInit+0x94>)
 800113e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x94>)
 8001142:	2101      	movs	r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_UART_MspInit+0x94>)
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2201      	movs	r2, #1
 800114e:	4013      	ands	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001154:	193b      	adds	r3, r7, r4
 8001156:	22c0      	movs	r2, #192	; 0xc0
 8001158:	00d2      	lsls	r2, r2, #3
 800115a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	0021      	movs	r1, r4
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2202      	movs	r2, #2
 8001162:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2203      	movs	r2, #3
 800116e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2204      	movs	r2, #4
 8001174:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	187a      	adds	r2, r7, r1
 8001178:	23a0      	movs	r3, #160	; 0xa0
 800117a:	05db      	lsls	r3, r3, #23
 800117c:	0011      	movs	r1, r2
 800117e:	0018      	movs	r0, r3
 8001180:	f000 f9ce 	bl	8001520 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2103      	movs	r1, #3
 8001188:	201b      	movs	r0, #27
 800118a:	f000 f91d 	bl	80013c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800118e:	201b      	movs	r0, #27
 8001190:	f000 f92f 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b009      	add	sp, #36	; 0x24
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	40013800 	.word	0x40013800
 80011a0:	40021000 	.word	0x40021000

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a8:	f7ff ff7a 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LoopForever+0xe>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <LoopForever+0x16>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f008 fb87 	bl	80098e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff fe13 	bl	8000e00 <main>

080011da <LoopForever>:

LoopForever:
    b LoopForever
 80011da:	e7fe      	b.n	80011da <LoopForever>
  ldr   r0, =_estack
 80011dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011e8:	0800a088 	.word	0x0800a088
  ldr r2, =_sbss
 80011ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011f0:	200018a0 	.word	0x200018a0

080011f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_COMP_IRQHandler>
	...

080011f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x3c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_Init+0x3c>)
 800120a:	2140      	movs	r1, #64	; 0x40
 800120c:	430a      	orrs	r2, r1
 800120e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff feab 	bl	8000f6c <HAL_InitTick>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d003      	beq.n	8001222 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	e001      	b.n	8001226 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001222:	f7ff fe87 	bl	8000f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_IncTick+0x1c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	001a      	movs	r2, r3
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x20>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	18d2      	adds	r2, r2, r3
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_IncTick+0x20>)
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	20000008 	.word	0x20000008
 8001258:	20000158 	.word	0x20000158

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <HAL_GetTick+0x10>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000158 	.word	0x20000158

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff fff0 	bl	800125c <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3301      	adds	r3, #1
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	001a      	movs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	189b      	adds	r3, r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	f7ff ffe0 	bl	800125c <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	20000008 	.word	0x20000008

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	0002      	movs	r2, r0
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ca:	d809      	bhi.n	80012e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	001a      	movs	r2, r3
 80012d2:	231f      	movs	r3, #31
 80012d4:	401a      	ands	r2, r3
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_EnableIRQ+0x30>)
 80012d8:	2101      	movs	r1, #1
 80012da:	4091      	lsls	r1, r2
 80012dc:	000a      	movs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
  }
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	0002      	movs	r2, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001300:	d828      	bhi.n	8001354 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <__NVIC_SetPriority+0xd4>)
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b25b      	sxtb	r3, r3
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	33c0      	adds	r3, #192	; 0xc0
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	589b      	ldr	r3, [r3, r2]
 8001312:	1dfa      	adds	r2, r7, #7
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	0011      	movs	r1, r2
 8001318:	2203      	movs	r2, #3
 800131a:	400a      	ands	r2, r1
 800131c:	00d2      	lsls	r2, r2, #3
 800131e:	21ff      	movs	r1, #255	; 0xff
 8001320:	4091      	lsls	r1, r2
 8001322:	000a      	movs	r2, r1
 8001324:	43d2      	mvns	r2, r2
 8001326:	401a      	ands	r2, r3
 8001328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	019b      	lsls	r3, r3, #6
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	401a      	ands	r2, r3
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	0018      	movs	r0, r3
 8001338:	2303      	movs	r3, #3
 800133a:	4003      	ands	r3, r0
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001340:	481f      	ldr	r0, [pc, #124]	; (80013c0 <__NVIC_SetPriority+0xd4>)
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	430a      	orrs	r2, r1
 800134c:	33c0      	adds	r3, #192	; 0xc0
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001352:	e031      	b.n	80013b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <__NVIC_SetPriority+0xd8>)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	0019      	movs	r1, r3
 800135c:	230f      	movs	r3, #15
 800135e:	400b      	ands	r3, r1
 8001360:	3b08      	subs	r3, #8
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3306      	adds	r3, #6
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	3304      	adds	r3, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1dfa      	adds	r2, r7, #7
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	0011      	movs	r1, r2
 8001374:	2203      	movs	r2, #3
 8001376:	400a      	ands	r2, r1
 8001378:	00d2      	lsls	r2, r2, #3
 800137a:	21ff      	movs	r1, #255	; 0xff
 800137c:	4091      	lsls	r1, r2
 800137e:	000a      	movs	r2, r1
 8001380:	43d2      	mvns	r2, r2
 8001382:	401a      	ands	r2, r3
 8001384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	401a      	ands	r2, r3
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	2303      	movs	r3, #3
 8001396:	4003      	ands	r3, r0
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <__NVIC_SetPriority+0xd8>)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	001c      	movs	r4, r3
 80013a4:	230f      	movs	r3, #15
 80013a6:	4023      	ands	r3, r4
 80013a8:	3b08      	subs	r3, #8
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	430a      	orrs	r2, r1
 80013ae:	3306      	adds	r3, #6
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	18c3      	adds	r3, r0, r3
 80013b4:	3304      	adds	r3, #4
 80013b6:	601a      	str	r2, [r3, #0]
}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b003      	add	sp, #12
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	210f      	movs	r1, #15
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	1c02      	adds	r2, r0, #0
 80013d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	0011      	movs	r1, r2
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ff81 	bl	80012ec <__NVIC_SetPriority>
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	0002      	movs	r2, r0
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff ff57 	bl	80012b8 <__NVIC_EnableIRQ>
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800141a:	230f      	movs	r3, #15
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2225      	movs	r2, #37	; 0x25
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d008      	beq.n	8001440 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2204      	movs	r2, #4
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e024      	b.n	800148a <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	210e      	movs	r1, #14
 800144c:	438a      	bics	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001464:	221c      	movs	r2, #28
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	2101      	movs	r1, #1
 800146e:	4091      	lsls	r1, r2
 8001470:	000a      	movs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2225      	movs	r2, #37	; 0x25
 8001478:	2101      	movs	r1, #1
 800147a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2224      	movs	r2, #36	; 0x24
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]

    return status;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	781b      	ldrb	r3, [r3, #0]
  }
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149a:	210f      	movs	r1, #15
 800149c:	187b      	adds	r3, r7, r1
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2225      	movs	r2, #37	; 0x25
 80014a6:	5c9b      	ldrb	r3, [r3, r2]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d006      	beq.n	80014bc <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2204      	movs	r2, #4
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e02a      	b.n	8001512 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	210e      	movs	r1, #14
 80014c8:	438a      	bics	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2101      	movs	r1, #1
 80014d8:	438a      	bics	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	221c      	movs	r2, #28
 80014e2:	401a      	ands	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	2101      	movs	r1, #1
 80014ea:	4091      	lsls	r1, r2
 80014ec:	000a      	movs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2225      	movs	r2, #37	; 0x25
 80014f4:	2101      	movs	r1, #1
 80014f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2224      	movs	r2, #36	; 0x24
 80014fc:	2100      	movs	r1, #0
 80014fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	0010      	movs	r0, r2
 8001510:	4798      	blx	r3
    }
  }
  return status;
 8001512:	230f      	movs	r3, #15
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	781b      	ldrb	r3, [r3, #0]
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001536:	e14f      	b.n	80017d8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4091      	lsls	r1, r2
 8001542:	000a      	movs	r2, r1
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d100      	bne.n	8001550 <HAL_GPIO_Init+0x30>
 800154e:	e140      	b.n	80017d2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	2b01      	cmp	r3, #1
 800155a:	d005      	beq.n	8001568 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001564:	2b02      	cmp	r3, #2
 8001566:	d130      	bne.n	80015ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	409a      	lsls	r2, r3
 8001576:	0013      	movs	r3, r2
 8001578:	43da      	mvns	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	409a      	lsls	r2, r3
 800158a:	0013      	movs	r3, r2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159e:	2201      	movs	r2, #1
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	2201      	movs	r2, #1
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d017      	beq.n	8001606 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	4013      	ands	r3, r2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d123      	bne.n	800165a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	58d3      	ldr	r3, [r2, r3]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2207      	movs	r2, #7
 8001624:	4013      	ands	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	220f      	movs	r2, #15
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2107      	movs	r1, #7
 800163e:	400b      	ands	r3, r1
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	08da      	lsrs	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3208      	adds	r2, #8
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	6939      	ldr	r1, [r7, #16]
 8001658:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	43da      	mvns	r2, r3
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2203      	movs	r2, #3
 8001678:	401a      	ands	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	029b      	lsls	r3, r3, #10
 8001696:	4013      	ands	r3, r2
 8001698:	d100      	bne.n	800169c <HAL_GPIO_Init+0x17c>
 800169a:	e09a      	b.n	80017d2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800169e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_GPIO_Init+0x2d4>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	589b      	ldr	r3, [r3, r2]
 80016b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	220f      	movs	r2, #15
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	23a0      	movs	r3, #160	; 0xa0
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x1ea>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a47      	ldr	r2, [pc, #284]	; (80017f8 <HAL_GPIO_Init+0x2d8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x1e6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a46      	ldr	r2, [pc, #280]	; (80017fc <HAL_GPIO_Init+0x2dc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x1e2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a45      	ldr	r2, [pc, #276]	; (8001800 <HAL_GPIO_Init+0x2e0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x1de>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a44      	ldr	r2, [pc, #272]	; (8001804 <HAL_GPIO_Init+0x2e4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x1da>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e008      	b.n	800170c <HAL_GPIO_Init+0x1ec>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x1ec>
 80016fe:	2303      	movs	r3, #3
 8001700:	e004      	b.n	800170c <HAL_GPIO_Init+0x1ec>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x1ec>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x1ec>
 800170a:	2300      	movs	r3, #0
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	2103      	movs	r1, #3
 8001710:	400a      	ands	r2, r1
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	4093      	lsls	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171c:	4935      	ldr	r1, [pc, #212]	; (80017f4 <HAL_GPIO_Init+0x2d4>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	035b      	lsls	r3, r3, #13
 8001742:	4013      	ands	r3, r2
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001754:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	039b      	lsls	r3, r3, #14
 800176c:	4013      	ands	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	029b      	lsls	r3, r3, #10
 8001796:	4013      	ands	r3, r2
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43da      	mvns	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	025b      	lsls	r3, r3, #9
 80017c0:	4013      	ands	r3, r2
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	40da      	lsrs	r2, r3
 80017e0:	1e13      	subs	r3, r2, #0
 80017e2:	d000      	beq.n	80017e6 <HAL_GPIO_Init+0x2c6>
 80017e4:	e6a8      	b.n	8001538 <HAL_GPIO_Init+0x18>
  }
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b006      	add	sp, #24
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000
 80017f8:	50000400 	.word	0x50000400
 80017fc:	50000800 	.word	0x50000800
 8001800:	50000c00 	.word	0x50000c00
 8001804:	50001c00 	.word	0x50001c00
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	0008      	movs	r0, r1
 8001816:	0011      	movs	r1, r2
 8001818:	1cbb      	adds	r3, r7, #2
 800181a:	1c02      	adds	r2, r0, #0
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	1c7b      	adds	r3, r7, #1
 8001820:	1c0a      	adds	r2, r1, #0
 8001822:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001824:	1c7b      	adds	r3, r7, #1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182c:	1cbb      	adds	r3, r7, #2
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001836:	1cbb      	adds	r3, r7, #2
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f000 fbaf 	bl	8001fba <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4bcf      	ldr	r3, [pc, #828]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	220c      	movs	r2, #12
 8001862:	4013      	ands	r3, r2
 8001864:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001866:	4bcd      	ldr	r3, [pc, #820]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4013      	ands	r3, r2
 8001870:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x36>
 800187c:	e07e      	b.n	800197c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	2b08      	cmp	r3, #8
 8001882:	d007      	beq.n	8001894 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0x68>
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	429a      	cmp	r2, r3
 8001892:	d10d      	bne.n	80018b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	4bc1      	ldr	r3, [pc, #772]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	4013      	ands	r3, r2
 800189e:	d100      	bne.n	80018a2 <HAL_RCC_OscConfig+0x5a>
 80018a0:	e06b      	b.n	800197a <HAL_RCC_OscConfig+0x132>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d167      	bne.n	800197a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f000 fb85 	bl	8001fba <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x84>
 80018bc:	4bb7      	ldr	r3, [pc, #732]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4bb6      	ldr	r3, [pc, #728]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	0249      	lsls	r1, r1, #9
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e027      	b.n	800191c <HAL_RCC_OscConfig+0xd4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	23a0      	movs	r3, #160	; 0xa0
 80018d2:	02db      	lsls	r3, r3, #11
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10e      	bne.n	80018f6 <HAL_RCC_OscConfig+0xae>
 80018d8:	4bb0      	ldr	r3, [pc, #704]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4baf      	ldr	r3, [pc, #700]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	02c9      	lsls	r1, r1, #11
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	4bad      	ldr	r3, [pc, #692]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4bac      	ldr	r3, [pc, #688]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0249      	lsls	r1, r1, #9
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e012      	b.n	800191c <HAL_RCC_OscConfig+0xd4>
 80018f6:	4ba9      	ldr	r3, [pc, #676]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4ba8      	ldr	r3, [pc, #672]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80018fc:	49a8      	ldr	r1, [pc, #672]	; (8001ba0 <HAL_RCC_OscConfig+0x358>)
 80018fe:	400a      	ands	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	4ba6      	ldr	r3, [pc, #664]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	4013      	ands	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4ba2      	ldr	r3, [pc, #648]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4ba1      	ldr	r3, [pc, #644]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001916:	49a3      	ldr	r1, [pc, #652]	; (8001ba4 <HAL_RCC_OscConfig+0x35c>)
 8001918:	400a      	ands	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d015      	beq.n	8001950 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fc9a 	bl	800125c <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800192c:	e009      	b.n	8001942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192e:	f7ff fc95 	bl	800125c <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b64      	cmp	r3, #100	; 0x64
 800193a:	d902      	bls.n	8001942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	f000 fb3c 	bl	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001942:	4b96      	ldr	r3, [pc, #600]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	029b      	lsls	r3, r3, #10
 800194a:	4013      	ands	r3, r2
 800194c:	d0ef      	beq.n	800192e <HAL_RCC_OscConfig+0xe6>
 800194e:	e015      	b.n	800197c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fc84 	bl	800125c <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195a:	f7ff fc7f 	bl	800125c <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b64      	cmp	r3, #100	; 0x64
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e326      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800196c:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	029b      	lsls	r3, r3, #10
 8001974:	4013      	ands	r3, r2
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x112>
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d100      	bne.n	8001988 <HAL_RCC_OscConfig+0x140>
 8001986:	e08b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d13e      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1d0>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d13b      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80019a0:	4b7e      	ldr	r3, [pc, #504]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2204      	movs	r2, #4
 80019a6:	4013      	ands	r3, r2
 80019a8:	d004      	beq.n	80019b4 <HAL_RCC_OscConfig+0x16c>
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e302      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b79      	ldr	r3, [pc, #484]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a7b      	ldr	r2, [pc, #492]	; (8001ba8 <HAL_RCC_OscConfig+0x360>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	021a      	lsls	r2, r3, #8
 80019c4:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019ca:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2209      	movs	r2, #9
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019dc:	f000 fc40 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 80019e0:	0001      	movs	r1, r0
 80019e2:	4b6e      	ldr	r3, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	220f      	movs	r2, #15
 80019ea:	4013      	ands	r3, r2
 80019ec:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x364>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	000a      	movs	r2, r1
 80019f2:	40da      	lsrs	r2, r3
 80019f4:	4b6e      	ldr	r3, [pc, #440]	; (8001bb0 <HAL_RCC_OscConfig+0x368>)
 80019f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80019f8:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <HAL_RCC_OscConfig+0x36c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2513      	movs	r5, #19
 80019fe:	197c      	adds	r4, r7, r5
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fab3 	bl	8000f6c <HAL_InitTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d046      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001a12:	197b      	adds	r3, r7, r5
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	e2d0      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d027      	beq.n	8001a6e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2209      	movs	r2, #9
 8001a24:	4393      	bics	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	4b5c      	ldr	r3, [pc, #368]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fc14 	bl	800125c <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fc0f 	bl	800125c <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e2b6      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2204      	movs	r2, #4
 8001a52:	4013      	ands	r3, r2
 8001a54:	d0f1      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a56:	4b51      	ldr	r3, [pc, #324]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a53      	ldr	r2, [pc, #332]	; (8001ba8 <HAL_RCC_OscConfig+0x360>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	0019      	movs	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	021a      	lsls	r2, r3, #8
 8001a66:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	e018      	b.n	8001aa0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001a74:	2101      	movs	r1, #1
 8001a76:	438a      	bics	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fbef 	bl	800125c <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff fbea 	bl	800125c <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e291      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d1f1      	bne.n	8001a84 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d100      	bne.n	8001aac <HAL_RCC_OscConfig+0x264>
 8001aaa:	e0a1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d140      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x282>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e277      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <HAL_RCC_OscConfig+0x370>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ade:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	0a19      	lsrs	r1, r3, #8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	061a      	lsls	r2, r3, #24
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001aee:	430a      	orrs	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	3301      	adds	r3, #1
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	0212      	lsls	r2, r2, #8
 8001afe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	210f      	movs	r1, #15
 8001b08:	400b      	ands	r3, r1
 8001b0a:	4928      	ldr	r1, [pc, #160]	; (8001bac <HAL_RCC_OscConfig+0x364>)
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_OscConfig+0x368>)
 8001b12:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x36c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2513      	movs	r5, #19
 8001b1a:	197c      	adds	r4, r7, r5
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7ff fa25 	bl	8000f6c <HAL_InitTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b26:	197b      	adds	r3, r7, r5
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d060      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001b2e:	197b      	adds	r3, r7, r5
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	e242      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d03f      	beq.n	8001bbc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0049      	lsls	r1, r1, #1
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fb87 	bl	800125c <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b54:	f7ff fb82 	bl	800125c <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e229      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_RCC_OscConfig+0x370>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	0a19      	lsrs	r1, r3, #8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	061a      	lsls	r2, r3, #24
 8001b94:	4b01      	ldr	r3, [pc, #4]	; (8001b9c <HAL_RCC_OscConfig+0x354>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e029      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3a8>
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	fffeffff 	.word	0xfffeffff
 8001ba4:	fffbffff 	.word	0xfffbffff
 8001ba8:	ffffe0ff 	.word	0xffffe0ff
 8001bac:	08009d50 	.word	0x08009d50
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bbc:	4bbd      	ldr	r3, [pc, #756]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4bbc      	ldr	r3, [pc, #752]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001bc2:	49bd      	ldr	r1, [pc, #756]	; (8001eb8 <HAL_RCC_OscConfig+0x670>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb48 	bl	800125c <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fb43 	bl	800125c <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1ea      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001be4:	4bb3      	ldr	r3, [pc, #716]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d036      	beq.n	8001c68 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d019      	beq.n	8001c36 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	4bac      	ldr	r3, [pc, #688]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c06:	4bab      	ldr	r3, [pc, #684]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb25 	bl	800125c <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c18:	f7ff fb20 	bl	800125c <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1c7      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c2a:	4ba2      	ldr	r3, [pc, #648]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d0f1      	beq.n	8001c18 <HAL_RCC_OscConfig+0x3d0>
 8001c34:	e018      	b.n	8001c68 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c36:	4b9f      	ldr	r3, [pc, #636]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c3a:	4b9e      	ldr	r3, [pc, #632]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	438a      	bics	r2, r1
 8001c40:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fb0b 	bl	800125c <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fb06 	bl	800125c <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1ad      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c5e:	4b95      	ldr	r3, [pc, #596]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d1f1      	bne.n	8001c4c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d100      	bne.n	8001c74 <HAL_RCC_OscConfig+0x42c>
 8001c72:	e0ae      	b.n	8001dd2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c74:	2027      	movs	r0, #39	; 0x27
 8001c76:	183b      	adds	r3, r7, r0
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7c:	4b8d      	ldr	r3, [pc, #564]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	055b      	lsls	r3, r3, #21
 8001c84:	4013      	ands	r3, r2
 8001c86:	d109      	bne.n	8001c9c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	4b8a      	ldr	r3, [pc, #552]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c8c:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	0549      	lsls	r1, r1, #21
 8001c92:	430a      	orrs	r2, r1
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c96:	183b      	adds	r3, r7, r0
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b87      	ldr	r3, [pc, #540]	; (8001ebc <HAL_RCC_OscConfig+0x674>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d11a      	bne.n	8001cde <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca8:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <HAL_RCC_OscConfig+0x674>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b83      	ldr	r3, [pc, #524]	; (8001ebc <HAL_RCC_OscConfig+0x674>)
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	0049      	lsls	r1, r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fad1 	bl	800125c <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc0:	f7ff facc 	bl	800125c <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e173      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b7a      	ldr	r3, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x674>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_OscConfig+0x4b2>
 8001cea:	4b72      	ldr	r3, [pc, #456]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cee:	4b71      	ldr	r3, [pc, #452]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	0049      	lsls	r1, r1, #1
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf8:	e031      	b.n	8001d5e <HAL_RCC_OscConfig+0x516>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4d4>
 8001d02:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d06:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d08:	496b      	ldr	r1, [pc, #428]	; (8001eb8 <HAL_RCC_OscConfig+0x670>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d0e:	4b69      	ldr	r3, [pc, #420]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d12:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d14:	496a      	ldr	r1, [pc, #424]	; (8001ec0 <HAL_RCC_OscConfig+0x678>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	651a      	str	r2, [r3, #80]	; 0x50
 8001d1a:	e020      	b.n	8001d5e <HAL_RCC_OscConfig+0x516>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	23a0      	movs	r3, #160	; 0xa0
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d10e      	bne.n	8001d46 <HAL_RCC_OscConfig+0x4fe>
 8001d28:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d2c:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	00c9      	lsls	r1, r1, #3
 8001d32:	430a      	orrs	r2, r1
 8001d34:	651a      	str	r2, [r3, #80]	; 0x50
 8001d36:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d3a:	4b5e      	ldr	r3, [pc, #376]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	0049      	lsls	r1, r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	651a      	str	r2, [r3, #80]	; 0x50
 8001d44:	e00b      	b.n	8001d5e <HAL_RCC_OscConfig+0x516>
 8001d46:	4b5b      	ldr	r3, [pc, #364]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d4a:	4b5a      	ldr	r3, [pc, #360]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d4c:	495a      	ldr	r1, [pc, #360]	; (8001eb8 <HAL_RCC_OscConfig+0x670>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	651a      	str	r2, [r3, #80]	; 0x50
 8001d52:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d56:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d58:	4959      	ldr	r1, [pc, #356]	; (8001ec0 <HAL_RCC_OscConfig+0x678>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d015      	beq.n	8001d92 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fa79 	bl	800125c <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d6e:	e009      	b.n	8001d84 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fa74 	bl	800125c <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e11a      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0ef      	beq.n	8001d70 <HAL_RCC_OscConfig+0x528>
 8001d90:	e014      	b.n	8001dbc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fa63 	bl	800125c <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d9a:	e009      	b.n	8001db0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fa5e 	bl	800125c <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	4a47      	ldr	r2, [pc, #284]	; (8001ec4 <HAL_RCC_OscConfig+0x67c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e104      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001db0:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d1ef      	bne.n	8001d9c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dbc:	2327      	movs	r3, #39	; 0x27
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001dcc:	493e      	ldr	r1, [pc, #248]	; (8001ec8 <HAL_RCC_OscConfig+0x680>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d049      	beq.n	8001e70 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d026      	beq.n	8001e32 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	430a      	orrs	r2, r1
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x684>)
 8001dfe:	6a1a      	ldr	r2, [r3, #32]
 8001e00:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_RCC_OscConfig+0x684>)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0189      	lsls	r1, r1, #6
 8001e06:	430a      	orrs	r2, r1
 8001e08:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fa27 	bl	800125c <HAL_GetTick>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e14:	f7ff fa22 	bl	800125c <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e0c9      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0f1      	beq.n	8001e14 <HAL_RCC_OscConfig+0x5cc>
 8001e30:	e01e      	b.n	8001e70 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_RCC_OscConfig+0x684>)
 8001e40:	6a1a      	ldr	r2, [r3, #32]
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCC_OscConfig+0x684>)
 8001e44:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <HAL_RCC_OscConfig+0x688>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa07 	bl	800125c <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e54:	f7ff fa02 	bl	800125c <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0a9      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d1f1      	bne.n	8001e54 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <HAL_RCC_OscConfig+0x632>
 8001e78:	e09e      	b.n	8001fb8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d100      	bne.n	8001e82 <HAL_RCC_OscConfig+0x63a>
 8001e80:	e077      	b.n	8001f72 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d158      	bne.n	8001f3c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_OscConfig+0x66c>)
 8001e90:	4910      	ldr	r1, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x68c>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff f9e1 	bl	800125c <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e9e:	e01b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f9dc 	bl	800125c <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d914      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e083      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	fffffeff 	.word	0xfffffeff
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	fffffbff 	.word	0xfffffbff
 8001ec4:	00001388 	.word	0x00001388
 8001ec8:	efffffff 	.word	0xefffffff
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	ffffdfff 	.word	0xffffdfff
 8001ed4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ed8:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	049b      	lsls	r3, r3, #18
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d1dd      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee4:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a37      	ldr	r2, [pc, #220]	; (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	431a      	orrs	r2, r3
 8001efe:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0449      	lsls	r1, r1, #17
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff f9a3 	bl	800125c <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff f99e 	bl	800125c <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e045      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	049b      	lsls	r3, r3, #18
 8001f36:	4013      	ands	r3, r2
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x6d4>
 8001f3a:	e03d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff f988 	bl	800125c <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f7ff f983 	bl	800125c <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e02a      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	049b      	lsls	r3, r3, #18
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x70a>
 8001f70:	e022      	b.n	8001fb8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e01d      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_OscConfig+0x77c>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	025b      	lsls	r3, r3, #9
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d10f      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	23f0      	movs	r3, #240	; 0xf0
 8001f98:	039b      	lsls	r3, r3, #14
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	23c0      	movs	r3, #192	; 0xc0
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b00a      	add	sp, #40	; 0x28
 8001fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	ff02ffff 	.word	0xff02ffff
 8001fcc:	feffffff 	.word	0xfeffffff

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e128      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b96      	ldr	r3, [pc, #600]	; (8002240 <HAL_RCC_ClockConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d91e      	bls.n	8002030 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b93      	ldr	r3, [pc, #588]	; (8002240 <HAL_RCC_ClockConfig+0x270>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b90      	ldr	r3, [pc, #576]	; (8002240 <HAL_RCC_ClockConfig+0x270>)
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002004:	f7ff f92a 	bl	800125c <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200c:	e009      	b.n	8002022 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f7ff f925 	bl	800125c <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4a8a      	ldr	r2, [pc, #552]	; (8002244 <HAL_RCC_ClockConfig+0x274>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e109      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b87      	ldr	r3, [pc, #540]	; (8002240 <HAL_RCC_ClockConfig+0x270>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d1ee      	bne.n	800200e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203a:	4b83      	ldr	r3, [pc, #524]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	22f0      	movs	r2, #240	; 0xf0
 8002040:	4393      	bics	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b7f      	ldr	r3, [pc, #508]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 800204a:	430a      	orrs	r2, r1
 800204c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d100      	bne.n	800205a <HAL_RCC_ClockConfig+0x8a>
 8002058:	e089      	b.n	800216e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002062:	4b79      	ldr	r3, [pc, #484]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	4013      	ands	r3, r2
 800206c:	d120      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0e1      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800207a:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	049b      	lsls	r3, r3, #18
 8002082:	4013      	ands	r3, r2
 8002084:	d114      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0d5      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002092:	4b6d      	ldr	r3, [pc, #436]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2204      	movs	r2, #4
 8002098:	4013      	ands	r3, r2
 800209a:	d109      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0ca      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020a0:	4b69      	ldr	r3, [pc, #420]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0c2      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b0:	4b65      	ldr	r3, [pc, #404]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2203      	movs	r2, #3
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4b62      	ldr	r3, [pc, #392]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff f8ca 	bl	800125c <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d111      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d4:	e009      	b.n	80020ea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7ff f8c1 	bl	800125c <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4a58      	ldr	r2, [pc, #352]	; (8002244 <HAL_RCC_ClockConfig+0x274>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0a5      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ea:	4b57      	ldr	r3, [pc, #348]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	220c      	movs	r2, #12
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d1ef      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x106>
 80020f6:	e03a      	b.n	800216e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d111      	bne.n	8002124 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002100:	e009      	b.n	8002116 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002102:	f7ff f8ab 	bl	800125c <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_RCC_ClockConfig+0x274>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e08f      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002116:	4b4c      	ldr	r3, [pc, #304]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	220c      	movs	r2, #12
 800211c:	4013      	ands	r3, r2
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d1ef      	bne.n	8002102 <HAL_RCC_ClockConfig+0x132>
 8002122:	e024      	b.n	800216e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d11b      	bne.n	8002164 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800212c:	e009      	b.n	8002142 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212e:	f7ff f895 	bl	800125c <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	4a42      	ldr	r2, [pc, #264]	; (8002244 <HAL_RCC_ClockConfig+0x274>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e079      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	220c      	movs	r2, #12
 8002148:	4013      	ands	r3, r2
 800214a:	2b04      	cmp	r3, #4
 800214c:	d1ef      	bne.n	800212e <HAL_RCC_ClockConfig+0x15e>
 800214e:	e00e      	b.n	800216e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7ff f884 	bl	800125c <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_RCC_ClockConfig+0x274>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e068      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002164:	4b38      	ldr	r3, [pc, #224]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	220c      	movs	r2, #12
 800216a:	4013      	ands	r3, r2
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_ClockConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2201      	movs	r2, #1
 8002174:	4013      	ands	r3, r2
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d21e      	bcs.n	80021ba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <HAL_RCC_ClockConfig+0x270>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	4393      	bics	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_RCC_ClockConfig+0x270>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800218e:	f7ff f865 	bl	800125c <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	e009      	b.n	80021ac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7ff f860 	bl	800125c <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_RCC_ClockConfig+0x274>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e044      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_ClockConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d1ee      	bne.n	8002198 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2204      	movs	r2, #4
 80021c0:	4013      	ands	r3, r2
 80021c2:	d009      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_RCC_ClockConfig+0x27c>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2208      	movs	r2, #8
 80021de:	4013      	ands	r3, r2
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <HAL_RCC_ClockConfig+0x280>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	00da      	lsls	r2, r3, #3
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f8:	f000 f832 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 80021fc:	0001      	movs	r1, r0
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x278>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	220f      	movs	r2, #15
 8002206:	4013      	ands	r3, r2
 8002208:	4a12      	ldr	r2, [pc, #72]	; (8002254 <HAL_RCC_ClockConfig+0x284>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	000a      	movs	r2, r1
 800220e:	40da      	lsrs	r2, r3
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_ClockConfig+0x288>)
 8002212:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_RCC_ClockConfig+0x28c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	250b      	movs	r5, #11
 800221a:	197c      	adds	r4, r7, r5
 800221c:	0018      	movs	r0, r3
 800221e:	f7fe fea5 	bl	8000f6c <HAL_InitTick>
 8002222:	0003      	movs	r3, r0
 8002224:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002226:	197b      	adds	r3, r7, r5
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800222e:	197b      	adds	r3, r7, r5
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	e000      	b.n	8002236 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b004      	add	sp, #16
 800223c:	bdb0      	pop	{r4, r5, r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40022000 	.word	0x40022000
 8002244:	00001388 	.word	0x00001388
 8002248:	40021000 	.word	0x40021000
 800224c:	fffff8ff 	.word	0xfffff8ff
 8002250:	ffffc7ff 	.word	0xffffc7ff
 8002254:	08009d50 	.word	0x08009d50
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_GetSysClockFreq+0x138>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800226c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226e:	230c      	movs	r3, #12
 8002270:	4013      	ands	r3, r2
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d014      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002276:	d900      	bls.n	800227a <HAL_RCC_GetSysClockFreq+0x1a>
 8002278:	e07b      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x112>
 800227a:	2b04      	cmp	r3, #4
 800227c:	d002      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x24>
 800227e:	2b08      	cmp	r3, #8
 8002280:	d00b      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x3a>
 8002282:	e076      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002284:	4b44      	ldr	r3, [pc, #272]	; (8002398 <HAL_RCC_GetSysClockFreq+0x138>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2210      	movs	r2, #16
 800228a:	4013      	ands	r3, r2
 800228c:	d002      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800228e:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002292:	e07c      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002294:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002298:	e079      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229a:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x144>)
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800229e:	e076      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	0c9a      	lsrs	r2, r3, #18
 80022a4:	230f      	movs	r3, #15
 80022a6:	401a      	ands	r2, r3
 80022a8:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x148>)
 80022aa:	5c9b      	ldrb	r3, [r3, r2]
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	0d9a      	lsrs	r2, r3, #22
 80022b2:	2303      	movs	r3, #3
 80022b4:	4013      	ands	r3, r2
 80022b6:	3301      	adds	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ba:	4b37      	ldr	r3, [pc, #220]	; (8002398 <HAL_RCC_GetSysClockFreq+0x138>)
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	025b      	lsls	r3, r3, #9
 80022c2:	4013      	ands	r3, r2
 80022c4:	d01a      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	4a35      	ldr	r2, [pc, #212]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x144>)
 80022d0:	2300      	movs	r3, #0
 80022d2:	69b8      	ldr	r0, [r7, #24]
 80022d4:	69f9      	ldr	r1, [r7, #28]
 80022d6:	f7fe f8bf 	bl	8000458 <__aeabi_lmul>
 80022da:	0002      	movs	r2, r0
 80022dc:	000b      	movs	r3, r1
 80022de:	0010      	movs	r0, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f7fe f893 	bl	8000418 <__aeabi_uldivmod>
 80022f2:	0002      	movs	r2, r0
 80022f4:	000b      	movs	r3, r1
 80022f6:	0013      	movs	r3, r2
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
 80022fa:	e037      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCC_GetSysClockFreq+0x138>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2210      	movs	r2, #16
 8002302:	4013      	ands	r3, r2
 8002304:	d01a      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4a23      	ldr	r2, [pc, #140]	; (800239c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002310:	2300      	movs	r3, #0
 8002312:	68b8      	ldr	r0, [r7, #8]
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	f7fe f89f 	bl	8000458 <__aeabi_lmul>
 800231a:	0002      	movs	r2, r0
 800231c:	000b      	movs	r3, r1
 800231e:	0010      	movs	r0, r2
 8002320:	0019      	movs	r1, r3
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f7fe f873 	bl	8000418 <__aeabi_uldivmod>
 8002332:	0002      	movs	r2, r0
 8002334:	000b      	movs	r3, r1
 8002336:	0013      	movs	r3, r2
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
 800233a:	e017      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	0018      	movs	r0, r3
 8002340:	2300      	movs	r3, #0
 8002342:	0019      	movs	r1, r3
 8002344:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002346:	2300      	movs	r3, #0
 8002348:	f7fe f886 	bl	8000458 <__aeabi_lmul>
 800234c:	0002      	movs	r2, r0
 800234e:	000b      	movs	r3, r1
 8002350:	0010      	movs	r0, r2
 8002352:	0019      	movs	r1, r3
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	001c      	movs	r4, r3
 8002358:	2300      	movs	r3, #0
 800235a:	001d      	movs	r5, r3
 800235c:	0022      	movs	r2, r4
 800235e:	002b      	movs	r3, r5
 8002360:	f7fe f85a 	bl	8000418 <__aeabi_uldivmod>
 8002364:	0002      	movs	r2, r0
 8002366:	000b      	movs	r3, r1
 8002368:	0013      	movs	r3, r2
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800236c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002370:	e00d      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_GetSysClockFreq+0x138>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0b5b      	lsrs	r3, r3, #13
 8002378:	2207      	movs	r2, #7
 800237a:	4013      	ands	r3, r2
 800237c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	3301      	adds	r3, #1
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	0212      	lsls	r2, r2, #8
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800238c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b00e      	add	sp, #56	; 0x38
 8002396:	bdb0      	pop	{r4, r5, r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	003d0900 	.word	0x003d0900
 80023a0:	00f42400 	.word	0x00f42400
 80023a4:	007a1200 	.word	0x007a1200
 80023a8:	08009d68 	.word	0x08009d68

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <HAL_RCC_GetHCLKFreq+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c4:	f7ff fff2 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023c8:	0001      	movs	r1, r0
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	2207      	movs	r2, #7
 80023d2:	4013      	ands	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	40d9      	lsrs	r1, r3
 80023da:	000b      	movs	r3, r1
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08009d60 	.word	0x08009d60

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f0:	f7ff ffdc 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f4:	0001      	movs	r1, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	0adb      	lsrs	r3, r3, #11
 80023fc:	2207      	movs	r2, #7
 80023fe:	4013      	ands	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	40d9      	lsrs	r1, r3
 8002406:	000b      	movs	r3, r1
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40021000 	.word	0x40021000
 8002414:	08009d60 	.word	0x08009d60

08002418 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	220f      	movs	r2, #15
 8002426:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_GetClockConfig+0x5c>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2203      	movs	r2, #3
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_RCC_GetClockConfig+0x5c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	22f0      	movs	r2, #240	; 0xf0
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_RCC_GetClockConfig+0x5c>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	23e0      	movs	r3, #224	; 0xe0
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	401a      	ands	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_GetClockConfig+0x5c>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	23e0      	movs	r3, #224	; 0xe0
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	401a      	ands	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_GetClockConfig+0x60>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	401a      	ands	r2, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	601a      	str	r2, [r3, #0]
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	40021000 	.word	0x40021000
 8002478:	40022000 	.word	0x40022000

0800247c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002484:	2317      	movs	r3, #23
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	4013      	ands	r3, r2
 8002494:	d106      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	d100      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80024a2:	e104      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a4:	4bb1      	ldr	r3, [pc, #708]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	055b      	lsls	r3, r3, #21
 80024ac:	4013      	ands	r3, r2
 80024ae:	d10a      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4bae      	ldr	r3, [pc, #696]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024b4:	4bad      	ldr	r3, [pc, #692]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0549      	lsls	r1, r1, #21
 80024ba:	430a      	orrs	r2, r1
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80024be:	2317      	movs	r3, #23
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4baa      	ldr	r3, [pc, #680]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	d11a      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d2:	4ba7      	ldr	r3, [pc, #668]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4ba6      	ldr	r3, [pc, #664]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	0049      	lsls	r1, r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e0:	f7fe febc 	bl	800125c <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7fe feb7 	bl	800125c <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e133      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b9c      	ldr	r3, [pc, #624]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d0f0      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002508:	4b98      	ldr	r3, [pc, #608]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	23c0      	movs	r3, #192	; 0xc0
 800250e:	039b      	lsls	r3, r3, #14
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	23c0      	movs	r3, #192	; 0xc0
 800251a:	039b      	lsls	r3, r3, #14
 800251c:	4013      	ands	r3, r2
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d107      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	23c0      	movs	r3, #192	; 0xc0
 800252a:	039b      	lsls	r3, r3, #14
 800252c:	4013      	ands	r3, r2
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d013      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	23c0      	movs	r3, #192	; 0xc0
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	401a      	ands	r2, r3
 800253e:	23c0      	movs	r3, #192	; 0xc0
 8002540:	029b      	lsls	r3, r3, #10
 8002542:	429a      	cmp	r2, r3
 8002544:	d10a      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002546:	4b89      	ldr	r3, [pc, #548]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	029b      	lsls	r3, r3, #10
 800254e:	401a      	ands	r2, r3
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	429a      	cmp	r2, r3
 8002556:	d101      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e103      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800255c:	4b83      	ldr	r3, [pc, #524]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800255e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002560:	23c0      	movs	r3, #192	; 0xc0
 8002562:	029b      	lsls	r3, r3, #10
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d049      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	23c0      	movs	r3, #192	; 0xc0
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	4013      	ands	r3, r2
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	429a      	cmp	r2, r3
 800257c:	d004      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	4013      	ands	r3, r2
 8002586:	d10d      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	23c0      	movs	r3, #192	; 0xc0
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	4013      	ands	r3, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d034      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4013      	ands	r3, r2
 80025a2:	d02e      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80025a4:	4b71      	ldr	r3, [pc, #452]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a8:	4a72      	ldr	r2, [pc, #456]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ae:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025b2:	4b6e      	ldr	r3, [pc, #440]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	0309      	lsls	r1, r1, #12
 80025b8:	430a      	orrs	r2, r1
 80025ba:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025bc:	4b6b      	ldr	r3, [pc, #428]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025c2:	496d      	ldr	r1, [pc, #436]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80025c8:	4b68      	ldr	r3, [pc, #416]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	d014      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fe40 	bl	800125c <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025e0:	e009      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe fe3b 	bl	800125c <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	4a63      	ldr	r2, [pc, #396]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0b6      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025f6:	4b5d      	ldr	r3, [pc, #372]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	d0ef      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	4013      	ands	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	23c0      	movs	r3, #192	; 0xc0
 8002614:	029b      	lsls	r3, r3, #10
 8002616:	401a      	ands	r2, r3
 8002618:	23c0      	movs	r3, #192	; 0xc0
 800261a:	029b      	lsls	r3, r3, #10
 800261c:	429a      	cmp	r2, r3
 800261e:	d10c      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002620:	4b52      	ldr	r3, [pc, #328]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a56      	ldr	r2, [pc, #344]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	23c0      	movs	r3, #192	; 0xc0
 8002630:	039b      	lsls	r3, r3, #14
 8002632:	401a      	ands	r2, r3
 8002634:	4b4d      	ldr	r3, [pc, #308]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4b4c      	ldr	r3, [pc, #304]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800263c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	23c0      	movs	r3, #192	; 0xc0
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	401a      	ands	r2, r3
 8002648:	4b48      	ldr	r3, [pc, #288]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800264a:	430a      	orrs	r2, r1
 800264c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2220      	movs	r2, #32
 8002654:	4013      	ands	r3, r2
 8002656:	d01f      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	23c0      	movs	r3, #192	; 0xc0
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	401a      	ands	r2, r3
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	029b      	lsls	r3, r3, #10
 8002666:	429a      	cmp	r2, r3
 8002668:	d10c      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a44      	ldr	r2, [pc, #272]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002670:	4013      	ands	r3, r2
 8002672:	0019      	movs	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	23c0      	movs	r3, #192	; 0xc0
 800267a:	039b      	lsls	r3, r3, #14
 800267c:	401a      	ands	r2, r3
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002686:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	23c0      	movs	r3, #192	; 0xc0
 800268e:	029b      	lsls	r3, r3, #10
 8002690:	401a      	ands	r2, r3
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002694:	430a      	orrs	r2, r1
 8002696:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002698:	2317      	movs	r3, #23
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a8:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d009      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b8:	4b2c      	ldr	r3, [pc, #176]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026bc:	2203      	movs	r2, #3
 80026be:	4393      	bics	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026c8:	430a      	orrs	r2, r1
 80026ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	220c      	movs	r2, #12
 80026dc:	4393      	bics	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2204      	movs	r2, #4
 80026f0:	4013      	ands	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	4a23      	ldr	r2, [pc, #140]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002704:	430a      	orrs	r2, r1
 8002706:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2208      	movs	r2, #8
 800270e:	4013      	ands	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002722:	430a      	orrs	r2, r1
 8002724:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	4013      	ands	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002740:	430a      	orrs	r2, r1
 8002742:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	4013      	ands	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002754:	4013      	ands	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800275e:	430a      	orrs	r2, r1
 8002760:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b006      	add	sp, #24
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	40007000 	.word	0x40007000
 8002774:	fffcffff 	.word	0xfffcffff
 8002778:	fff7ffff 	.word	0xfff7ffff
 800277c:	00001388 	.word	0x00001388
 8002780:	ffcfffff 	.word	0xffcfffff
 8002784:	efffffff 	.word	0xefffffff
 8002788:	fffff3ff 	.word	0xfffff3ff
 800278c:	ffffcfff 	.word	0xffffcfff
 8002790:	fbffffff 	.word	0xfbffffff
 8002794:	fff3ffff 	.word	0xfff3ffff

08002798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e032      	b.n	8002810 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2239      	movs	r2, #57	; 0x39
 80027ae:	5c9b      	ldrb	r3, [r3, r2]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2238      	movs	r2, #56	; 0x38
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 f829 	bl	8002818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2239      	movs	r2, #57	; 0x39
 80027ca:	2102      	movs	r1, #2
 80027cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	0019      	movs	r1, r3
 80027d8:	0010      	movs	r0, r2
 80027da:	f000 f979 	bl	8002ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223e      	movs	r2, #62	; 0x3e
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	223a      	movs	r2, #58	; 0x3a
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223b      	movs	r2, #59	; 0x3b
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223c      	movs	r2, #60	; 0x3c
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223d      	movs	r2, #61	; 0x3d
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2239      	movs	r2, #57	; 0x39
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2239      	movs	r2, #57	; 0x39
 8002834:	5c9b      	ldrb	r3, [r3, r2]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d001      	beq.n	8002840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e036      	b.n	80028ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2239      	movs	r2, #57	; 0x39
 8002844:	2102      	movs	r1, #2
 8002846:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	430a      	orrs	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	05db      	lsls	r3, r3, #23
 8002860:	429a      	cmp	r2, r3
 8002862:	d009      	beq.n	8002878 <HAL_TIM_Base_Start_IT+0x50>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_TIM_Base_Start_IT+0x90>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_TIM_Base_Start_IT+0x50>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <HAL_TIM_Base_Start_IT+0x94>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d111      	bne.n	800289c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2207      	movs	r2, #7
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b06      	cmp	r3, #6
 8002888:	d010      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289a:	e007      	b.n	80028ac <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2101      	movs	r1, #1
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	40010800 	.word	0x40010800
 80028bc:	40011400 	.word	0x40011400

080028c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d124      	bne.n	8002920 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11d      	bne.n	8002920 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2203      	movs	r2, #3
 80028ea:	4252      	negs	r2, r2
 80028ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2203      	movs	r2, #3
 80028fc:	4013      	ands	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 f8cc 	bl	8002aa0 <HAL_TIM_IC_CaptureCallback>
 8002908:	e007      	b.n	800291a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f8bf 	bl	8002a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 f8cb 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2204      	movs	r2, #4
 8002928:	4013      	ands	r3, r2
 800292a:	2b04      	cmp	r3, #4
 800292c:	d125      	bne.n	800297a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2204      	movs	r2, #4
 8002936:	4013      	ands	r3, r2
 8002938:	2b04      	cmp	r3, #4
 800293a:	d11e      	bne.n	800297a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2205      	movs	r2, #5
 8002942:	4252      	negs	r2, r2
 8002944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	23c0      	movs	r3, #192	; 0xc0
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4013      	ands	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 f89f 	bl	8002aa0 <HAL_TIM_IC_CaptureCallback>
 8002962:	e007      	b.n	8002974 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 f892 	bl	8002a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 f89e 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2208      	movs	r2, #8
 8002982:	4013      	ands	r3, r2
 8002984:	2b08      	cmp	r3, #8
 8002986:	d124      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2208      	movs	r2, #8
 8002990:	4013      	ands	r3, r2
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11d      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2209      	movs	r2, #9
 800299c:	4252      	negs	r2, r2
 800299e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2204      	movs	r2, #4
 80029a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2203      	movs	r2, #3
 80029ae:	4013      	ands	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 f873 	bl	8002aa0 <HAL_TIM_IC_CaptureCallback>
 80029ba:	e007      	b.n	80029cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f866 	bl	8002a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f872 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2210      	movs	r2, #16
 80029da:	4013      	ands	r3, r2
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d125      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2210      	movs	r2, #16
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d11e      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2211      	movs	r2, #17
 80029f4:	4252      	negs	r2, r2
 80029f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2208      	movs	r2, #8
 80029fc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	23c0      	movs	r3, #192	; 0xc0
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 f846 	bl	8002aa0 <HAL_TIM_IC_CaptureCallback>
 8002a14:	e007      	b.n	8002a26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 f839 	bl	8002a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f845 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2201      	movs	r2, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10f      	bne.n	8002a5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d108      	bne.n	8002a5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	4252      	negs	r2, r2
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7fe fa57 	bl	8000f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d10f      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2240      	movs	r2, #64	; 0x40
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d108      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2241      	movs	r2, #65	; 0x41
 8002a7c:	4252      	negs	r2, r2
 8002a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f81c 	bl	8002ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	05db      	lsls	r3, r3, #23
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d007      	beq.n	8002afa <TIM_Base_SetConfig+0x2a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <TIM_Base_SetConfig+0x9c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_Base_SetConfig+0x2a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <TIM_Base_SetConfig+0xa0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d108      	bne.n	8002b0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2270      	movs	r2, #112	; 0x70
 8002afe:	4393      	bics	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	05db      	lsls	r3, r3, #23
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d007      	beq.n	8002b26 <TIM_Base_SetConfig+0x56>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <TIM_Base_SetConfig+0x9c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <TIM_Base_SetConfig+0x56>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <TIM_Base_SetConfig+0xa0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d108      	bne.n	8002b38 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <TIM_Base_SetConfig+0xa4>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	001a      	movs	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	615a      	str	r2, [r3, #20]
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40010800 	.word	0x40010800
 8002b70:	40011400 	.word	0x40011400
 8002b74:	fffffcff 	.word	0xfffffcff

08002b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e044      	b.n	8002c14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d107      	bne.n	8002ba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2278      	movs	r2, #120	; 0x78
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7fe fab5 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2224      	movs	r2, #36	; 0x24
 8002ba6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 fd12 	bl	80035e4 <UART_SetConfig>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e024      	b.n	8002c14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 ff89 	bl	8003aec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	490d      	ldr	r1, [pc, #52]	; (8002c1c <HAL_UART_Init+0xa4>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	212a      	movs	r1, #42	; 0x2a
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f001 f821 	bl	8003c54 <UART_CheckIdleState>
 8002c12:	0003      	movs	r3, r0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	ffffb7ff 	.word	0xffffb7ff

08002c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	1dbb      	adds	r3, r7, #6
 8002c2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d000      	beq.n	8002c3a <HAL_UART_Transmit+0x1a>
 8002c38:	e08c      	b.n	8002d54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_UART_Transmit+0x28>
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e084      	b.n	8002d56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	015b      	lsls	r3, r3, #5
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d109      	bne.n	8002c6c <HAL_UART_Transmit+0x4c>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e074      	b.n	8002d56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2284      	movs	r2, #132	; 0x84
 8002c70:	2100      	movs	r1, #0
 8002c72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2221      	movs	r2, #33	; 0x21
 8002c78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe faef 	bl	800125c <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1dba      	adds	r2, r7, #6
 8002c86:	2150      	movs	r1, #80	; 0x50
 8002c88:	8812      	ldrh	r2, [r2, #0]
 8002c8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1dba      	adds	r2, r7, #6
 8002c90:	2152      	movs	r1, #82	; 0x52
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	015b      	lsls	r3, r3, #5
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d108      	bne.n	8002cb4 <HAL_UART_Transmit+0x94>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e003      	b.n	8002cbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cbc:	e02f      	b.n	8002d1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	f001 f86a 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e03b      	b.n	8002d56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	001a      	movs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	05d2      	lsls	r2, r2, #23
 8002cf0:	0dd2      	lsrs	r2, r2, #23
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	e007      	b.n	8002d0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2252      	movs	r2, #82	; 0x52
 8002d10:	5a9b      	ldrh	r3, [r3, r2]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b299      	uxth	r1, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2252      	movs	r2, #82	; 0x52
 8002d1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2252      	movs	r2, #82	; 0x52
 8002d22:	5a9b      	ldrh	r3, [r3, r2]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1c9      	bne.n	8002cbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	0013      	movs	r3, r2
 8002d34:	2200      	movs	r2, #0
 8002d36:	2140      	movs	r1, #64	; 0x40
 8002d38:	f001 f834 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e005      	b.n	8002d56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b008      	add	sp, #32
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	1dbb      	adds	r3, r7, #6
 8002d6e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	589b      	ldr	r3, [r3, r2]
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d000      	beq.n	8002d7c <HAL_UART_Receive+0x1c>
 8002d7a:	e0d0      	b.n	8002f1e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_UART_Receive+0x2a>
 8002d82:	1dbb      	adds	r3, r7, #6
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0c8      	b.n	8002f20 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	015b      	lsls	r3, r3, #5
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d109      	bne.n	8002dae <HAL_UART_Receive+0x4e>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d001      	beq.n	8002dae <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0b8      	b.n	8002f20 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2284      	movs	r2, #132	; 0x84
 8002db2:	2100      	movs	r1, #0
 8002db4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	2122      	movs	r1, #34	; 0x22
 8002dbc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fa4a 	bl	800125c <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1dba      	adds	r2, r7, #6
 8002dd0:	2158      	movs	r1, #88	; 0x58
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1dba      	adds	r2, r7, #6
 8002dda:	215a      	movs	r1, #90	; 0x5a
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	015b      	lsls	r3, r3, #5
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d10d      	bne.n	8002e08 <HAL_UART_Receive+0xa8>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <HAL_UART_Receive+0x9e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	225c      	movs	r2, #92	; 0x5c
 8002df8:	494b      	ldr	r1, [pc, #300]	; (8002f28 <HAL_UART_Receive+0x1c8>)
 8002dfa:	5299      	strh	r1, [r3, r2]
 8002dfc:	e02e      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	225c      	movs	r2, #92	; 0x5c
 8002e02:	21ff      	movs	r1, #255	; 0xff
 8002e04:	5299      	strh	r1, [r3, r2]
 8002e06:	e029      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_UART_Receive+0xcc>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_UART_Receive+0xc2>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	225c      	movs	r2, #92	; 0x5c
 8002e1c:	21ff      	movs	r1, #255	; 0xff
 8002e1e:	5299      	strh	r1, [r3, r2]
 8002e20:	e01c      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	225c      	movs	r2, #92	; 0x5c
 8002e26:	217f      	movs	r1, #127	; 0x7f
 8002e28:	5299      	strh	r1, [r3, r2]
 8002e2a:	e017      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	055b      	lsls	r3, r3, #21
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d10d      	bne.n	8002e54 <HAL_UART_Receive+0xf4>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_UART_Receive+0xea>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	225c      	movs	r2, #92	; 0x5c
 8002e44:	217f      	movs	r1, #127	; 0x7f
 8002e46:	5299      	strh	r1, [r3, r2]
 8002e48:	e008      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	225c      	movs	r2, #92	; 0x5c
 8002e4e:	213f      	movs	r1, #63	; 0x3f
 8002e50:	5299      	strh	r1, [r3, r2]
 8002e52:	e003      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	225c      	movs	r2, #92	; 0x5c
 8002e58:	2100      	movs	r1, #0
 8002e5a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002e5c:	2312      	movs	r3, #18
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	215c      	movs	r1, #92	; 0x5c
 8002e64:	5a52      	ldrh	r2, [r2, r1]
 8002e66:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	015b      	lsls	r3, r3, #5
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d108      	bne.n	8002e86 <HAL_UART_Receive+0x126>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e003      	b.n	8002e8e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e8e:	e03a      	b.n	8002f06 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	0013      	movs	r3, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	f000 ff81 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	2120      	movs	r1, #32
 8002eac:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e036      	b.n	8002f20 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10e      	bne.n	8002ed6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2212      	movs	r2, #18
 8002ec2:	18ba      	adds	r2, r7, r2
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e00e      	b.n	8002ef4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2212      	movs	r2, #18
 8002ee0:	18ba      	adds	r2, r7, r2
 8002ee2:	8812      	ldrh	r2, [r2, #0]
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	225a      	movs	r2, #90	; 0x5a
 8002ef8:	5a9b      	ldrh	r3, [r3, r2]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b299      	uxth	r1, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	225a      	movs	r2, #90	; 0x5a
 8002f04:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	225a      	movs	r2, #90	; 0x5a
 8002f0a:	5a9b      	ldrh	r3, [r3, r2]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1be      	bne.n	8002e90 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	2120      	movs	r1, #32
 8002f18:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b008      	add	sp, #32
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	000001ff 	.word	0x000001ff

08002f2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	1dbb      	adds	r3, r7, #6
 8002f38:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	589b      	ldr	r3, [r3, r2]
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d14a      	bne.n	8002fda <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_UART_Receive_IT+0x26>
 8002f4a:	1dbb      	adds	r3, r7, #6
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e042      	b.n	8002fdc <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	015b      	lsls	r3, r3, #5
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d109      	bne.n	8002f76 <HAL_UART_Receive_IT+0x4a>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d001      	beq.n	8002f76 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e032      	b.n	8002fdc <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_UART_Receive_IT+0xb8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d020      	beq.n	8002fc8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	4013      	ands	r3, r2
 8002f92:	d019      	beq.n	8002fc8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	613b      	str	r3, [r7, #16]
  return(result);
 8002f9a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f383 8810 	msr	PRIMASK, r3
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	04c9      	lsls	r1, r1, #19
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	881a      	ldrh	r2, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f000 ff51 	bl	8003e78 <UART_Start_Receive_IT>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	e000      	b.n	8002fdc <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
  }
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b008      	add	sp, #32
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40004800 	.word	0x40004800

08002fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b0ab      	sub	sp, #172	; 0xac
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	22a4      	movs	r2, #164	; 0xa4
 8002ff8:	18b9      	adds	r1, r7, r2
 8002ffa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	20a0      	movs	r0, #160	; 0xa0
 8003004:	1839      	adds	r1, r7, r0
 8003006:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	219c      	movs	r1, #156	; 0x9c
 8003010:	1879      	adds	r1, r7, r1
 8003012:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003014:	0011      	movs	r1, r2
 8003016:	18bb      	adds	r3, r7, r2
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a99      	ldr	r2, [pc, #612]	; (8003280 <HAL_UART_IRQHandler+0x298>)
 800301c:	4013      	ands	r3, r2
 800301e:	2298      	movs	r2, #152	; 0x98
 8003020:	18bc      	adds	r4, r7, r2
 8003022:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003024:	18bb      	adds	r3, r7, r2
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d114      	bne.n	8003056 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800302c:	187b      	adds	r3, r7, r1
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2220      	movs	r2, #32
 8003032:	4013      	ands	r3, r2
 8003034:	d00f      	beq.n	8003056 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003036:	183b      	adds	r3, r7, r0
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2220      	movs	r2, #32
 800303c:	4013      	ands	r3, r2
 800303e:	d00a      	beq.n	8003056 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003044:	2b00      	cmp	r3, #0
 8003046:	d100      	bne.n	800304a <HAL_UART_IRQHandler+0x62>
 8003048:	e2a0      	b.n	800358c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	0010      	movs	r0, r2
 8003052:	4798      	blx	r3
      }
      return;
 8003054:	e29a      	b.n	800358c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003056:	2398      	movs	r3, #152	; 0x98
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d100      	bne.n	8003062 <HAL_UART_IRQHandler+0x7a>
 8003060:	e114      	b.n	800328c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003062:	239c      	movs	r3, #156	; 0x9c
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	4013      	ands	r3, r2
 800306c:	d106      	bne.n	800307c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800306e:	23a0      	movs	r3, #160	; 0xa0
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a83      	ldr	r2, [pc, #524]	; (8003284 <HAL_UART_IRQHandler+0x29c>)
 8003076:	4013      	ands	r3, r2
 8003078:	d100      	bne.n	800307c <HAL_UART_IRQHandler+0x94>
 800307a:	e107      	b.n	800328c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800307c:	23a4      	movs	r3, #164	; 0xa4
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2201      	movs	r2, #1
 8003084:	4013      	ands	r3, r2
 8003086:	d012      	beq.n	80030ae <HAL_UART_IRQHandler+0xc6>
 8003088:	23a0      	movs	r3, #160	; 0xa0
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4013      	ands	r3, r2
 8003094:	d00b      	beq.n	80030ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2284      	movs	r2, #132	; 0x84
 80030a2:	589b      	ldr	r3, [r3, r2]
 80030a4:	2201      	movs	r2, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2184      	movs	r1, #132	; 0x84
 80030ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ae:	23a4      	movs	r3, #164	; 0xa4
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d011      	beq.n	80030de <HAL_UART_IRQHandler+0xf6>
 80030ba:	239c      	movs	r3, #156	; 0x9c
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	d00b      	beq.n	80030de <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2202      	movs	r2, #2
 80030cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2284      	movs	r2, #132	; 0x84
 80030d2:	589b      	ldr	r3, [r3, r2]
 80030d4:	2204      	movs	r2, #4
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2184      	movs	r1, #132	; 0x84
 80030dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030de:	23a4      	movs	r3, #164	; 0xa4
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2204      	movs	r2, #4
 80030e6:	4013      	ands	r3, r2
 80030e8:	d011      	beq.n	800310e <HAL_UART_IRQHandler+0x126>
 80030ea:	239c      	movs	r3, #156	; 0x9c
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2201      	movs	r2, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2204      	movs	r2, #4
 80030fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2284      	movs	r2, #132	; 0x84
 8003102:	589b      	ldr	r3, [r3, r2]
 8003104:	2202      	movs	r2, #2
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2184      	movs	r1, #132	; 0x84
 800310c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800310e:	23a4      	movs	r3, #164	; 0xa4
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2208      	movs	r2, #8
 8003116:	4013      	ands	r3, r2
 8003118:	d017      	beq.n	800314a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800311a:	23a0      	movs	r3, #160	; 0xa0
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2220      	movs	r2, #32
 8003122:	4013      	ands	r3, r2
 8003124:	d105      	bne.n	8003132 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003126:	239c      	movs	r3, #156	; 0x9c
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2208      	movs	r2, #8
 8003138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2284      	movs	r2, #132	; 0x84
 800313e:	589b      	ldr	r3, [r3, r2]
 8003140:	2208      	movs	r2, #8
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2184      	movs	r1, #132	; 0x84
 8003148:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800314a:	23a4      	movs	r3, #164	; 0xa4
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	4013      	ands	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_UART_IRQHandler+0x198>
 8003158:	23a0      	movs	r3, #160	; 0xa0
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	04db      	lsls	r3, r3, #19
 8003162:	4013      	ands	r3, r2
 8003164:	d00c      	beq.n	8003180 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2284      	movs	r2, #132	; 0x84
 8003174:	589b      	ldr	r3, [r3, r2]
 8003176:	2220      	movs	r2, #32
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2184      	movs	r1, #132	; 0x84
 800317e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2284      	movs	r2, #132	; 0x84
 8003184:	589b      	ldr	r3, [r3, r2]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d100      	bne.n	800318c <HAL_UART_IRQHandler+0x1a4>
 800318a:	e201      	b.n	8003590 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800318c:	23a4      	movs	r3, #164	; 0xa4
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2220      	movs	r2, #32
 8003194:	4013      	ands	r3, r2
 8003196:	d00e      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003198:	23a0      	movs	r3, #160	; 0xa0
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2220      	movs	r2, #32
 80031a0:	4013      	ands	r3, r2
 80031a2:	d008      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	0010      	movs	r0, r2
 80031b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2284      	movs	r2, #132	; 0x84
 80031ba:	589b      	ldr	r3, [r3, r2]
 80031bc:	2194      	movs	r1, #148	; 0x94
 80031be:	187a      	adds	r2, r7, r1
 80031c0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2240      	movs	r2, #64	; 0x40
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d004      	beq.n	80031da <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2228      	movs	r2, #40	; 0x28
 80031d6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031d8:	d047      	beq.n	800326a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 ff15 	bl	800400c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2240      	movs	r2, #64	; 0x40
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d137      	bne.n	8003260 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f0:	f3ef 8310 	mrs	r3, PRIMASK
 80031f4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80031f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f8:	2090      	movs	r0, #144	; 0x90
 80031fa:	183a      	adds	r2, r7, r0
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	2301      	movs	r3, #1
 8003200:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003204:	f383 8810 	msr	PRIMASK, r3
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	438a      	bics	r2, r1
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	183b      	adds	r3, r7, r0
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_UART_IRQHandler+0x2a0>)
 8003236:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	0018      	movs	r0, r3
 800323e:	f7fe f928 	bl	8001492 <HAL_DMA_Abort_IT>
 8003242:	1e03      	subs	r3, r0, #0
 8003244:	d01a      	beq.n	800327c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	0018      	movs	r0, r3
 8003252:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e012      	b.n	800327c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f000 f9af 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325e:	e00d      	b.n	800327c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	0018      	movs	r0, r3
 8003264:	f000 f9aa 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e008      	b.n	800327c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f000 f9a5 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2284      	movs	r2, #132	; 0x84
 8003276:	2100      	movs	r1, #0
 8003278:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800327a:	e189      	b.n	8003590 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	46c0      	nop			; (mov r8, r8)
    return;
 800327e:	e187      	b.n	8003590 <HAL_UART_IRQHandler+0x5a8>
 8003280:	0000080f 	.word	0x0000080f
 8003284:	04000120 	.word	0x04000120
 8003288:	080040d5 	.word	0x080040d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003290:	2b01      	cmp	r3, #1
 8003292:	d000      	beq.n	8003296 <HAL_UART_IRQHandler+0x2ae>
 8003294:	e13b      	b.n	800350e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003296:	23a4      	movs	r3, #164	; 0xa4
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	4013      	ands	r3, r2
 80032a0:	d100      	bne.n	80032a4 <HAL_UART_IRQHandler+0x2bc>
 80032a2:	e134      	b.n	800350e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032a4:	23a0      	movs	r3, #160	; 0xa0
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2210      	movs	r2, #16
 80032ac:	4013      	ands	r3, r2
 80032ae:	d100      	bne.n	80032b2 <HAL_UART_IRQHandler+0x2ca>
 80032b0:	e12d      	b.n	800350e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2210      	movs	r2, #16
 80032b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2240      	movs	r2, #64	; 0x40
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d000      	beq.n	80032ca <HAL_UART_IRQHandler+0x2e2>
 80032c8:	e0a1      	b.n	800340e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	217e      	movs	r1, #126	; 0x7e
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d100      	bne.n	80032e2 <HAL_UART_IRQHandler+0x2fa>
 80032e0:	e158      	b.n	8003594 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2258      	movs	r2, #88	; 0x58
 80032e6:	5a9b      	ldrh	r3, [r3, r2]
 80032e8:	187a      	adds	r2, r7, r1
 80032ea:	8812      	ldrh	r2, [r2, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d300      	bcc.n	80032f2 <HAL_UART_IRQHandler+0x30a>
 80032f0:	e150      	b.n	8003594 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	187a      	adds	r2, r7, r1
 80032f6:	215a      	movs	r1, #90	; 0x5a
 80032f8:	8812      	ldrh	r2, [r2, #0]
 80032fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2220      	movs	r2, #32
 8003306:	4013      	ands	r3, r2
 8003308:	d16f      	bne.n	80033ea <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8310 	mrs	r3, PRIMASK
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003312:	67bb      	str	r3, [r7, #120]	; 0x78
 8003314:	2301      	movs	r3, #1
 8003316:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	499e      	ldr	r1, [pc, #632]	; (80035a4 <HAL_UART_IRQHandler+0x5bc>)
 800332c:	400a      	ands	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333c:	f3ef 8310 	mrs	r3, PRIMASK
 8003340:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003344:	677b      	str	r3, [r7, #116]	; 0x74
 8003346:	2301      	movs	r3, #1
 8003348:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334c:	f383 8810 	msr	PRIMASK, r3
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	438a      	bics	r2, r1
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003368:	f383 8810 	msr	PRIMASK, r3
}
 800336c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336e:	f3ef 8310 	mrs	r3, PRIMASK
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003374:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	673b      	str	r3, [r7, #112]	; 0x70
 8003378:	2301      	movs	r3, #1
 800337a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337e:	f383 8810 	msr	PRIMASK, r3
}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2140      	movs	r1, #64	; 0x40
 8003390:	438a      	bics	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003396:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339a:	f383 8810 	msr	PRIMASK, r3
}
 800339e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	2120      	movs	r1, #32
 80033a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ae:	f3ef 8310 	mrs	r3, PRIMASK
 80033b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80033b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033b8:	2301      	movs	r3, #1
 80033ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2110      	movs	r1, #16
 80033d0:	438a      	bics	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033da:	f383 8810 	msr	PRIMASK, r3
}
 80033de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fe f814 	bl	8001412 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2258      	movs	r2, #88	; 0x58
 80033f4:	5a9a      	ldrh	r2, [r3, r2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	215a      	movs	r1, #90	; 0x5a
 80033fa:	5a5b      	ldrh	r3, [r3, r1]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	b29a      	uxth	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0011      	movs	r1, r2
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f8e0 	bl	80035cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800340c:	e0c2      	b.n	8003594 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2258      	movs	r2, #88	; 0x58
 8003412:	5a99      	ldrh	r1, [r3, r2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	225a      	movs	r2, #90	; 0x5a
 8003418:	5a9b      	ldrh	r3, [r3, r2]
 800341a:	b29a      	uxth	r2, r3
 800341c:	208e      	movs	r0, #142	; 0x8e
 800341e:	183b      	adds	r3, r7, r0
 8003420:	1a8a      	subs	r2, r1, r2
 8003422:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	225a      	movs	r2, #90	; 0x5a
 8003428:	5a9b      	ldrh	r3, [r3, r2]
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d100      	bne.n	8003432 <HAL_UART_IRQHandler+0x44a>
 8003430:	e0b2      	b.n	8003598 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003432:	183b      	adds	r3, r7, r0
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d100      	bne.n	800343c <HAL_UART_IRQHandler+0x454>
 800343a:	e0ad      	b.n	8003598 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343c:	f3ef 8310 	mrs	r3, PRIMASK
 8003440:	60fb      	str	r3, [r7, #12]
  return(result);
 8003442:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003444:	2488      	movs	r4, #136	; 0x88
 8003446:	193a      	adds	r2, r7, r4
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	2301      	movs	r3, #1
 800344c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4951      	ldr	r1, [pc, #324]	; (80035a8 <HAL_UART_IRQHandler+0x5c0>)
 8003462:	400a      	ands	r2, r1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	193b      	adds	r3, r7, r4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
 8003478:	61bb      	str	r3, [r7, #24]
  return(result);
 800347a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347c:	2484      	movs	r4, #132	; 0x84
 800347e:	193a      	adds	r2, r7, r4
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	2301      	movs	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	438a      	bics	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	193b      	adds	r3, r7, r4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	2120      	movs	r1, #32
 80034b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c0:	f3ef 8310 	mrs	r3, PRIMASK
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c8:	2480      	movs	r4, #128	; 0x80
 80034ca:	193a      	adds	r2, r7, r4
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	2301      	movs	r3, #1
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	f383 8810 	msr	PRIMASK, r3
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2110      	movs	r1, #16
 80034e6:	438a      	bics	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034fe:	183b      	adds	r3, r7, r0
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0011      	movs	r1, r2
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f860 	bl	80035cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800350c:	e044      	b.n	8003598 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800350e:	23a4      	movs	r3, #164	; 0xa4
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	035b      	lsls	r3, r3, #13
 8003518:	4013      	ands	r3, r2
 800351a:	d010      	beq.n	800353e <HAL_UART_IRQHandler+0x556>
 800351c:	239c      	movs	r3, #156	; 0x9c
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	03db      	lsls	r3, r3, #15
 8003526:	4013      	ands	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	0352      	lsls	r2, r2, #13
 8003532:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0018      	movs	r0, r3
 8003538:	f000 ffd2 	bl	80044e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800353c:	e02f      	b.n	800359e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800353e:	23a4      	movs	r3, #164	; 0xa4
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	4013      	ands	r3, r2
 8003548:	d00f      	beq.n	800356a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800354a:	23a0      	movs	r3, #160	; 0xa0
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	4013      	ands	r3, r2
 8003554:	d009      	beq.n	800356a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01e      	beq.n	800359c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	0010      	movs	r0, r2
 8003566:	4798      	blx	r3
    }
    return;
 8003568:	e018      	b.n	800359c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800356a:	23a4      	movs	r3, #164	; 0xa4
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	4013      	ands	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_UART_IRQHandler+0x5b6>
 8003576:	23a0      	movs	r3, #160	; 0xa0
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2240      	movs	r2, #64	; 0x40
 800357e:	4013      	ands	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fdbc 	bl	8004102 <UART_EndTransmit_IT>
    return;
 800358a:	e008      	b.n	800359e <HAL_UART_IRQHandler+0x5b6>
      return;
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	e006      	b.n	800359e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	e004      	b.n	800359e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	e002      	b.n	800359e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	e000      	b.n	800359e <HAL_UART_IRQHandler+0x5b6>
    return;
 800359c:	46c0      	nop			; (mov r8, r8)
  }

}
 800359e:	46bd      	mov	sp, r7
 80035a0:	b02b      	add	sp, #172	; 0xac
 80035a2:	bd90      	pop	{r4, r7, pc}
 80035a4:	fffffeff 	.word	0xfffffeff
 80035a8:	fffffedf 	.word	0xfffffedf

080035ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	000a      	movs	r2, r1
 80035d6:	1cbb      	adds	r3, r7, #2
 80035d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b002      	add	sp, #8
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e4:	b5b0      	push	{r4, r5, r7, lr}
 80035e6:	b08e      	sub	sp, #56	; 0x38
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ec:	231a      	movs	r3, #26
 80035ee:	2218      	movs	r2, #24
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	19db      	adds	r3, r3, r7
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	431a      	orrs	r2, r3
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	431a      	orrs	r2, r3
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4313      	orrs	r3, r2
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4ac6      	ldr	r2, [pc, #792]	; (8003930 <UART_SetConfig+0x34c>)
 8003618:	4013      	ands	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4ac1      	ldr	r2, [pc, #772]	; (8003934 <UART_SetConfig+0x350>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4abb      	ldr	r2, [pc, #748]	; (8003938 <UART_SetConfig+0x354>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003654:	4313      	orrs	r3, r2
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4ab7      	ldr	r2, [pc, #732]	; (800393c <UART_SetConfig+0x358>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4ab3      	ldr	r2, [pc, #716]	; (8003940 <UART_SetConfig+0x35c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d131      	bne.n	80036dc <UART_SetConfig+0xf8>
 8003678:	4bb2      	ldr	r3, [pc, #712]	; (8003944 <UART_SetConfig+0x360>)
 800367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367c:	2203      	movs	r2, #3
 800367e:	4013      	ands	r3, r2
 8003680:	2b03      	cmp	r3, #3
 8003682:	d01d      	beq.n	80036c0 <UART_SetConfig+0xdc>
 8003684:	d823      	bhi.n	80036ce <UART_SetConfig+0xea>
 8003686:	2b02      	cmp	r3, #2
 8003688:	d00c      	beq.n	80036a4 <UART_SetConfig+0xc0>
 800368a:	d820      	bhi.n	80036ce <UART_SetConfig+0xea>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <UART_SetConfig+0xb2>
 8003690:	2b01      	cmp	r3, #1
 8003692:	d00e      	beq.n	80036b2 <UART_SetConfig+0xce>
 8003694:	e01b      	b.n	80036ce <UART_SetConfig+0xea>
 8003696:	231b      	movs	r3, #27
 8003698:	2218      	movs	r2, #24
 800369a:	189b      	adds	r3, r3, r2
 800369c:	19db      	adds	r3, r3, r7
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e09c      	b.n	80037de <UART_SetConfig+0x1fa>
 80036a4:	231b      	movs	r3, #27
 80036a6:	2218      	movs	r2, #24
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	19db      	adds	r3, r3, r7
 80036ac:	2202      	movs	r2, #2
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e095      	b.n	80037de <UART_SetConfig+0x1fa>
 80036b2:	231b      	movs	r3, #27
 80036b4:	2218      	movs	r2, #24
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	19db      	adds	r3, r3, r7
 80036ba:	2204      	movs	r2, #4
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e08e      	b.n	80037de <UART_SetConfig+0x1fa>
 80036c0:	231b      	movs	r3, #27
 80036c2:	2218      	movs	r2, #24
 80036c4:	189b      	adds	r3, r3, r2
 80036c6:	19db      	adds	r3, r3, r7
 80036c8:	2208      	movs	r2, #8
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e087      	b.n	80037de <UART_SetConfig+0x1fa>
 80036ce:	231b      	movs	r3, #27
 80036d0:	2218      	movs	r2, #24
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	19db      	adds	r3, r3, r7
 80036d6:	2210      	movs	r2, #16
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e080      	b.n	80037de <UART_SetConfig+0x1fa>
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a99      	ldr	r2, [pc, #612]	; (8003948 <UART_SetConfig+0x364>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d131      	bne.n	800374a <UART_SetConfig+0x166>
 80036e6:	4b97      	ldr	r3, [pc, #604]	; (8003944 <UART_SetConfig+0x360>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	220c      	movs	r2, #12
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d01d      	beq.n	800372e <UART_SetConfig+0x14a>
 80036f2:	d823      	bhi.n	800373c <UART_SetConfig+0x158>
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00c      	beq.n	8003712 <UART_SetConfig+0x12e>
 80036f8:	d820      	bhi.n	800373c <UART_SetConfig+0x158>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <UART_SetConfig+0x120>
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d00e      	beq.n	8003720 <UART_SetConfig+0x13c>
 8003702:	e01b      	b.n	800373c <UART_SetConfig+0x158>
 8003704:	231b      	movs	r3, #27
 8003706:	2218      	movs	r2, #24
 8003708:	189b      	adds	r3, r3, r2
 800370a:	19db      	adds	r3, r3, r7
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	e065      	b.n	80037de <UART_SetConfig+0x1fa>
 8003712:	231b      	movs	r3, #27
 8003714:	2218      	movs	r2, #24
 8003716:	189b      	adds	r3, r3, r2
 8003718:	19db      	adds	r3, r3, r7
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e05e      	b.n	80037de <UART_SetConfig+0x1fa>
 8003720:	231b      	movs	r3, #27
 8003722:	2218      	movs	r2, #24
 8003724:	189b      	adds	r3, r3, r2
 8003726:	19db      	adds	r3, r3, r7
 8003728:	2204      	movs	r2, #4
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e057      	b.n	80037de <UART_SetConfig+0x1fa>
 800372e:	231b      	movs	r3, #27
 8003730:	2218      	movs	r2, #24
 8003732:	189b      	adds	r3, r3, r2
 8003734:	19db      	adds	r3, r3, r7
 8003736:	2208      	movs	r2, #8
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e050      	b.n	80037de <UART_SetConfig+0x1fa>
 800373c:	231b      	movs	r3, #27
 800373e:	2218      	movs	r2, #24
 8003740:	189b      	adds	r3, r3, r2
 8003742:	19db      	adds	r3, r3, r7
 8003744:	2210      	movs	r2, #16
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e049      	b.n	80037de <UART_SetConfig+0x1fa>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7a      	ldr	r2, [pc, #488]	; (8003938 <UART_SetConfig+0x354>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d13e      	bne.n	80037d2 <UART_SetConfig+0x1ee>
 8003754:	4b7b      	ldr	r3, [pc, #492]	; (8003944 <UART_SetConfig+0x360>)
 8003756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003758:	23c0      	movs	r3, #192	; 0xc0
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	4013      	ands	r3, r2
 800375e:	22c0      	movs	r2, #192	; 0xc0
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	4293      	cmp	r3, r2
 8003764:	d027      	beq.n	80037b6 <UART_SetConfig+0x1d2>
 8003766:	22c0      	movs	r2, #192	; 0xc0
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	4293      	cmp	r3, r2
 800376c:	d82a      	bhi.n	80037c4 <UART_SetConfig+0x1e0>
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	0112      	lsls	r2, r2, #4
 8003772:	4293      	cmp	r3, r2
 8003774:	d011      	beq.n	800379a <UART_SetConfig+0x1b6>
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	0112      	lsls	r2, r2, #4
 800377a:	4293      	cmp	r3, r2
 800377c:	d822      	bhi.n	80037c4 <UART_SetConfig+0x1e0>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <UART_SetConfig+0x1a8>
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	00d2      	lsls	r2, r2, #3
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <UART_SetConfig+0x1c4>
 800378a:	e01b      	b.n	80037c4 <UART_SetConfig+0x1e0>
 800378c:	231b      	movs	r3, #27
 800378e:	2218      	movs	r2, #24
 8003790:	189b      	adds	r3, r3, r2
 8003792:	19db      	adds	r3, r3, r7
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e021      	b.n	80037de <UART_SetConfig+0x1fa>
 800379a:	231b      	movs	r3, #27
 800379c:	2218      	movs	r2, #24
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	19db      	adds	r3, r3, r7
 80037a2:	2202      	movs	r2, #2
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e01a      	b.n	80037de <UART_SetConfig+0x1fa>
 80037a8:	231b      	movs	r3, #27
 80037aa:	2218      	movs	r2, #24
 80037ac:	189b      	adds	r3, r3, r2
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	2204      	movs	r2, #4
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e013      	b.n	80037de <UART_SetConfig+0x1fa>
 80037b6:	231b      	movs	r3, #27
 80037b8:	2218      	movs	r2, #24
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	19db      	adds	r3, r3, r7
 80037be:	2208      	movs	r2, #8
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e00c      	b.n	80037de <UART_SetConfig+0x1fa>
 80037c4:	231b      	movs	r3, #27
 80037c6:	2218      	movs	r2, #24
 80037c8:	189b      	adds	r3, r3, r2
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	2210      	movs	r2, #16
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e005      	b.n	80037de <UART_SetConfig+0x1fa>
 80037d2:	231b      	movs	r3, #27
 80037d4:	2218      	movs	r2, #24
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	19db      	adds	r3, r3, r7
 80037da:	2210      	movs	r2, #16
 80037dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a55      	ldr	r2, [pc, #340]	; (8003938 <UART_SetConfig+0x354>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d000      	beq.n	80037ea <UART_SetConfig+0x206>
 80037e8:	e084      	b.n	80038f4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037ea:	231b      	movs	r3, #27
 80037ec:	2218      	movs	r2, #24
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	19db      	adds	r3, r3, r7
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d01d      	beq.n	8003834 <UART_SetConfig+0x250>
 80037f8:	dc20      	bgt.n	800383c <UART_SetConfig+0x258>
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d015      	beq.n	800382a <UART_SetConfig+0x246>
 80037fe:	dc1d      	bgt.n	800383c <UART_SetConfig+0x258>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <UART_SetConfig+0x226>
 8003804:	2b02      	cmp	r3, #2
 8003806:	d005      	beq.n	8003814 <UART_SetConfig+0x230>
 8003808:	e018      	b.n	800383c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800380a:	f7fe fdd9 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 800380e:	0003      	movs	r3, r0
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003812:	e01c      	b.n	800384e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <UART_SetConfig+0x360>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2210      	movs	r2, #16
 800381a:	4013      	ands	r3, r2
 800381c:	d002      	beq.n	8003824 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <UART_SetConfig+0x368>)
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003822:	e014      	b.n	800384e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003824:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <UART_SetConfig+0x36c>)
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003828:	e011      	b.n	800384e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382a:	f7fe fd19 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 800382e:	0003      	movs	r3, r0
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003832:	e00c      	b.n	800384e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800383a:	e008      	b.n	800384e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003840:	231a      	movs	r3, #26
 8003842:	2218      	movs	r2, #24
 8003844:	189b      	adds	r3, r3, r2
 8003846:	19db      	adds	r3, r3, r7
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
        break;
 800384c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d100      	bne.n	8003856 <UART_SetConfig+0x272>
 8003854:	e132      	b.n	8003abc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	0013      	movs	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	189b      	adds	r3, r3, r2
 8003860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003862:	429a      	cmp	r2, r3
 8003864:	d305      	bcc.n	8003872 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800386c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800386e:	429a      	cmp	r2, r3
 8003870:	d906      	bls.n	8003880 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003872:	231a      	movs	r3, #26
 8003874:	2218      	movs	r2, #24
 8003876:	189b      	adds	r3, r3, r2
 8003878:	19db      	adds	r3, r3, r7
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e11d      	b.n	8003abc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	6939      	ldr	r1, [r7, #16]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	000b      	movs	r3, r1
 800388e:	0e1b      	lsrs	r3, r3, #24
 8003890:	0010      	movs	r0, r2
 8003892:	0205      	lsls	r5, r0, #8
 8003894:	431d      	orrs	r5, r3
 8003896:	000b      	movs	r3, r1
 8003898:	021c      	lsls	r4, r3, #8
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68b8      	ldr	r0, [r7, #8]
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	1900      	adds	r0, r0, r4
 80038ac:	4169      	adcs	r1, r5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	2300      	movs	r3, #0
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f7fc fdac 	bl	8000418 <__aeabi_uldivmod>
 80038c0:	0002      	movs	r2, r0
 80038c2:	000b      	movs	r3, r1
 80038c4:	0013      	movs	r3, r2
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ca:	23c0      	movs	r3, #192	; 0xc0
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d309      	bcc.n	80038e6 <UART_SetConfig+0x302>
 80038d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	035b      	lsls	r3, r3, #13
 80038d8:	429a      	cmp	r2, r3
 80038da:	d204      	bcs.n	80038e6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	e0ea      	b.n	8003abc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80038e6:	231a      	movs	r3, #26
 80038e8:	2218      	movs	r2, #24
 80038ea:	189b      	adds	r3, r3, r2
 80038ec:	19db      	adds	r3, r3, r7
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e0e3      	b.n	8003abc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d000      	beq.n	8003902 <UART_SetConfig+0x31e>
 8003900:	e085      	b.n	8003a0e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003902:	231b      	movs	r3, #27
 8003904:	2218      	movs	r2, #24
 8003906:	189b      	adds	r3, r3, r2
 8003908:	19db      	adds	r3, r3, r7
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d837      	bhi.n	8003980 <UART_SetConfig+0x39c>
 8003910:	009a      	lsls	r2, r3, #2
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <UART_SetConfig+0x370>)
 8003914:	18d3      	adds	r3, r2, r3
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391a:	f7fe fd51 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 800391e:	0003      	movs	r3, r0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003922:	e036      	b.n	8003992 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003924:	f7fe fd62 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8003928:	0003      	movs	r3, r0
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800392c:	e031      	b.n	8003992 <UART_SetConfig+0x3ae>
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	efff69f3 	.word	0xefff69f3
 8003934:	ffffcfff 	.word	0xffffcfff
 8003938:	40004800 	.word	0x40004800
 800393c:	fffff4ff 	.word	0xfffff4ff
 8003940:	40013800 	.word	0x40013800
 8003944:	40021000 	.word	0x40021000
 8003948:	40004400 	.word	0x40004400
 800394c:	003d0900 	.word	0x003d0900
 8003950:	00f42400 	.word	0x00f42400
 8003954:	08009d74 	.word	0x08009d74
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003958:	4b60      	ldr	r3, [pc, #384]	; (8003adc <UART_SetConfig+0x4f8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2210      	movs	r2, #16
 800395e:	4013      	ands	r3, r2
 8003960:	d002      	beq.n	8003968 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003962:	4b5f      	ldr	r3, [pc, #380]	; (8003ae0 <UART_SetConfig+0x4fc>)
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003966:	e014      	b.n	8003992 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003968:	4b5e      	ldr	r3, [pc, #376]	; (8003ae4 <UART_SetConfig+0x500>)
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800396c:	e011      	b.n	8003992 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396e:	f7fe fc77 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8003972:	0003      	movs	r3, r0
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003976:	e00c      	b.n	8003992 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800397e:	e008      	b.n	8003992 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003984:	231a      	movs	r3, #26
 8003986:	2218      	movs	r2, #24
 8003988:	189b      	adds	r3, r3, r2
 800398a:	19db      	adds	r3, r3, r7
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
        break;
 8003990:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d100      	bne.n	800399a <UART_SetConfig+0x3b6>
 8003998:	e090      	b.n	8003abc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	005a      	lsls	r2, r3, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	18d2      	adds	r2, r2, r3
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0019      	movs	r1, r3
 80039ac:	0010      	movs	r0, r2
 80039ae:	f7fc fbbd 	bl	800012c <__udivsi3>
 80039b2:	0003      	movs	r3, r0
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d921      	bls.n	8003a00 <UART_SetConfig+0x41c>
 80039bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	025b      	lsls	r3, r3, #9
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d21c      	bcs.n	8003a00 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	200e      	movs	r0, #14
 80039cc:	2418      	movs	r4, #24
 80039ce:	1903      	adds	r3, r0, r4
 80039d0:	19db      	adds	r3, r3, r7
 80039d2:	210f      	movs	r1, #15
 80039d4:	438a      	bics	r2, r1
 80039d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2207      	movs	r2, #7
 80039e0:	4013      	ands	r3, r2
 80039e2:	b299      	uxth	r1, r3
 80039e4:	1903      	adds	r3, r0, r4
 80039e6:	19db      	adds	r3, r3, r7
 80039e8:	1902      	adds	r2, r0, r4
 80039ea:	19d2      	adds	r2, r2, r7
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	1902      	adds	r2, r0, r4
 80039f8:	19d2      	adds	r2, r2, r7
 80039fa:	8812      	ldrh	r2, [r2, #0]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	e05d      	b.n	8003abc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a00:	231a      	movs	r3, #26
 8003a02:	2218      	movs	r2, #24
 8003a04:	189b      	adds	r3, r3, r2
 8003a06:	19db      	adds	r3, r3, r7
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e056      	b.n	8003abc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a0e:	231b      	movs	r3, #27
 8003a10:	2218      	movs	r2, #24
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	19db      	adds	r3, r3, r7
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d822      	bhi.n	8003a62 <UART_SetConfig+0x47e>
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <UART_SetConfig+0x504>)
 8003a20:	18d3      	adds	r3, r2, r3
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a26:	f7fe fccb 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a2e:	e021      	b.n	8003a74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a30:	f7fe fcdc 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8003a34:	0003      	movs	r3, r0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a38:	e01c      	b.n	8003a74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a3a:	4b28      	ldr	r3, [pc, #160]	; (8003adc <UART_SetConfig+0x4f8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	4013      	ands	r3, r2
 8003a42:	d002      	beq.n	8003a4a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a44:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <UART_SetConfig+0x4fc>)
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a48:	e014      	b.n	8003a74 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003a4a:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <UART_SetConfig+0x500>)
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a4e:	e011      	b.n	8003a74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a50:	f7fe fc06 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8003a54:	0003      	movs	r3, r0
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a58:	e00c      	b.n	8003a74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a60:	e008      	b.n	8003a74 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003a66:	231a      	movs	r3, #26
 8003a68:	2218      	movs	r2, #24
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	19db      	adds	r3, r3, r7
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
        break;
 8003a72:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d020      	beq.n	8003abc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	085a      	lsrs	r2, r3, #1
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	18d2      	adds	r2, r2, r3
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	0010      	movs	r0, r2
 8003a8c:	f7fc fb4e 	bl	800012c <__udivsi3>
 8003a90:	0003      	movs	r3, r0
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	d90a      	bls.n	8003ab0 <UART_SetConfig+0x4cc>
 8003a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	025b      	lsls	r3, r3, #9
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d205      	bcs.n	8003ab0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	e005      	b.n	8003abc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab0:	231a      	movs	r3, #26
 8003ab2:	2218      	movs	r2, #24
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	19db      	adds	r3, r3, r7
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ac8:	231a      	movs	r3, #26
 8003aca:	2218      	movs	r2, #24
 8003acc:	189b      	adds	r3, r3, r2
 8003ace:	19db      	adds	r3, r3, r7
 8003ad0:	781b      	ldrb	r3, [r3, #0]
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b00e      	add	sp, #56	; 0x38
 8003ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	003d0900 	.word	0x003d0900
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	08009d98 	.word	0x08009d98

08003aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	2201      	movs	r2, #1
 8003afa:	4013      	ands	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a4a      	ldr	r2, [pc, #296]	; (8003c30 <UART_AdvFeatureConfig+0x144>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	0019      	movs	r1, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d00b      	beq.n	8003b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4a43      	ldr	r2, [pc, #268]	; (8003c34 <UART_AdvFeatureConfig+0x148>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a3b      	ldr	r2, [pc, #236]	; (8003c38 <UART_AdvFeatureConfig+0x14c>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00b      	beq.n	8003b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a34      	ldr	r2, [pc, #208]	; (8003c3c <UART_AdvFeatureConfig+0x150>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	0019      	movs	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2210      	movs	r2, #16
 8003b82:	4013      	ands	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <UART_AdvFeatureConfig+0x154>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4a25      	ldr	r2, [pc, #148]	; (8003c44 <UART_AdvFeatureConfig+0x158>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2240      	movs	r2, #64	; 0x40
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <UART_AdvFeatureConfig+0x15c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	035b      	lsls	r3, r3, #13
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d10b      	bne.n	8003c06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <UART_AdvFeatureConfig+0x160>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a0e      	ldr	r2, [pc, #56]	; (8003c50 <UART_AdvFeatureConfig+0x164>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	fffdffff 	.word	0xfffdffff
 8003c34:	fffeffff 	.word	0xfffeffff
 8003c38:	fffbffff 	.word	0xfffbffff
 8003c3c:	ffff7fff 	.word	0xffff7fff
 8003c40:	ffffefff 	.word	0xffffefff
 8003c44:	ffffdfff 	.word	0xffffdfff
 8003c48:	ffefffff 	.word	0xffefffff
 8003c4c:	ff9fffff 	.word	0xff9fffff
 8003c50:	fff7ffff 	.word	0xfff7ffff

08003c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b092      	sub	sp, #72	; 0x48
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2284      	movs	r2, #132	; 0x84
 8003c60:	2100      	movs	r1, #0
 8003c62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c64:	f7fd fafa 	bl	800125c <HAL_GetTick>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2208      	movs	r2, #8
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d12c      	bne.n	8003cd4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	2280      	movs	r2, #128	; 0x80
 8003c7e:	0391      	lsls	r1, r2, #14
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4a46      	ldr	r2, [pc, #280]	; (8003d9c <UART_CheckIdleState+0x148>)
 8003c84:	9200      	str	r2, [sp, #0]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f000 f88c 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8003c8c:	1e03      	subs	r3, r0, #0
 8003c8e:	d021      	beq.n	8003cd4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c90:	f3ef 8310 	mrs	r3, PRIMASK
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	438a      	bics	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2278      	movs	r2, #120	; 0x78
 8003ccc:	2100      	movs	r1, #0
 8003cce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e05f      	b.n	8003d94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d146      	bne.n	8003d70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce4:	2280      	movs	r2, #128	; 0x80
 8003ce6:	03d1      	lsls	r1, r2, #15
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <UART_CheckIdleState+0x148>)
 8003cec:	9200      	str	r2, [sp, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f000 f858 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8003cf4:	1e03      	subs	r3, r0, #0
 8003cf6:	d03b      	beq.n	8003d70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
 8003d02:	2301      	movs	r3, #1
 8003d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4921      	ldr	r1, [pc, #132]	; (8003da0 <UART_CheckIdleState+0x14c>)
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
 8003d34:	2301      	movs	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	438a      	bics	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	2120      	movs	r1, #32
 8003d62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2278      	movs	r2, #120	; 0x78
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e011      	b.n	8003d94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2278      	movs	r2, #120	; 0x78
 8003d8e:	2100      	movs	r1, #0
 8003d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b010      	add	sp, #64	; 0x40
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	01ffffff 	.word	0x01ffffff
 8003da0:	fffffedf 	.word	0xfffffedf

08003da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	1dfb      	adds	r3, r7, #7
 8003db2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db4:	e04b      	b.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	3301      	adds	r3, #1
 8003dba:	d048      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbc:	f7fd fa4e 	bl	800125c <HAL_GetTick>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e04b      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	4013      	ands	r3, r2
 8003de0:	d035      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2208      	movs	r2, #8
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d111      	bne.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 f906 	bl	800400c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2284      	movs	r2, #132	; 0x84
 8003e04:	2108      	movs	r1, #8
 8003e06:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2278      	movs	r2, #120	; 0x78
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e02c      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	401a      	ands	r2, r3
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d112      	bne.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	0112      	lsls	r2, r2, #4
 8003e30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 f8e9 	bl	800400c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2284      	movs	r2, #132	; 0x84
 8003e3e:	2120      	movs	r1, #32
 8003e40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2278      	movs	r2, #120	; 0x78
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e00f      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	425a      	negs	r2, r3
 8003e5e:	4153      	adcs	r3, r2
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	001a      	movs	r2, r3
 8003e64:	1dfb      	adds	r3, r7, #7
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d0a4      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b090      	sub	sp, #64	; 0x40
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	1dbb      	adds	r3, r7, #6
 8003e84:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1dba      	adds	r2, r7, #6
 8003e90:	2158      	movs	r1, #88	; 0x58
 8003e92:	8812      	ldrh	r2, [r2, #0]
 8003e94:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1dba      	adds	r2, r7, #6
 8003e9a:	215a      	movs	r1, #90	; 0x5a
 8003e9c:	8812      	ldrh	r2, [r2, #0]
 8003e9e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	015b      	lsls	r3, r3, #5
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10d      	bne.n	8003ece <UART_Start_Receive_IT+0x56>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d104      	bne.n	8003ec4 <UART_Start_Receive_IT+0x4c>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	225c      	movs	r2, #92	; 0x5c
 8003ebe:	4950      	ldr	r1, [pc, #320]	; (8004000 <UART_Start_Receive_IT+0x188>)
 8003ec0:	5299      	strh	r1, [r3, r2]
 8003ec2:	e02e      	b.n	8003f22 <UART_Start_Receive_IT+0xaa>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	225c      	movs	r2, #92	; 0x5c
 8003ec8:	21ff      	movs	r1, #255	; 0xff
 8003eca:	5299      	strh	r1, [r3, r2]
 8003ecc:	e029      	b.n	8003f22 <UART_Start_Receive_IT+0xaa>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10d      	bne.n	8003ef2 <UART_Start_Receive_IT+0x7a>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <UART_Start_Receive_IT+0x70>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	225c      	movs	r2, #92	; 0x5c
 8003ee2:	21ff      	movs	r1, #255	; 0xff
 8003ee4:	5299      	strh	r1, [r3, r2]
 8003ee6:	e01c      	b.n	8003f22 <UART_Start_Receive_IT+0xaa>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	225c      	movs	r2, #92	; 0x5c
 8003eec:	217f      	movs	r1, #127	; 0x7f
 8003eee:	5299      	strh	r1, [r3, r2]
 8003ef0:	e017      	b.n	8003f22 <UART_Start_Receive_IT+0xaa>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	055b      	lsls	r3, r3, #21
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10d      	bne.n	8003f1a <UART_Start_Receive_IT+0xa2>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <UART_Start_Receive_IT+0x98>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	225c      	movs	r2, #92	; 0x5c
 8003f0a:	217f      	movs	r1, #127	; 0x7f
 8003f0c:	5299      	strh	r1, [r3, r2]
 8003f0e:	e008      	b.n	8003f22 <UART_Start_Receive_IT+0xaa>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	225c      	movs	r2, #92	; 0x5c
 8003f14:	213f      	movs	r1, #63	; 0x3f
 8003f16:	5299      	strh	r1, [r3, r2]
 8003f18:	e003      	b.n	8003f22 <UART_Start_Receive_IT+0xaa>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	225c      	movs	r2, #92	; 0x5c
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2284      	movs	r2, #132	; 0x84
 8003f26:	2100      	movs	r1, #0
 8003f28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	2122      	movs	r1, #34	; 0x22
 8003f30:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f32:	f3ef 8310 	mrs	r3, PRIMASK
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	f383 8810 	msr	PRIMASK, r3
}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2101      	movs	r1, #1
 8003f54:	430a      	orrs	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	f383 8810 	msr	PRIMASK, r3
}
 8003f62:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	015b      	lsls	r3, r3, #5
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d107      	bne.n	8003f80 <UART_Start_Receive_IT+0x108>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a22      	ldr	r2, [pc, #136]	; (8004004 <UART_Start_Receive_IT+0x18c>)
 8003f7c:	669a      	str	r2, [r3, #104]	; 0x68
 8003f7e:	e002      	b.n	8003f86 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a21      	ldr	r2, [pc, #132]	; (8004008 <UART_Start_Receive_IT+0x190>)
 8003f84:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d019      	beq.n	8003fc2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f92:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f94:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
 8003f98:	2301      	movs	r3, #1
 8003f9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	f383 8810 	msr	PRIMASK, r3
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2190      	movs	r1, #144	; 0x90
 8003fb0:	0049      	lsls	r1, r1, #1
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	f383 8810 	msr	PRIMASK, r3
}
 8003fc0:	e018      	b.n	8003ff4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc6:	613b      	str	r3, [r7, #16]
  return(result);
 8003fc8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fcc:	2301      	movs	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f383 8810 	msr	PRIMASK, r3
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2120      	movs	r1, #32
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f383 8810 	msr	PRIMASK, r3
}
 8003ff2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b010      	add	sp, #64	; 0x40
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	000001ff 	.word	0x000001ff
 8004004:	0800431d 	.word	0x0800431d
 8004008:	08004159 	.word	0x08004159

0800400c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08e      	sub	sp, #56	; 0x38
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004014:	f3ef 8310 	mrs	r3, PRIMASK
 8004018:	617b      	str	r3, [r7, #20]
  return(result);
 800401a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
 800401e:	2301      	movs	r3, #1
 8004020:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f383 8810 	msr	PRIMASK, r3
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4926      	ldr	r1, [pc, #152]	; (80040d0 <UART_EndRxTransfer+0xc4>)
 8004036:	400a      	ands	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f383 8810 	msr	PRIMASK, r3
}
 8004044:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004046:	f3ef 8310 	mrs	r3, PRIMASK
 800404a:	623b      	str	r3, [r7, #32]
  return(result);
 800404c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	633b      	str	r3, [r7, #48]	; 0x30
 8004050:	2301      	movs	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2101      	movs	r1, #1
 8004068:	438a      	bics	r2, r1
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407c:	2b01      	cmp	r3, #1
 800407e:	d118      	bne.n	80040b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004080:	f3ef 8310 	mrs	r3, PRIMASK
 8004084:	60bb      	str	r3, [r7, #8]
  return(result);
 8004086:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408a:	2301      	movs	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2110      	movs	r1, #16
 80040a2:	438a      	bics	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f383 8810 	msr	PRIMASK, r3
}
 80040b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2280      	movs	r2, #128	; 0x80
 80040b6:	2120      	movs	r1, #32
 80040b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b00e      	add	sp, #56	; 0x38
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	fffffedf 	.word	0xfffffedf

080040d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	225a      	movs	r2, #90	; 0x5a
 80040e6:	2100      	movs	r1, #0
 80040e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2252      	movs	r2, #82	; 0x52
 80040ee:	2100      	movs	r1, #0
 80040f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff fa61 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b004      	add	sp, #16
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410a:	f3ef 8310 	mrs	r3, PRIMASK
 800410e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004110:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	2301      	movs	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f383 8810 	msr	PRIMASK, r3
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	438a      	bics	r2, r1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f383 8810 	msr	PRIMASK, r3
}
 800413a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	0018      	movs	r0, r3
 800414c:	f7ff fa2e 	bl	80035ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b006      	add	sp, #24
 8004156:	bd80      	pop	{r7, pc}

08004158 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b094      	sub	sp, #80	; 0x50
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004160:	204e      	movs	r0, #78	; 0x4e
 8004162:	183b      	adds	r3, r7, r0
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	215c      	movs	r1, #92	; 0x5c
 8004168:	5a52      	ldrh	r2, [r2, r1]
 800416a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	589b      	ldr	r3, [r3, r2]
 8004172:	2b22      	cmp	r3, #34	; 0x22
 8004174:	d000      	beq.n	8004178 <UART_RxISR_8BIT+0x20>
 8004176:	e0bf      	b.n	80042f8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800417e:	214c      	movs	r1, #76	; 0x4c
 8004180:	187b      	adds	r3, r7, r1
 8004182:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004184:	187b      	adds	r3, r7, r1
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	183b      	adds	r3, r7, r0
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b2d9      	uxtb	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	400a      	ands	r2, r1
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	225a      	movs	r2, #90	; 0x5a
 80041a8:	5a9b      	ldrh	r3, [r3, r2]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b299      	uxth	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	225a      	movs	r2, #90	; 0x5a
 80041b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	225a      	movs	r2, #90	; 0x5a
 80041ba:	5a9b      	ldrh	r3, [r3, r2]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d000      	beq.n	80041c4 <UART_RxISR_8BIT+0x6c>
 80041c2:	e0a1      	b.n	8004308 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c4:	f3ef 8310 	mrs	r3, PRIMASK
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ce:	2301      	movs	r3, #1
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	f383 8810 	msr	PRIMASK, r3
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	494a      	ldr	r1, [pc, #296]	; (8004310 <UART_RxISR_8BIT+0x1b8>)
 80041e6:	400a      	ands	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	f383 8810 	msr	PRIMASK, r3
}
 80041f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f6:	f3ef 8310 	mrs	r3, PRIMASK
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004200:	2301      	movs	r3, #1
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	f383 8810 	msr	PRIMASK, r3
}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2101      	movs	r1, #1
 8004218:	438a      	bics	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	f383 8810 	msr	PRIMASK, r3
}
 8004226:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2280      	movs	r2, #128	; 0x80
 800422c:	2120      	movs	r1, #32
 800422e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a34      	ldr	r2, [pc, #208]	; (8004314 <UART_RxISR_8BIT+0x1bc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01f      	beq.n	8004286 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	4013      	ands	r3, r2
 8004252:	d018      	beq.n	8004286 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004254:	f3ef 8310 	mrs	r3, PRIMASK
 8004258:	61bb      	str	r3, [r7, #24]
  return(result);
 800425a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800425c:	643b      	str	r3, [r7, #64]	; 0x40
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f383 8810 	msr	PRIMASK, r3
}
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4928      	ldr	r1, [pc, #160]	; (8004318 <UART_RxISR_8BIT+0x1c0>)
 8004276:	400a      	ands	r2, r1
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f383 8810 	msr	PRIMASK, r3
}
 8004284:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	2b01      	cmp	r3, #1
 800428c:	d12f      	bne.n	80042ee <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004294:	f3ef 8310 	mrs	r3, PRIMASK
 8004298:	60fb      	str	r3, [r7, #12]
  return(result);
 800429a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429e:	2301      	movs	r3, #1
 80042a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f383 8810 	msr	PRIMASK, r3
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2110      	movs	r1, #16
 80042b6:	438a      	bics	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	2210      	movs	r2, #16
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d103      	bne.n	80042dc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2210      	movs	r2, #16
 80042da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2258      	movs	r2, #88	; 0x58
 80042e0:	5a9a      	ldrh	r2, [r3, r2]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0011      	movs	r1, r2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7ff f970 	bl	80035cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042ec:	e00c      	b.n	8004308 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7fc fd2d 	bl	8000d50 <HAL_UART_RxCpltCallback>
}
 80042f6:	e007      	b.n	8004308 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2108      	movs	r1, #8
 8004304:	430a      	orrs	r2, r1
 8004306:	619a      	str	r2, [r3, #24]
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b014      	add	sp, #80	; 0x50
 800430e:	bd80      	pop	{r7, pc}
 8004310:	fffffedf 	.word	0xfffffedf
 8004314:	40004800 	.word	0x40004800
 8004318:	fbffffff 	.word	0xfbffffff

0800431c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b094      	sub	sp, #80	; 0x50
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004324:	204e      	movs	r0, #78	; 0x4e
 8004326:	183b      	adds	r3, r7, r0
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	215c      	movs	r1, #92	; 0x5c
 800432c:	5a52      	ldrh	r2, [r2, r1]
 800432e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	589b      	ldr	r3, [r3, r2]
 8004336:	2b22      	cmp	r3, #34	; 0x22
 8004338:	d000      	beq.n	800433c <UART_RxISR_16BIT+0x20>
 800433a:	e0bf      	b.n	80044bc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004342:	214c      	movs	r1, #76	; 0x4c
 8004344:	187b      	adds	r3, r7, r1
 8004346:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800434e:	187b      	adds	r3, r7, r1
 8004350:	183a      	adds	r2, r7, r0
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	8812      	ldrh	r2, [r2, #0]
 8004356:	4013      	ands	r3, r2
 8004358:	b29a      	uxth	r2, r3
 800435a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	225a      	movs	r2, #90	; 0x5a
 800436c:	5a9b      	ldrh	r3, [r3, r2]
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b299      	uxth	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	225a      	movs	r2, #90	; 0x5a
 8004378:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	225a      	movs	r2, #90	; 0x5a
 800437e:	5a9b      	ldrh	r3, [r3, r2]
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d000      	beq.n	8004388 <UART_RxISR_16BIT+0x6c>
 8004386:	e0a1      	b.n	80044cc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004388:	f3ef 8310 	mrs	r3, PRIMASK
 800438c:	623b      	str	r3, [r7, #32]
  return(result);
 800438e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004390:	647b      	str	r3, [r7, #68]	; 0x44
 8004392:	2301      	movs	r3, #1
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	f383 8810 	msr	PRIMASK, r3
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	494a      	ldr	r1, [pc, #296]	; (80044d4 <UART_RxISR_16BIT+0x1b8>)
 80043aa:	400a      	ands	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	f383 8810 	msr	PRIMASK, r3
}
 80043b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ba:	f3ef 8310 	mrs	r3, PRIMASK
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	643b      	str	r3, [r7, #64]	; 0x40
 80043c4:	2301      	movs	r3, #1
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	f383 8810 	msr	PRIMASK, r3
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2101      	movs	r1, #1
 80043dc:	438a      	bics	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	f383 8810 	msr	PRIMASK, r3
}
 80043ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	2120      	movs	r1, #32
 80043f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a34      	ldr	r2, [pc, #208]	; (80044d8 <UART_RxISR_16BIT+0x1bc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01f      	beq.n	800444a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	4013      	ands	r3, r2
 8004416:	d018      	beq.n	800444a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004418:	f3ef 8310 	mrs	r3, PRIMASK
 800441c:	617b      	str	r3, [r7, #20]
  return(result);
 800441e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004422:	2301      	movs	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4928      	ldr	r1, [pc, #160]	; (80044dc <UART_RxISR_16BIT+0x1c0>)
 800443a:	400a      	ands	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444e:	2b01      	cmp	r3, #1
 8004450:	d12f      	bne.n	80044b2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004458:	f3ef 8310 	mrs	r3, PRIMASK
 800445c:	60bb      	str	r3, [r7, #8]
  return(result);
 800445e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
 8004462:	2301      	movs	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2110      	movs	r1, #16
 800447a:	438a      	bics	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f383 8810 	msr	PRIMASK, r3
}
 8004488:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2210      	movs	r2, #16
 8004492:	4013      	ands	r3, r2
 8004494:	2b10      	cmp	r3, #16
 8004496:	d103      	bne.n	80044a0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2210      	movs	r2, #16
 800449e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2258      	movs	r2, #88	; 0x58
 80044a4:	5a9a      	ldrh	r2, [r3, r2]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0011      	movs	r1, r2
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7ff f88e 	bl	80035cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044b0:	e00c      	b.n	80044cc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7fc fc4b 	bl	8000d50 <HAL_UART_RxCpltCallback>
}
 80044ba:	e007      	b.n	80044cc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2108      	movs	r1, #8
 80044c8:	430a      	orrs	r2, r1
 80044ca:	619a      	str	r2, [r3, #24]
}
 80044cc:	46c0      	nop			; (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b014      	add	sp, #80	; 0x50
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	fffffedf 	.word	0xfffffedf
 80044d8:	40004800 	.word	0x40004800
 80044dc:	fbffffff 	.word	0xfbffffff

080044e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004502:	f3ef 8305 	mrs	r3, IPSR
 8004506:	60bb      	str	r3, [r7, #8]
  return(result);
 8004508:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450e:	f3ef 8310 	mrs	r3, PRIMASK
 8004512:	607b      	str	r3, [r7, #4]
  return(result);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <osKernelInitialize+0x2e>
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <osKernelInitialize+0x54>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d103      	bne.n	800452a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8004522:	2306      	movs	r3, #6
 8004524:	425b      	negs	r3, r3
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e00c      	b.n	8004544 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <osKernelInitialize+0x54>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <osKernelInitialize+0x54>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e002      	b.n	8004544 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800453e:	2301      	movs	r3, #1
 8004540:	425b      	negs	r3, r3
 8004542:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	0018      	movs	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	b004      	add	sp, #16
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	2000015c 	.word	0x2000015c

08004554 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800455a:	f3ef 8305 	mrs	r3, IPSR
 800455e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004560:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004566:	f3ef 8310 	mrs	r3, PRIMASK
 800456a:	607b      	str	r3, [r7, #4]
  return(result);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <osKernelStart+0x2e>
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <osKernelStart+0x5c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d103      	bne.n	8004582 <osKernelStart+0x2e>
    stat = osErrorISR;
 800457a:	2306      	movs	r3, #6
 800457c:	425b      	negs	r3, r3
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e010      	b.n	80045a4 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <osKernelStart+0x5c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d109      	bne.n	800459e <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800458a:	f7ff ffb1 	bl	80044f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <osKernelStart+0x5c>)
 8004590:	2202      	movs	r2, #2
 8004592:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004594:	f001 f896 	bl	80056c4 <vTaskStartScheduler>
      stat = osOK;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e002      	b.n	80045a4 <osKernelStart+0x50>
    } else {
      stat = osError;
 800459e:	2301      	movs	r3, #1
 80045a0:	425b      	negs	r3, r3
 80045a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045a4:	68fb      	ldr	r3, [r7, #12]
}
 80045a6:	0018      	movs	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b004      	add	sp, #16
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	2000015c 	.word	0x2000015c

080045b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045b4:	b5b0      	push	{r4, r5, r7, lr}
 80045b6:	b090      	sub	sp, #64	; 0x40
 80045b8:	af04      	add	r7, sp, #16
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c4:	f3ef 8305 	mrs	r3, IPSR
 80045c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80045ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d000      	beq.n	80045d2 <osThreadNew+0x1e>
 80045d0:	e08c      	b.n	80046ec <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d2:	f3ef 8310 	mrs	r3, PRIMASK
 80045d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <osThreadNew+0x34>
 80045de:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <osThreadNew+0x144>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d100      	bne.n	80045e8 <osThreadNew+0x34>
 80045e6:	e081      	b.n	80046ec <osThreadNew+0x138>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d100      	bne.n	80045f0 <osThreadNew+0x3c>
 80045ee:	e07d      	b.n	80046ec <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80045f4:	2318      	movs	r3, #24
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80045fc:	2301      	movs	r3, #1
 80045fe:	425b      	negs	r3, r3
 8004600:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d044      	beq.n	8004692 <osThreadNew+0xde>
      if (attr->name != NULL) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <osThreadNew+0x62>
        name = attr->name;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <osThreadNew+0x86>
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b38      	cmp	r3, #56	; 0x38
 800462e:	d804      	bhi.n	800463a <osThreadNew+0x86>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	d001      	beq.n	800463e <osThreadNew+0x8a>
        return (NULL);
 800463a:	2300      	movs	r3, #0
 800463c:	e057      	b.n	80046ee <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00e      	beq.n	8004674 <osThreadNew+0xc0>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b5b      	cmp	r3, #91	; 0x5b
 800465c:	d90a      	bls.n	8004674 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004662:	2b00      	cmp	r3, #0
 8004664:	d006      	beq.n	8004674 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <osThreadNew+0xc0>
        mem = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	e010      	b.n	8004696 <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10c      	bne.n	8004696 <osThreadNew+0xe2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <osThreadNew+0xe2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <osThreadNew+0xe2>
          mem = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	e001      	b.n	8004696 <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d112      	bne.n	80046c2 <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046a4:	68bd      	ldr	r5, [r7, #8]
 80046a6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80046a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	9201      	str	r2, [sp, #4]
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	002b      	movs	r3, r5
 80046b6:	0022      	movs	r2, r4
 80046b8:	f000 fe81 	bl	80053be <xTaskCreateStatic>
 80046bc:	0003      	movs	r3, r0
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e014      	b.n	80046ec <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d111      	bne.n	80046ec <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68bc      	ldr	r4, [r7, #8]
 80046ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	2314      	movs	r3, #20
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	0023      	movs	r3, r4
 80046de:	f000 feb2 	bl	8005446 <xTaskCreate>
 80046e2:	0003      	movs	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <osThreadNew+0x138>
          hTask = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046ec:	697b      	ldr	r3, [r7, #20]
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b00c      	add	sp, #48	; 0x30
 80046f4:	bdb0      	pop	{r4, r5, r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	2000015c 	.word	0x2000015c

080046fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a06      	ldr	r2, [pc, #24]	; (8004724 <vApplicationGetIdleTaskMemory+0x28>)
 800470c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a05      	ldr	r2, [pc, #20]	; (8004728 <vApplicationGetIdleTaskMemory+0x2c>)
 8004712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2280      	movs	r2, #128	; 0x80
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b004      	add	sp, #16
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20000160 	.word	0x20000160
 8004728:	200001bc 	.word	0x200001bc

0800472c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a06      	ldr	r2, [pc, #24]	; (8004754 <vApplicationGetTimerTaskMemory+0x28>)
 800473c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a05      	ldr	r2, [pc, #20]	; (8004758 <vApplicationGetTimerTaskMemory+0x2c>)
 8004742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2280      	movs	r2, #128	; 0x80
 8004748:	0052      	lsls	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b004      	add	sp, #16
 8004752:	bd80      	pop	{r7, pc}
 8004754:	200003bc 	.word	0x200003bc
 8004758:	20000418 	.word	0x20000418

0800475c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3308      	adds	r3, #8
 8004768:	001a      	movs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	4252      	negs	r2, r2
 8004774:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3308      	adds	r3, #8
 800477a:	001a      	movs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3308      	adds	r3, #8
 8004784:	001a      	movs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b002      	add	sp, #8
 8004796:	bd80      	pop	{r7, pc}

08004798 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}

080047ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	46bd      	mov	sp, r7
 80047ee:	b004      	add	sp, #16
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3301      	adds	r3, #1
 8004806:	d103      	bne.n	8004810 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e00c      	b.n	800482a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3308      	adds	r3, #8
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e002      	b.n	800481e <vListInsert+0x2c>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d2f6      	bcs.n	8004818 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b004      	add	sp, #16
 800485c:	bd80      	pop	{r7, pc}

0800485e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6892      	ldr	r2, [r2, #8]
 8004874:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6852      	ldr	r2, [r2, #4]
 800487e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	d103      	bne.n	8004892 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b004      	add	sp, #16
 80048ac:	bd80      	pop	{r7, pc}

080048ae <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <xQueueGenericReset+0x18>
 80048c2:	b672      	cpsid	i
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80048c6:	f002 f833 	bl	8006930 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	434b      	muls	r3, r1
 80048d8:	18d2      	adds	r2, r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	1e59      	subs	r1, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	434b      	muls	r3, r1
 80048fc:	18d2      	adds	r2, r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2244      	movs	r2, #68	; 0x44
 8004906:	21ff      	movs	r1, #255	; 0xff
 8004908:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2245      	movs	r2, #69	; 0x45
 800490e:	21ff      	movs	r1, #255	; 0xff
 8004910:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10d      	bne.n	8004934 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d013      	beq.n	8004948 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3310      	adds	r3, #16
 8004924:	0018      	movs	r0, r3
 8004926:	f001 f90d 	bl	8005b44 <xTaskRemoveFromEventList>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d00c      	beq.n	8004948 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800492e:	f001 ffef 	bl	8006910 <vPortYield>
 8004932:	e009      	b.n	8004948 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3310      	adds	r3, #16
 8004938:	0018      	movs	r0, r3
 800493a:	f7ff ff0f 	bl	800475c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3324      	adds	r3, #36	; 0x24
 8004942:	0018      	movs	r0, r3
 8004944:	f7ff ff0a 	bl	800475c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004948:	f002 f804 	bl	8006954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800494c:	2301      	movs	r3, #1
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}

08004956 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004956:	b590      	push	{r4, r7, lr}
 8004958:	b089      	sub	sp, #36	; 0x24
 800495a:	af02      	add	r7, sp, #8
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <xQueueGenericCreateStatic+0x18>
 800496a:	b672      	cpsid	i
 800496c:	e7fe      	b.n	800496c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <xQueueGenericCreateStatic+0x22>
 8004974:	b672      	cpsid	i
 8004976:	e7fe      	b.n	8004976 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <xQueueGenericCreateStatic+0x2e>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <xQueueGenericCreateStatic+0x32>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <xQueueGenericCreateStatic+0x34>
 8004988:	2300      	movs	r3, #0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <xQueueGenericCreateStatic+0x3c>
 800498e:	b672      	cpsid	i
 8004990:	e7fe      	b.n	8004990 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <xQueueGenericCreateStatic+0x48>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <xQueueGenericCreateStatic+0x4c>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <xQueueGenericCreateStatic+0x4e>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <xQueueGenericCreateStatic+0x56>
 80049a8:	b672      	cpsid	i
 80049aa:	e7fe      	b.n	80049aa <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049ac:	2350      	movs	r3, #80	; 0x50
 80049ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b50      	cmp	r3, #80	; 0x50
 80049b4:	d001      	beq.n	80049ba <xQueueGenericCreateStatic+0x64>
 80049b6:	b672      	cpsid	i
 80049b8:	e7fe      	b.n	80049b8 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049ba:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00e      	beq.n	80049e4 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2246      	movs	r2, #70	; 0x46
 80049ca:	2101      	movs	r1, #1
 80049cc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049ce:	2328      	movs	r3, #40	; 0x28
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	781c      	ldrb	r4, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	0023      	movs	r3, r4
 80049e0:	f000 f83d 	bl	8004a5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049e4:	697b      	ldr	r3, [r7, #20]
	}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b007      	add	sp, #28
 80049ec:	bd90      	pop	{r4, r7, pc}

080049ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049ee:	b590      	push	{r4, r7, lr}
 80049f0:	b08b      	sub	sp, #44	; 0x2c
 80049f2:	af02      	add	r7, sp, #8
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	1dfb      	adds	r3, r7, #7
 80049fa:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <xQueueGenericCreate+0x18>
 8004a02:	b672      	cpsid	i
 8004a04:	e7fe      	b.n	8004a04 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e003      	b.n	8004a1a <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	4353      	muls	r3, r2
 8004a18:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3350      	adds	r3, #80	; 0x50
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f002 f81e 	bl	8006a60 <pvPortMalloc>
 8004a24:	0003      	movs	r3, r0
 8004a26:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d012      	beq.n	8004a54 <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3350      	adds	r3, #80	; 0x50
 8004a36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2246      	movs	r2, #70	; 0x46
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a40:	1dfb      	adds	r3, r7, #7
 8004a42:	781c      	ldrb	r4, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	0023      	movs	r3, r4
 8004a50:	f000 f805 	bl	8004a5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a54:	69bb      	ldr	r3, [r7, #24]
	}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b009      	add	sp, #36	; 0x24
 8004a5c:	bd90      	pop	{r4, r7, pc}

08004a5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	1cfb      	adds	r3, r7, #3
 8004a6e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e002      	b.n	8004a84 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2101      	movs	r1, #1
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7ff ff0a 	bl	80048ae <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	1cfa      	adds	r2, r7, #3
 8004a9e:	214c      	movs	r1, #76	; 0x4c
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b004      	add	sp, #16
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f000 f820 	bl	8004b18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	1dfb      	adds	r3, r7, #7
 8004aea:	701a      	strb	r2, [r3, #0]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004aec:	2301      	movs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004af4:	1dfb      	adds	r3, r7, #7
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	6939      	ldr	r1, [r7, #16]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7ff ff76 	bl	80049ee <xQueueGenericCreate>
 8004b02:	0003      	movs	r3, r0
 8004b04:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7ff ffcf 	bl	8004aac <prvInitialiseMutex>

		return xNewQueue;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
	}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b006      	add	sp, #24
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xQueueGenericSend+0x20>
 8004b34:	b672      	cpsid	i
 8004b36:	e7fe      	b.n	8004b36 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <xQueueGenericSend+0x2e>
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <xQueueGenericSend+0x32>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <xQueueGenericSend+0x34>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <xQueueGenericSend+0x3c>
 8004b50:	b672      	cpsid	i
 8004b52:	e7fe      	b.n	8004b52 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d103      	bne.n	8004b62 <xQueueGenericSend+0x4a>
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <xQueueGenericSend+0x4e>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <xQueueGenericSend+0x50>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <xQueueGenericSend+0x58>
 8004b6c:	b672      	cpsid	i
 8004b6e:	e7fe      	b.n	8004b6e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b70:	f001 f97a 	bl	8005e68 <xTaskGetSchedulerState>
 8004b74:	1e03      	subs	r3, r0, #0
 8004b76:	d102      	bne.n	8004b7e <xQueueGenericSend+0x66>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <xQueueGenericSend+0x6a>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <xQueueGenericSend+0x6c>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <xQueueGenericSend+0x74>
 8004b88:	b672      	cpsid	i
 8004b8a:	e7fe      	b.n	8004b8a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b8c:	f001 fed0 	bl	8006930 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d302      	bcc.n	8004ba2 <xQueueGenericSend+0x8a>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d11e      	bne.n	8004be0 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fa8f 	bl	80050cc <prvCopyDataToQueue>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	3324      	adds	r3, #36	; 0x24
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f000 ffc0 	bl	8005b44 <xTaskRemoveFromEventList>
 8004bc4:	1e03      	subs	r3, r0, #0
 8004bc6:	d007      	beq.n	8004bd8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bc8:	f001 fea2 	bl	8006910 <vPortYield>
 8004bcc:	e004      	b.n	8004bd8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bd4:	f001 fe9c 	bl	8006910 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bd8:	f001 febc 	bl	8006954 <vPortExitCritical>
				return pdPASS;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e05b      	b.n	8004c98 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004be6:	f001 feb5 	bl	8006954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e054      	b.n	8004c98 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bf4:	2314      	movs	r3, #20
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 ffff 	bl	8005bfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c02:	f001 fea7 	bl	8006954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c06:	f000 fdb1 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c0a:	f001 fe91 	bl	8006930 <vPortEnterCritical>
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	2244      	movs	r2, #68	; 0x44
 8004c12:	5c9b      	ldrb	r3, [r3, r2]
 8004c14:	b25b      	sxtb	r3, r3
 8004c16:	3301      	adds	r3, #1
 8004c18:	d103      	bne.n	8004c22 <xQueueGenericSend+0x10a>
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	2244      	movs	r2, #68	; 0x44
 8004c1e:	2100      	movs	r1, #0
 8004c20:	5499      	strb	r1, [r3, r2]
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	2245      	movs	r2, #69	; 0x45
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	b25b      	sxtb	r3, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	d103      	bne.n	8004c36 <xQueueGenericSend+0x11e>
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2245      	movs	r2, #69	; 0x45
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]
 8004c36:	f001 fe8d 	bl	8006954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c3a:	1d3a      	adds	r2, r7, #4
 8004c3c:	2314      	movs	r3, #20
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 ffee 	bl	8005c24 <xTaskCheckForTimeOut>
 8004c48:	1e03      	subs	r3, r0, #0
 8004c4a:	d11e      	bne.n	8004c8a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 fb41 	bl	80052d6 <prvIsQueueFull>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d011      	beq.n	8004c7c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	3310      	adds	r3, #16
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	0011      	movs	r1, r2
 8004c60:	0018      	movs	r0, r3
 8004c62:	f000 ff2b 	bl	8005abc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 fac0 	bl	80051ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c6e:	f000 fd89 	bl	8005784 <xTaskResumeAll>
 8004c72:	1e03      	subs	r3, r0, #0
 8004c74:	d18a      	bne.n	8004b8c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004c76:	f001 fe4b 	bl	8006910 <vPortYield>
 8004c7a:	e787      	b.n	8004b8c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f000 fab5 	bl	80051ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c84:	f000 fd7e 	bl	8005784 <xTaskResumeAll>
 8004c88:	e780      	b.n	8004b8c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 faae 	bl	80051ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c92:	f000 fd77 	bl	8005784 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b00a      	add	sp, #40	; 0x28
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <xQueueGenericSendFromISR+0x1c>
 8004cb8:	b672      	cpsid	i
 8004cba:	e7fe      	b.n	8004cba <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <xQueueGenericSendFromISR+0x2a>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <xQueueGenericSendFromISR+0x2e>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueGenericSendFromISR+0x30>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <xQueueGenericSendFromISR+0x38>
 8004cd4:	b672      	cpsid	i
 8004cd6:	e7fe      	b.n	8004cd6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d103      	bne.n	8004ce6 <xQueueGenericSendFromISR+0x46>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <xQueueGenericSendFromISR+0x4a>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <xQueueGenericSendFromISR+0x4c>
 8004cea:	2300      	movs	r3, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <xQueueGenericSendFromISR+0x54>
 8004cf0:	b672      	cpsid	i
 8004cf2:	e7fe      	b.n	8004cf2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cf4:	f001 fe46 	bl	8006984 <ulSetInterruptMaskFromISR>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <xQueueGenericSendFromISR+0x6e>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d12e      	bne.n	8004d6c <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d0e:	2413      	movs	r4, #19
 8004d10:	193b      	adds	r3, r7, r4
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	2145      	movs	r1, #69	; 0x45
 8004d16:	5c52      	ldrb	r2, [r2, r1]
 8004d18:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	68b9      	ldr	r1, [r7, #8]
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 f9d3 	bl	80050cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d26:	193b      	adds	r3, r7, r4
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	b25b      	sxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	d111      	bne.n	8004d54 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 ff01 	bl	8005b44 <xTaskRemoveFromEventList>
 8004d42:	1e03      	subs	r3, r0, #0
 8004d44:	d00f      	beq.n	8004d66 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00c      	beq.n	8004d66 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e008      	b.n	8004d66 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d54:	2313      	movs	r3, #19
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	b259      	sxtb	r1, r3
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2245      	movs	r2, #69	; 0x45
 8004d64:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
		{
 8004d6a:	e001      	b.n	8004d70 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f001 fe0c 	bl	8006990 <vClearInterruptMaskFromISR>

	return xReturn;
 8004d78:	69fb      	ldr	r3, [r7, #28]
}
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b009      	add	sp, #36	; 0x24
 8004d80:	bd90      	pop	{r4, r7, pc}

08004d82 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b08a      	sub	sp, #40	; 0x28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <xQueueReceive+0x1e>
 8004d9c:	b672      	cpsid	i
 8004d9e:	e7fe      	b.n	8004d9e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <xQueueReceive+0x2c>
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <xQueueReceive+0x30>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <xQueueReceive+0x32>
 8004db2:	2300      	movs	r3, #0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <xQueueReceive+0x3a>
 8004db8:	b672      	cpsid	i
 8004dba:	e7fe      	b.n	8004dba <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dbc:	f001 f854 	bl	8005e68 <xTaskGetSchedulerState>
 8004dc0:	1e03      	subs	r3, r0, #0
 8004dc2:	d102      	bne.n	8004dca <xQueueReceive+0x48>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <xQueueReceive+0x4c>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <xQueueReceive+0x4e>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <xQueueReceive+0x56>
 8004dd4:	b672      	cpsid	i
 8004dd6:	e7fe      	b.n	8004dd6 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dd8:	f001 fdaa 	bl	8006930 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01a      	beq.n	8004e1e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	0011      	movs	r1, r2
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 f9d7 	bl	80051a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	1e5a      	subs	r2, r3, #1
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	3310      	adds	r3, #16
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f000 fe9b 	bl	8005b44 <xTaskRemoveFromEventList>
 8004e0e:	1e03      	subs	r3, r0, #0
 8004e10:	d001      	beq.n	8004e16 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e12:	f001 fd7d 	bl	8006910 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e16:	f001 fd9d 	bl	8006954 <vPortExitCritical>
				return pdPASS;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e062      	b.n	8004ee4 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d103      	bne.n	8004e2c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e24:	f001 fd96 	bl	8006954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e05b      	b.n	8004ee4 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e32:	2314      	movs	r3, #20
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 fee0 	bl	8005bfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e40:	f001 fd88 	bl	8006954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e44:	f000 fc92 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e48:	f001 fd72 	bl	8006930 <vPortEnterCritical>
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2244      	movs	r2, #68	; 0x44
 8004e50:	5c9b      	ldrb	r3, [r3, r2]
 8004e52:	b25b      	sxtb	r3, r3
 8004e54:	3301      	adds	r3, #1
 8004e56:	d103      	bne.n	8004e60 <xQueueReceive+0xde>
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	2244      	movs	r2, #68	; 0x44
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	2245      	movs	r2, #69	; 0x45
 8004e64:	5c9b      	ldrb	r3, [r3, r2]
 8004e66:	b25b      	sxtb	r3, r3
 8004e68:	3301      	adds	r3, #1
 8004e6a:	d103      	bne.n	8004e74 <xQueueReceive+0xf2>
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	2245      	movs	r2, #69	; 0x45
 8004e70:	2100      	movs	r1, #0
 8004e72:	5499      	strb	r1, [r3, r2]
 8004e74:	f001 fd6e 	bl	8006954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e78:	1d3a      	adds	r2, r7, #4
 8004e7a:	2314      	movs	r3, #20
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	0011      	movs	r1, r2
 8004e80:	0018      	movs	r0, r3
 8004e82:	f000 fecf 	bl	8005c24 <xTaskCheckForTimeOut>
 8004e86:	1e03      	subs	r3, r0, #0
 8004e88:	d11e      	bne.n	8004ec8 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f000 fa0c 	bl	80052aa <prvIsQueueEmpty>
 8004e92:	1e03      	subs	r3, r0, #0
 8004e94:	d011      	beq.n	8004eba <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	0011      	movs	r1, r2
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 fe0c 	bl	8005abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f000 f9a1 	bl	80051ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eac:	f000 fc6a 	bl	8005784 <xTaskResumeAll>
 8004eb0:	1e03      	subs	r3, r0, #0
 8004eb2:	d191      	bne.n	8004dd8 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004eb4:	f001 fd2c 	bl	8006910 <vPortYield>
 8004eb8:	e78e      	b.n	8004dd8 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 f996 	bl	80051ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec2:	f000 fc5f 	bl	8005784 <xTaskResumeAll>
 8004ec6:	e787      	b.n	8004dd8 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f000 f98f 	bl	80051ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ed0:	f000 fc58 	bl	8005784 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f000 f9e7 	bl	80052aa <prvIsQueueEmpty>
 8004edc:	1e03      	subs	r3, r0, #0
 8004ede:	d100      	bne.n	8004ee2 <xQueueReceive+0x160>
 8004ee0:	e77a      	b.n	8004dd8 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ee2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b00a      	add	sp, #40	; 0x28
 8004eea:	bd80      	pop	{r7, pc}

08004eec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueueSemaphoreTake+0x20>
 8004f08:	b672      	cpsid	i
 8004f0a:	e7fe      	b.n	8004f0a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <xQueueSemaphoreTake+0x2c>
 8004f14:	b672      	cpsid	i
 8004f16:	e7fe      	b.n	8004f16 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f18:	f000 ffa6 	bl	8005e68 <xTaskGetSchedulerState>
 8004f1c:	1e03      	subs	r3, r0, #0
 8004f1e:	d102      	bne.n	8004f26 <xQueueSemaphoreTake+0x3a>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <xQueueSemaphoreTake+0x3e>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <xQueueSemaphoreTake+0x40>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <xQueueSemaphoreTake+0x48>
 8004f30:	b672      	cpsid	i
 8004f32:	e7fe      	b.n	8004f32 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f34:	f001 fcfc 	bl	8006930 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01d      	beq.n	8004f80 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1e5a      	subs	r2, r3, #1
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f54:	f001 f8d8 	bl	8006108 <pvTaskIncrementMutexHeldCount>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3310      	adds	r3, #16
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 fdea 	bl	8005b44 <xTaskRemoveFromEventList>
 8004f70:	1e03      	subs	r3, r0, #0
 8004f72:	d001      	beq.n	8004f78 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f74:	f001 fccc 	bl	8006910 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f78:	f001 fcec 	bl	8006954 <vPortExitCritical>
				return pdPASS;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e08b      	b.n	8005098 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <xQueueSemaphoreTake+0xa4>
 8004f8c:	b672      	cpsid	i
 8004f8e:	e7fe      	b.n	8004f8e <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f90:	f001 fce0 	bl	8006954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e07f      	b.n	8005098 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 fe2a 	bl	8005bfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fac:	f001 fcd2 	bl	8006954 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fb0:	f000 fbdc 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fb4:	f001 fcbc 	bl	8006930 <vPortEnterCritical>
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2244      	movs	r2, #68	; 0x44
 8004fbc:	5c9b      	ldrb	r3, [r3, r2]
 8004fbe:	b25b      	sxtb	r3, r3
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	d103      	bne.n	8004fcc <xQueueSemaphoreTake+0xe0>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2244      	movs	r2, #68	; 0x44
 8004fc8:	2100      	movs	r1, #0
 8004fca:	5499      	strb	r1, [r3, r2]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2245      	movs	r2, #69	; 0x45
 8004fd0:	5c9b      	ldrb	r3, [r3, r2]
 8004fd2:	b25b      	sxtb	r3, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	d103      	bne.n	8004fe0 <xQueueSemaphoreTake+0xf4>
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2245      	movs	r2, #69	; 0x45
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]
 8004fe0:	f001 fcb8 	bl	8006954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fe4:	003a      	movs	r2, r7
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	0011      	movs	r1, r2
 8004fec:	0018      	movs	r0, r3
 8004fee:	f000 fe19 	bl	8005c24 <xTaskCheckForTimeOut>
 8004ff2:	1e03      	subs	r3, r0, #0
 8004ff4:	d12e      	bne.n	8005054 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 f956 	bl	80052aa <prvIsQueueEmpty>
 8004ffe:	1e03      	subs	r3, r0, #0
 8005000:	d021      	beq.n	8005046 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800500a:	f001 fc91 	bl	8006930 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	0018      	movs	r0, r3
 8005014:	f000 ff44 	bl	8005ea0 <xTaskPriorityInherit>
 8005018:	0003      	movs	r3, r0
 800501a:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800501c:	f001 fc9a 	bl	8006954 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	3324      	adds	r3, #36	; 0x24
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	0011      	movs	r1, r2
 8005028:	0018      	movs	r0, r3
 800502a:	f000 fd47 	bl	8005abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	0018      	movs	r0, r3
 8005032:	f000 f8dc 	bl	80051ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005036:	f000 fba5 	bl	8005784 <xTaskResumeAll>
 800503a:	1e03      	subs	r3, r0, #0
 800503c:	d000      	beq.n	8005040 <xQueueSemaphoreTake+0x154>
 800503e:	e779      	b.n	8004f34 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8005040:	f001 fc66 	bl	8006910 <vPortYield>
 8005044:	e776      	b.n	8004f34 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	0018      	movs	r0, r3
 800504a:	f000 f8d0 	bl	80051ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504e:	f000 fb99 	bl	8005784 <xTaskResumeAll>
 8005052:	e76f      	b.n	8004f34 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	0018      	movs	r0, r3
 8005058:	f000 f8c9 	bl	80051ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800505c:	f000 fb92 	bl	8005784 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 f921 	bl	80052aa <prvIsQueueEmpty>
 8005068:	1e03      	subs	r3, r0, #0
 800506a:	d100      	bne.n	800506e <xQueueSemaphoreTake+0x182>
 800506c:	e762      	b.n	8004f34 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d010      	beq.n	8005096 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8005074:	f001 fc5c 	bl	8006930 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	0018      	movs	r0, r3
 800507c:	f000 f810 	bl	80050a0 <prvGetDisinheritPriorityAfterTimeout>
 8005080:	0003      	movs	r3, r0
 8005082:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	0011      	movs	r1, r2
 800508c:	0018      	movs	r0, r3
 800508e:	f000 ffcb 	bl	8006028 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005092:	f001 fc5f 	bl	8006954 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005096:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b00a      	add	sp, #40	; 0x28
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2238      	movs	r2, #56	; 0x38
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e001      	b.n	80050c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80050c2:	68fb      	ldr	r3, [r7, #12]
	}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b004      	add	sp, #16
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10e      	bne.n	8005108 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d14e      	bne.n	8005190 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 ff3a 	bl	8005f70 <xTaskPriorityDisinherit>
 80050fc:	0003      	movs	r3, r0
 80050fe:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	609a      	str	r2, [r3, #8]
 8005106:	e043      	b.n	8005190 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d119      	bne.n	8005142 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6858      	ldr	r0, [r3, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	0019      	movs	r1, r3
 800511a:	f004 fc07 	bl	800992c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	18d2      	adds	r2, r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	429a      	cmp	r2, r3
 8005136:	d32b      	bcc.n	8005190 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	605a      	str	r2, [r3, #4]
 8005140:	e026      	b.n	8005190 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68d8      	ldr	r0, [r3, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	0019      	movs	r1, r3
 800514e:	f004 fbed 	bl	800992c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	425b      	negs	r3, r3
 800515c:	18d2      	adds	r2, r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d207      	bcs.n	800517e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	425b      	negs	r3, r3
 8005178:	18d2      	adds	r2, r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d105      	bne.n	8005190 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	3b01      	subs	r3, #1
 800518e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005198:	697b      	ldr	r3, [r7, #20]
}
 800519a:	0018      	movs	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	b006      	add	sp, #24
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d018      	beq.n	80051e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	18d2      	adds	r2, r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d303      	bcc.n	80051d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68d9      	ldr	r1, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f004 fba3 	bl	800992c <memcpy>
	}
}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b002      	add	sp, #8
 80051ec:	bd80      	pop	{r7, pc}

080051ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051f6:	f001 fb9b 	bl	8006930 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051fa:	230f      	movs	r3, #15
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	2145      	movs	r1, #69	; 0x45
 8005202:	5c52      	ldrb	r2, [r2, r1]
 8005204:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005206:	e013      	b.n	8005230 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	d016      	beq.n	800523e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3324      	adds	r3, #36	; 0x24
 8005214:	0018      	movs	r0, r3
 8005216:	f000 fc95 	bl	8005b44 <xTaskRemoveFromEventList>
 800521a:	1e03      	subs	r3, r0, #0
 800521c:	d001      	beq.n	8005222 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800521e:	f000 fd51 	bl	8005cc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005222:	210f      	movs	r1, #15
 8005224:	187b      	adds	r3, r7, r1
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	3b01      	subs	r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	187b      	adds	r3, r7, r1
 800522e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005230:	230f      	movs	r3, #15
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	b25b      	sxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	dce5      	bgt.n	8005208 <prvUnlockQueue+0x1a>
 800523c:	e000      	b.n	8005240 <prvUnlockQueue+0x52>
					break;
 800523e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2245      	movs	r2, #69	; 0x45
 8005244:	21ff      	movs	r1, #255	; 0xff
 8005246:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005248:	f001 fb84 	bl	8006954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800524c:	f001 fb70 	bl	8006930 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005250:	230e      	movs	r3, #14
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	2144      	movs	r1, #68	; 0x44
 8005258:	5c52      	ldrb	r2, [r2, r1]
 800525a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800525c:	e013      	b.n	8005286 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3310      	adds	r3, #16
 800526a:	0018      	movs	r0, r3
 800526c:	f000 fc6a 	bl	8005b44 <xTaskRemoveFromEventList>
 8005270:	1e03      	subs	r3, r0, #0
 8005272:	d001      	beq.n	8005278 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005274:	f000 fd26 	bl	8005cc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005278:	210e      	movs	r1, #14
 800527a:	187b      	adds	r3, r7, r1
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	3b01      	subs	r3, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	187b      	adds	r3, r7, r1
 8005284:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005286:	230e      	movs	r3, #14
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	b25b      	sxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	dce5      	bgt.n	800525e <prvUnlockQueue+0x70>
 8005292:	e000      	b.n	8005296 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005294:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2244      	movs	r2, #68	; 0x44
 800529a:	21ff      	movs	r1, #255	; 0xff
 800529c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800529e:	f001 fb59 	bl	8006954 <vPortExitCritical>
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}

080052aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052b2:	f001 fb3d 	bl	8006930 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e001      	b.n	80052c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052c8:	f001 fb44 	bl	8006954 <vPortExitCritical>

	return xReturn;
 80052cc:	68fb      	ldr	r3, [r7, #12]
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b004      	add	sp, #16
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052de:	f001 fb27 	bl	8006930 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d102      	bne.n	80052f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052ee:	2301      	movs	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e001      	b.n	80052f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052f8:	f001 fb2c 	bl	8006954 <vPortExitCritical>

	return xReturn;
 80052fc:	68fb      	ldr	r3, [r7, #12]
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b004      	add	sp, #16
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e015      	b.n	8005344 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005318:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <vQueueAddToRegistry+0x4c>)
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	00d2      	lsls	r2, r2, #3
 800531e:	58d3      	ldr	r3, [r2, r3]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10c      	bne.n	800533e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <vQueueAddToRegistry+0x4c>)
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	00d2      	lsls	r2, r2, #3
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <vQueueAddToRegistry+0x4c>)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	18d3      	adds	r3, r2, r3
 8005336:	3304      	adds	r3, #4
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800533c:	e006      	b.n	800534c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3301      	adds	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b07      	cmp	r3, #7
 8005348:	d9e6      	bls.n	8005318 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20000818 	.word	0x20000818

08005358 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005368:	f001 fae2 	bl	8006930 <vPortEnterCritical>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2244      	movs	r2, #68	; 0x44
 8005370:	5c9b      	ldrb	r3, [r3, r2]
 8005372:	b25b      	sxtb	r3, r3
 8005374:	3301      	adds	r3, #1
 8005376:	d103      	bne.n	8005380 <vQueueWaitForMessageRestricted+0x28>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2244      	movs	r2, #68	; 0x44
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2245      	movs	r2, #69	; 0x45
 8005384:	5c9b      	ldrb	r3, [r3, r2]
 8005386:	b25b      	sxtb	r3, r3
 8005388:	3301      	adds	r3, #1
 800538a:	d103      	bne.n	8005394 <vQueueWaitForMessageRestricted+0x3c>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2245      	movs	r2, #69	; 0x45
 8005390:	2100      	movs	r1, #0
 8005392:	5499      	strb	r1, [r3, r2]
 8005394:	f001 fade 	bl	8006954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	3324      	adds	r3, #36	; 0x24
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 fba5 	bl	8005af8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff ff1c 	bl	80051ee <prvUnlockQueue>
	}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b006      	add	sp, #24
 80053bc:	bd80      	pop	{r7, pc}

080053be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053be:	b590      	push	{r4, r7, lr}
 80053c0:	b08d      	sub	sp, #52	; 0x34
 80053c2:	af04      	add	r7, sp, #16
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <xTaskCreateStatic+0x18>
 80053d2:	b672      	cpsid	i
 80053d4:	e7fe      	b.n	80053d4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <xTaskCreateStatic+0x22>
 80053dc:	b672      	cpsid	i
 80053de:	e7fe      	b.n	80053de <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053e0:	235c      	movs	r3, #92	; 0x5c
 80053e2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b5c      	cmp	r3, #92	; 0x5c
 80053e8:	d001      	beq.n	80053ee <xTaskCreateStatic+0x30>
 80053ea:	b672      	cpsid	i
 80053ec:	e7fe      	b.n	80053ec <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053ee:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d020      	beq.n	8005438 <xTaskCreateStatic+0x7a>
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01d      	beq.n	8005438 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005404:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	2259      	movs	r2, #89	; 0x59
 800540a:	2102      	movs	r1, #2
 800540c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800540e:	683c      	ldr	r4, [r7, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	2300      	movs	r3, #0
 8005418:	9303      	str	r3, [sp, #12]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	9302      	str	r3, [sp, #8]
 800541e:	2318      	movs	r3, #24
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	0023      	movs	r3, r4
 800542a:	f000 f859 	bl	80054e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	0018      	movs	r0, r3
 8005432:	f000 f8df 	bl	80055f4 <prvAddNewTaskToReadyList>
 8005436:	e001      	b.n	800543c <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800543c:	69bb      	ldr	r3, [r7, #24]
	}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b009      	add	sp, #36	; 0x24
 8005444:	bd90      	pop	{r4, r7, pc}

08005446 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005446:	b590      	push	{r4, r7, lr}
 8005448:	b08d      	sub	sp, #52	; 0x34
 800544a:	af04      	add	r7, sp, #16
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	1dbb      	adds	r3, r7, #6
 8005454:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005456:	1dbb      	adds	r3, r7, #6
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	0018      	movs	r0, r3
 800545e:	f001 faff 	bl	8006a60 <pvPortMalloc>
 8005462:	0003      	movs	r3, r0
 8005464:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d010      	beq.n	800548e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800546c:	205c      	movs	r0, #92	; 0x5c
 800546e:	f001 faf7 	bl	8006a60 <pvPortMalloc>
 8005472:	0003      	movs	r3, r0
 8005474:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
 8005482:	e006      	b.n	8005492 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	0018      	movs	r0, r3
 8005488:	f001 fb90 	bl	8006bac <vPortFree>
 800548c:	e001      	b.n	8005492 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01a      	beq.n	80054ce <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2259      	movs	r2, #89	; 0x59
 800549c:	2100      	movs	r1, #0
 800549e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054a0:	1dbb      	adds	r3, r7, #6
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	683c      	ldr	r4, [r7, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	2300      	movs	r3, #0
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	9302      	str	r3, [sp, #8]
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	0023      	movs	r3, r4
 80054bc:	f000 f810 	bl	80054e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 f896 	bl	80055f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054c8:	2301      	movs	r3, #1
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e002      	b.n	80054d4 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054ce:	2301      	movs	r3, #1
 80054d0:	425b      	negs	r3, r3
 80054d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054d4:	69bb      	ldr	r3, [r7, #24]
	}
 80054d6:	0018      	movs	r0, r3
 80054d8:	46bd      	mov	sp, r7
 80054da:	b009      	add	sp, #36	; 0x24
 80054dc:	bd90      	pop	{r4, r7, pc}
	...

080054e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	001a      	movs	r2, r3
 80054f8:	21a5      	movs	r1, #165	; 0xa5
 80054fa:	f004 f9d9 	bl	80098b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	493a      	ldr	r1, [pc, #232]	; (80055f0 <prvInitialiseNewTask+0x110>)
 8005506:	468c      	mov	ip, r1
 8005508:	4463      	add	r3, ip
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	18d3      	adds	r3, r2, r3
 800550e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2207      	movs	r2, #7
 8005514:	4393      	bics	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2207      	movs	r2, #7
 800551c:	4013      	ands	r3, r2
 800551e:	d001      	beq.n	8005524 <prvInitialiseNewTask+0x44>
 8005520:	b672      	cpsid	i
 8005522:	e7fe      	b.n	8005522 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e013      	b.n	8005558 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	18d3      	adds	r3, r2, r3
 8005536:	7818      	ldrb	r0, [r3, #0]
 8005538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553a:	2134      	movs	r1, #52	; 0x34
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	18d3      	adds	r3, r2, r3
 8005540:	185b      	adds	r3, r3, r1
 8005542:	1c02      	adds	r2, r0, #0
 8005544:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	18d3      	adds	r3, r2, r3
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3301      	adds	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b0f      	cmp	r3, #15
 800555c:	d9e8      	bls.n	8005530 <prvInitialiseNewTask+0x50>
 800555e:	e000      	b.n	8005562 <prvInitialiseNewTask+0x82>
			{
				break;
 8005560:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	2243      	movs	r2, #67	; 0x43
 8005566:	2100      	movs	r1, #0
 8005568:	5499      	strb	r1, [r3, r2]
 800556a:	e003      	b.n	8005574 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2234      	movs	r2, #52	; 0x34
 8005570:	2100      	movs	r1, #0
 8005572:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2b37      	cmp	r3, #55	; 0x37
 8005578:	d901      	bls.n	800557e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800557a:	2337      	movs	r3, #55	; 0x37
 800557c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	6a3a      	ldr	r2, [r7, #32]
 8005588:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	2200      	movs	r2, #0
 800558e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	3304      	adds	r3, #4
 8005594:	0018      	movs	r0, r3
 8005596:	f7ff f8ff 	bl	8004798 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	3318      	adds	r3, #24
 800559e:	0018      	movs	r0, r3
 80055a0:	f7ff f8fa 	bl	8004798 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	2238      	movs	r2, #56	; 0x38
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	2200      	movs	r2, #0
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	2258      	movs	r2, #88	; 0x58
 80055c4:	2100      	movs	r1, #0
 80055c6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	0018      	movs	r0, r3
 80055d0:	f001 f912 	bl	80067f8 <pxPortInitialiseStack>
 80055d4:	0002      	movs	r2, r0
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b006      	add	sp, #24
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	3fffffff 	.word	0x3fffffff

080055f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055fc:	f001 f998 	bl	8006930 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005600:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <prvAddNewTaskToReadyList+0xb8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	4b29      	ldr	r3, [pc, #164]	; (80056ac <prvAddNewTaskToReadyList+0xb8>)
 8005608:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800560a:	4b29      	ldr	r3, [pc, #164]	; (80056b0 <prvAddNewTaskToReadyList+0xbc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005612:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <prvAddNewTaskToReadyList+0xbc>)
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005618:	4b24      	ldr	r3, [pc, #144]	; (80056ac <prvAddNewTaskToReadyList+0xb8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d110      	bne.n	8005642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005620:	f000 fb6a 	bl	8005cf8 <prvInitialiseTaskLists>
 8005624:	e00d      	b.n	8005642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005626:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <prvAddNewTaskToReadyList+0xc0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800562e:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <prvAddNewTaskToReadyList+0xbc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	429a      	cmp	r2, r3
 800563a:	d802      	bhi.n	8005642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800563c:	4b1c      	ldr	r3, [pc, #112]	; (80056b0 <prvAddNewTaskToReadyList+0xbc>)
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005642:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <prvAddNewTaskToReadyList+0xc4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <prvAddNewTaskToReadyList+0xc4>)
 800564a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <prvAddNewTaskToReadyList+0xc4>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	4b18      	ldr	r3, [pc, #96]	; (80056bc <prvAddNewTaskToReadyList+0xc8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d903      	bls.n	8005668 <prvAddNewTaskToReadyList+0x74>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4b15      	ldr	r3, [pc, #84]	; (80056bc <prvAddNewTaskToReadyList+0xc8>)
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	0013      	movs	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	189b      	adds	r3, r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <prvAddNewTaskToReadyList+0xcc>)
 8005676:	189a      	adds	r2, r3, r2
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	0019      	movs	r1, r3
 800567e:	0010      	movs	r0, r2
 8005680:	f7ff f895 	bl	80047ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005684:	f001 f966 	bl	8006954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <prvAddNewTaskToReadyList+0xc0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <prvAddNewTaskToReadyList+0xbc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	429a      	cmp	r2, r3
 800569c:	d201      	bcs.n	80056a2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800569e:	f001 f937 	bl	8006910 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b002      	add	sp, #8
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	20000d2c 	.word	0x20000d2c
 80056b0:	20000858 	.word	0x20000858
 80056b4:	20000d38 	.word	0x20000d38
 80056b8:	20000d48 	.word	0x20000d48
 80056bc:	20000d34 	.word	0x20000d34
 80056c0:	2000085c 	.word	0x2000085c

080056c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056d2:	003a      	movs	r2, r7
 80056d4:	1d39      	adds	r1, r7, #4
 80056d6:	2308      	movs	r3, #8
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	0018      	movs	r0, r3
 80056dc:	f7ff f80e 	bl	80046fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056e0:	683c      	ldr	r4, [r7, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	491b      	ldr	r1, [pc, #108]	; (8005754 <vTaskStartScheduler+0x90>)
 80056e8:	481b      	ldr	r0, [pc, #108]	; (8005758 <vTaskStartScheduler+0x94>)
 80056ea:	9202      	str	r2, [sp, #8]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	2300      	movs	r3, #0
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	2300      	movs	r3, #0
 80056f4:	0022      	movs	r2, r4
 80056f6:	f7ff fe62 	bl	80053be <xTaskCreateStatic>
 80056fa:	0002      	movs	r2, r0
 80056fc:	4b17      	ldr	r3, [pc, #92]	; (800575c <vTaskStartScheduler+0x98>)
 80056fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005700:	4b16      	ldr	r3, [pc, #88]	; (800575c <vTaskStartScheduler+0x98>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005708:	2301      	movs	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e001      	b.n	8005712 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d103      	bne.n	8005720 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8005718:	f000 fd5c 	bl	80061d4 <xTimerCreateTimerTask>
 800571c:	0003      	movs	r3, r0
 800571e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d10d      	bne.n	8005742 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005726:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005728:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <vTaskStartScheduler+0x9c>)
 800572a:	2201      	movs	r2, #1
 800572c:	4252      	negs	r2, r2
 800572e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <vTaskStartScheduler+0xa0>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005736:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <vTaskStartScheduler+0xa4>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800573c:	f001 f8c4 	bl	80068c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005740:	e004      	b.n	800574c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	d101      	bne.n	800574c <vTaskStartScheduler+0x88>
 8005748:	b672      	cpsid	i
 800574a:	e7fe      	b.n	800574a <vTaskStartScheduler+0x86>
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b005      	add	sp, #20
 8005752:	bd90      	pop	{r4, r7, pc}
 8005754:	08009970 	.word	0x08009970
 8005758:	08005cd9 	.word	0x08005cd9
 800575c:	20000d50 	.word	0x20000d50
 8005760:	20000d4c 	.word	0x20000d4c
 8005764:	20000d38 	.word	0x20000d38
 8005768:	20000d30 	.word	0x20000d30

0800576c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005770:	4b03      	ldr	r3, [pc, #12]	; (8005780 <vTaskSuspendAll+0x14>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	4b02      	ldr	r3, [pc, #8]	; (8005780 <vTaskSuspendAll+0x14>)
 8005778:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20000d54 	.word	0x20000d54

08005784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005792:	4b3a      	ldr	r3, [pc, #232]	; (800587c <xTaskResumeAll+0xf8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xTaskResumeAll+0x1a>
 800579a:	b672      	cpsid	i
 800579c:	e7fe      	b.n	800579c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800579e:	f001 f8c7 	bl	8006930 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057a2:	4b36      	ldr	r3, [pc, #216]	; (800587c <xTaskResumeAll+0xf8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1e5a      	subs	r2, r3, #1
 80057a8:	4b34      	ldr	r3, [pc, #208]	; (800587c <xTaskResumeAll+0xf8>)
 80057aa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ac:	4b33      	ldr	r3, [pc, #204]	; (800587c <xTaskResumeAll+0xf8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d15b      	bne.n	800586c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057b4:	4b32      	ldr	r3, [pc, #200]	; (8005880 <xTaskResumeAll+0xfc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d057      	beq.n	800586c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057bc:	e02f      	b.n	800581e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <xTaskResumeAll+0x100>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3318      	adds	r3, #24
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7ff f847 	bl	800485e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3304      	adds	r3, #4
 80057d4:	0018      	movs	r0, r3
 80057d6:	f7ff f842 	bl	800485e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057de:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <xTaskResumeAll+0x104>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d903      	bls.n	80057ee <xTaskResumeAll+0x6a>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ea:	4b27      	ldr	r3, [pc, #156]	; (8005888 <xTaskResumeAll+0x104>)
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	0013      	movs	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4a24      	ldr	r2, [pc, #144]	; (800588c <xTaskResumeAll+0x108>)
 80057fc:	189a      	adds	r2, r3, r2
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3304      	adds	r3, #4
 8005802:	0019      	movs	r1, r3
 8005804:	0010      	movs	r0, r2
 8005806:	f7fe ffd2 	bl	80047ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580e:	4b20      	ldr	r3, [pc, #128]	; (8005890 <xTaskResumeAll+0x10c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	429a      	cmp	r2, r3
 8005816:	d302      	bcc.n	800581e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005818:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <xTaskResumeAll+0x110>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800581e:	4b19      	ldr	r3, [pc, #100]	; (8005884 <xTaskResumeAll+0x100>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1cb      	bne.n	80057be <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800582c:	f000 fafe 	bl	8005e2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <xTaskResumeAll+0x114>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00f      	beq.n	800585c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800583c:	f000 f83c 	bl	80058b8 <xTaskIncrementTick>
 8005840:	1e03      	subs	r3, r0, #0
 8005842:	d002      	beq.n	800584a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <xTaskResumeAll+0x110>)
 8005846:	2201      	movs	r2, #1
 8005848:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3b01      	subs	r3, #1
 800584e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f2      	bne.n	800583c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005856:	4b10      	ldr	r3, [pc, #64]	; (8005898 <xTaskResumeAll+0x114>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800585c:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <xTaskResumeAll+0x110>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005864:	2301      	movs	r3, #1
 8005866:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005868:	f001 f852 	bl	8006910 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800586c:	f001 f872 	bl	8006954 <vPortExitCritical>

	return xAlreadyYielded;
 8005870:	68bb      	ldr	r3, [r7, #8]
}
 8005872:	0018      	movs	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	b004      	add	sp, #16
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	20000d54 	.word	0x20000d54
 8005880:	20000d2c 	.word	0x20000d2c
 8005884:	20000cec 	.word	0x20000cec
 8005888:	20000d34 	.word	0x20000d34
 800588c:	2000085c 	.word	0x2000085c
 8005890:	20000858 	.word	0x20000858
 8005894:	20000d40 	.word	0x20000d40
 8005898:	20000d3c 	.word	0x20000d3c

0800589c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058a2:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <xTaskGetTickCount+0x18>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058a8:	687b      	ldr	r3, [r7, #4]
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b002      	add	sp, #8
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	20000d30 	.word	0x20000d30

080058b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <xTaskIncrementTick+0x134>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d000      	beq.n	80058cc <xTaskIncrementTick+0x14>
 80058ca:	e07e      	b.n	80059ca <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058cc:	4b48      	ldr	r3, [pc, #288]	; (80059f0 <xTaskIncrementTick+0x138>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058d4:	4b46      	ldr	r3, [pc, #280]	; (80059f0 <xTaskIncrementTick+0x138>)
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d117      	bne.n	8005910 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80058e0:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <xTaskIncrementTick+0x13c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <xTaskIncrementTick+0x36>
 80058ea:	b672      	cpsid	i
 80058ec:	e7fe      	b.n	80058ec <xTaskIncrementTick+0x34>
 80058ee:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <xTaskIncrementTick+0x13c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <xTaskIncrementTick+0x140>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4b3e      	ldr	r3, [pc, #248]	; (80059f4 <xTaskIncrementTick+0x13c>)
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <xTaskIncrementTick+0x140>)
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	4b3e      	ldr	r3, [pc, #248]	; (80059fc <xTaskIncrementTick+0x144>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	4b3c      	ldr	r3, [pc, #240]	; (80059fc <xTaskIncrementTick+0x144>)
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	f000 fa8e 	bl	8005e2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005910:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <xTaskIncrementTick+0x148>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	429a      	cmp	r2, r3
 8005918:	d349      	bcc.n	80059ae <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800591a:	4b36      	ldr	r3, [pc, #216]	; (80059f4 <xTaskIncrementTick+0x13c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005924:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <xTaskIncrementTick+0x148>)
 8005926:	2201      	movs	r2, #1
 8005928:	4252      	negs	r2, r2
 800592a:	601a      	str	r2, [r3, #0]
					break;
 800592c:	e03f      	b.n	80059ae <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592e:	4b31      	ldr	r3, [pc, #196]	; (80059f4 <xTaskIncrementTick+0x13c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	429a      	cmp	r2, r3
 8005944:	d203      	bcs.n	800594e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005946:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <xTaskIncrementTick+0x148>)
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800594c:	e02f      	b.n	80059ae <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	3304      	adds	r3, #4
 8005952:	0018      	movs	r0, r3
 8005954:	f7fe ff83 	bl	800485e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3318      	adds	r3, #24
 8005964:	0018      	movs	r0, r3
 8005966:	f7fe ff7a 	bl	800485e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	4b25      	ldr	r3, [pc, #148]	; (8005a04 <xTaskIncrementTick+0x14c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d903      	bls.n	800597e <xTaskIncrementTick+0xc6>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597a:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <xTaskIncrementTick+0x14c>)
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005982:	0013      	movs	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	189b      	adds	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <xTaskIncrementTick+0x150>)
 800598c:	189a      	adds	r2, r3, r2
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	3304      	adds	r3, #4
 8005992:	0019      	movs	r1, r3
 8005994:	0010      	movs	r0, r2
 8005996:	f7fe ff0a 	bl	80047ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599e:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <xTaskIncrementTick+0x154>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d3b8      	bcc.n	800591a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ac:	e7b5      	b.n	800591a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ae:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <xTaskIncrementTick+0x154>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	4914      	ldr	r1, [pc, #80]	; (8005a08 <xTaskIncrementTick+0x150>)
 80059b6:	0013      	movs	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	585b      	ldr	r3, [r3, r1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d907      	bls.n	80059d4 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e004      	b.n	80059d4 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059ca:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <xTaskIncrementTick+0x158>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <xTaskIncrementTick+0x158>)
 80059d2:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059d4:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <xTaskIncrementTick+0x15c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 80059dc:	2301      	movs	r3, #1
 80059de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059e0:	697b      	ldr	r3, [r7, #20]
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b006      	add	sp, #24
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	20000d54 	.word	0x20000d54
 80059f0:	20000d30 	.word	0x20000d30
 80059f4:	20000ce4 	.word	0x20000ce4
 80059f8:	20000ce8 	.word	0x20000ce8
 80059fc:	20000d44 	.word	0x20000d44
 8005a00:	20000d4c 	.word	0x20000d4c
 8005a04:	20000d34 	.word	0x20000d34
 8005a08:	2000085c 	.word	0x2000085c
 8005a0c:	20000858 	.word	0x20000858
 8005a10:	20000d3c 	.word	0x20000d3c
 8005a14:	20000d40 	.word	0x20000d40

08005a18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a1e:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <vTaskSwitchContext+0x90>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <vTaskSwitchContext+0x94>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a2c:	e037      	b.n	8005a9e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <vTaskSwitchContext+0x94>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a34:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <vTaskSwitchContext+0x98>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	e007      	b.n	8005a4c <vTaskSwitchContext+0x34>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <vTaskSwitchContext+0x2e>
 8005a42:	b672      	cpsid	i
 8005a44:	e7fe      	b.n	8005a44 <vTaskSwitchContext+0x2c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	4919      	ldr	r1, [pc, #100]	; (8005ab4 <vTaskSwitchContext+0x9c>)
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	0013      	movs	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	189b      	adds	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	585b      	ldr	r3, [r3, r1]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0ee      	beq.n	8005a3c <vTaskSwitchContext+0x24>
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	0013      	movs	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	189b      	adds	r3, r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4a12      	ldr	r2, [pc, #72]	; (8005ab4 <vTaskSwitchContext+0x9c>)
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	605a      	str	r2, [r3, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d104      	bne.n	8005a8e <vTaskSwitchContext+0x76>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <vTaskSwitchContext+0xa0>)
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <vTaskSwitchContext+0x98>)
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b002      	add	sp, #8
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	20000d54 	.word	0x20000d54
 8005aac:	20000d40 	.word	0x20000d40
 8005ab0:	20000d34 	.word	0x20000d34
 8005ab4:	2000085c 	.word	0x2000085c
 8005ab8:	20000858 	.word	0x20000858

08005abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <vTaskPlaceOnEventList+0x14>
 8005acc:	b672      	cpsid	i
 8005ace:	e7fe      	b.n	8005ace <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ad0:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <vTaskPlaceOnEventList+0x38>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3318      	adds	r3, #24
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	0011      	movs	r1, r2
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7fe fe88 	bl	80047f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 fb20 	bl	800612c <prvAddCurrentTaskToDelayedList>
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b002      	add	sp, #8
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000858 	.word	0x20000858

08005af8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <vTaskPlaceOnEventListRestricted+0x16>
 8005b0a:	b672      	cpsid	i
 8005b0c:	e7fe      	b.n	8005b0c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <vTaskPlaceOnEventListRestricted+0x48>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3318      	adds	r3, #24
 8005b14:	001a      	movs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	0011      	movs	r1, r2
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7fe fe47 	bl	80047ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8005b26:	2301      	movs	r3, #1
 8005b28:	425b      	negs	r3, r3
 8005b2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	0011      	movs	r1, r2
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 fafa 	bl	800612c <prvAddCurrentTaskToDelayedList>
	}
 8005b38:	46c0      	nop			; (mov r8, r8)
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b004      	add	sp, #16
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000858 	.word	0x20000858

08005b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <xTaskRemoveFromEventList+0x1a>
 8005b5a:	b672      	cpsid	i
 8005b5c:	e7fe      	b.n	8005b5c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	3318      	adds	r3, #24
 8005b62:	0018      	movs	r0, r3
 8005b64:	f7fe fe7b 	bl	800485e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b68:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <xTaskRemoveFromEventList+0xa0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d11d      	bne.n	8005bac <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	3304      	adds	r3, #4
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7fe fe72 	bl	800485e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <xTaskRemoveFromEventList+0xa4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d903      	bls.n	8005b8e <xTaskRemoveFromEventList+0x4a>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8a:	4b17      	ldr	r3, [pc, #92]	; (8005be8 <xTaskRemoveFromEventList+0xa4>)
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b92:	0013      	movs	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	189b      	adds	r3, r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4a14      	ldr	r2, [pc, #80]	; (8005bec <xTaskRemoveFromEventList+0xa8>)
 8005b9c:	189a      	adds	r2, r3, r2
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	0010      	movs	r0, r2
 8005ba6:	f7fe fe02 	bl	80047ae <vListInsertEnd>
 8005baa:	e007      	b.n	8005bbc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <xTaskRemoveFromEventList+0xac>)
 8005bb4:	0011      	movs	r1, r2
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7fe fdf9 	bl	80047ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <xTaskRemoveFromEventList+0xb0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d905      	bls.n	8005bd6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <xTaskRemoveFromEventList+0xb4>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e001      	b.n	8005bda <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	0018      	movs	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b004      	add	sp, #16
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000d54 	.word	0x20000d54
 8005be8:	20000d34 	.word	0x20000d34
 8005bec:	2000085c 	.word	0x2000085c
 8005bf0:	20000cec 	.word	0x20000cec
 8005bf4:	20000858 	.word	0x20000858
 8005bf8:	20000d40 	.word	0x20000d40

08005bfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <vTaskInternalSetTimeOutState+0x20>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c0c:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <vTaskInternalSetTimeOutState+0x24>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000d44 	.word	0x20000d44
 8005c20:	20000d30 	.word	0x20000d30

08005c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <xTaskCheckForTimeOut+0x14>
 8005c34:	b672      	cpsid	i
 8005c36:	e7fe      	b.n	8005c36 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <xTaskCheckForTimeOut+0x1e>
 8005c3e:	b672      	cpsid	i
 8005c40:	e7fe      	b.n	8005c40 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005c42:	f000 fe75 	bl	8006930 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c46:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <xTaskCheckForTimeOut+0x98>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	d102      	bne.n	8005c64 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e024      	b.n	8005cae <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <xTaskCheckForTimeOut+0x9c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d007      	beq.n	8005c80 <xTaskCheckForTimeOut+0x5c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	e016      	b.n	8005cae <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d20c      	bcs.n	8005ca4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1ad2      	subs	r2, r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7ff ffaf 	bl	8005bfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e004      	b.n	8005cae <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005caa:	2301      	movs	r3, #1
 8005cac:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005cae:	f000 fe51 	bl	8006954 <vPortExitCritical>

	return xReturn;
 8005cb2:	697b      	ldr	r3, [r7, #20]
}
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b006      	add	sp, #24
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20000d30 	.word	0x20000d30
 8005cc0:	20000d44 	.word	0x20000d44

08005cc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cc8:	4b02      	ldr	r3, [pc, #8]	; (8005cd4 <vTaskMissedYield+0x10>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20000d40 	.word	0x20000d40

08005cd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ce0:	f000 f84e 	bl	8005d80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ce4:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <prvIdleTask+0x1c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d9f9      	bls.n	8005ce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cec:	f000 fe10 	bl	8006910 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005cf0:	e7f6      	b.n	8005ce0 <prvIdleTask+0x8>
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	2000085c 	.word	0x2000085c

08005cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	e00c      	b.n	8005d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	0013      	movs	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	189b      	adds	r3, r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <prvInitialiseTaskLists+0x68>)
 8005d10:	189b      	adds	r3, r3, r2
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7fe fd22 	bl	800475c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b37      	cmp	r3, #55	; 0x37
 8005d22:	d9ef      	bls.n	8005d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <prvInitialiseTaskLists+0x6c>)
 8005d26:	0018      	movs	r0, r3
 8005d28:	f7fe fd18 	bl	800475c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <prvInitialiseTaskLists+0x70>)
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f7fe fd14 	bl	800475c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <prvInitialiseTaskLists+0x74>)
 8005d36:	0018      	movs	r0, r3
 8005d38:	f7fe fd10 	bl	800475c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <prvInitialiseTaskLists+0x78>)
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7fe fd0c 	bl	800475c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <prvInitialiseTaskLists+0x7c>)
 8005d46:	0018      	movs	r0, r3
 8005d48:	f7fe fd08 	bl	800475c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <prvInitialiseTaskLists+0x80>)
 8005d4e:	4a05      	ldr	r2, [pc, #20]	; (8005d64 <prvInitialiseTaskLists+0x6c>)
 8005d50:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <prvInitialiseTaskLists+0x84>)
 8005d54:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <prvInitialiseTaskLists+0x70>)
 8005d56:	601a      	str	r2, [r3, #0]
}
 8005d58:	46c0      	nop			; (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	2000085c 	.word	0x2000085c
 8005d64:	20000cbc 	.word	0x20000cbc
 8005d68:	20000cd0 	.word	0x20000cd0
 8005d6c:	20000cec 	.word	0x20000cec
 8005d70:	20000d00 	.word	0x20000d00
 8005d74:	20000d18 	.word	0x20000d18
 8005d78:	20000ce4 	.word	0x20000ce4
 8005d7c:	20000ce8 	.word	0x20000ce8

08005d80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d86:	e01a      	b.n	8005dbe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005d88:	f000 fdd2 	bl	8006930 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d8c:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <prvCheckTasksWaitingTermination+0x50>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7fe fd60 	bl	800485e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <prvCheckTasksWaitingTermination+0x54>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <prvCheckTasksWaitingTermination+0x54>)
 8005da6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <prvCheckTasksWaitingTermination+0x58>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	1e5a      	subs	r2, r3, #1
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <prvCheckTasksWaitingTermination+0x58>)
 8005db0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005db2:	f000 fdcf 	bl	8006954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	0018      	movs	r0, r3
 8005dba:	f000 f80f 	bl	8005ddc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <prvCheckTasksWaitingTermination+0x58>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e0      	bne.n	8005d88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b002      	add	sp, #8
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20000d00 	.word	0x20000d00
 8005dd4:	20000d2c 	.word	0x20000d2c
 8005dd8:	20000d14 	.word	0x20000d14

08005ddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2259      	movs	r2, #89	; 0x59
 8005de8:	5c9b      	ldrb	r3, [r3, r2]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	0018      	movs	r0, r3
 8005df4:	f000 feda 	bl	8006bac <vPortFree>
				vPortFree( pxTCB );
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fed6 	bl	8006bac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e00:	e010      	b.n	8005e24 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2259      	movs	r2, #89	; 0x59
 8005e06:	5c9b      	ldrb	r3, [r3, r2]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d104      	bne.n	8005e16 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f000 fecc 	bl	8006bac <vPortFree>
	}
 8005e14:	e006      	b.n	8005e24 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2259      	movs	r2, #89	; 0x59
 8005e1a:	5c9b      	ldrb	r3, [r3, r2]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d001      	beq.n	8005e24 <prvDeleteTCB+0x48>
 8005e20:	b672      	cpsid	i
 8005e22:	e7fe      	b.n	8005e22 <prvDeleteTCB+0x46>
	}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e32:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <prvResetNextTaskUnblockTime+0x34>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <prvResetNextTaskUnblockTime+0x38>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	4252      	negs	r2, r2
 8005e42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e44:	e008      	b.n	8005e58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <prvResetNextTaskUnblockTime+0x34>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <prvResetNextTaskUnblockTime+0x38>)
 8005e56:	601a      	str	r2, [r3, #0]
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000ce4 	.word	0x20000ce4
 8005e64:	20000d4c 	.word	0x20000d4c

08005e68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <xTaskGetSchedulerState+0x30>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e76:	2301      	movs	r3, #1
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	e008      	b.n	8005e8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e7c:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <xTaskGetSchedulerState+0x34>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e84:	2302      	movs	r3, #2
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	e001      	b.n	8005e8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e8e:	687b      	ldr	r3, [r7, #4]
	}
 8005e90:	0018      	movs	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b002      	add	sp, #8
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000d38 	.word	0x20000d38
 8005e9c:	20000d54 	.word	0x20000d54

08005ea0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d051      	beq.n	8005f5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eba:	4b2a      	ldr	r3, [pc, #168]	; (8005f64 <xTaskPriorityInherit+0xc4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d241      	bcs.n	8005f48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	db06      	blt.n	8005eda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ecc:	4b25      	ldr	r3, [pc, #148]	; (8005f64 <xTaskPriorityInherit+0xc4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	2238      	movs	r2, #56	; 0x38
 8005ed4:	1ad2      	subs	r2, r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6959      	ldr	r1, [r3, #20]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee2:	0013      	movs	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	189b      	adds	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <xTaskPriorityInherit+0xc8>)
 8005eec:	189b      	adds	r3, r3, r2
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	d122      	bne.n	8005f38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f7fe fcb1 	bl	800485e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <xTaskPriorityInherit+0xc4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <xTaskPriorityInherit+0xcc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d903      	bls.n	8005f1a <xTaskPriorityInherit+0x7a>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f16:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <xTaskPriorityInherit+0xcc>)
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1e:	0013      	movs	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	189b      	adds	r3, r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4a10      	ldr	r2, [pc, #64]	; (8005f68 <xTaskPriorityInherit+0xc8>)
 8005f28:	189a      	adds	r2, r3, r2
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	0019      	movs	r1, r3
 8005f30:	0010      	movs	r0, r2
 8005f32:	f7fe fc3c 	bl	80047ae <vListInsertEnd>
 8005f36:	e004      	b.n	8005f42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <xTaskPriorityInherit+0xc4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	e008      	b.n	8005f5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <xTaskPriorityInherit+0xc4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d201      	bcs.n	8005f5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
	}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b004      	add	sp, #16
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000858 	.word	0x20000858
 8005f68:	2000085c 	.word	0x2000085c
 8005f6c:	20000d34 	.word	0x20000d34

08005f70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d044      	beq.n	8006010 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f86:	4b25      	ldr	r3, [pc, #148]	; (800601c <xTaskPriorityDisinherit+0xac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <xTaskPriorityDisinherit+0x24>
 8005f90:	b672      	cpsid	i
 8005f92:	e7fe      	b.n	8005f92 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <xTaskPriorityDisinherit+0x30>
 8005f9c:	b672      	cpsid	i
 8005f9e:	e7fe      	b.n	8005f9e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d02c      	beq.n	8006010 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d128      	bne.n	8006010 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7fe fc4b 	bl	800485e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2238      	movs	r2, #56	; 0x38
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <xTaskPriorityDisinherit+0xb0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d903      	bls.n	8005ff0 <xTaskPriorityDisinherit+0x80>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <xTaskPriorityDisinherit+0xb0>)
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	0013      	movs	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	189b      	adds	r3, r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4a09      	ldr	r2, [pc, #36]	; (8006024 <xTaskPriorityDisinherit+0xb4>)
 8005ffe:	189a      	adds	r2, r3, r2
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3304      	adds	r3, #4
 8006004:	0019      	movs	r1, r3
 8006006:	0010      	movs	r0, r2
 8006008:	f7fe fbd1 	bl	80047ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006010:	68fb      	ldr	r3, [r7, #12]
	}
 8006012:	0018      	movs	r0, r3
 8006014:	46bd      	mov	sp, r7
 8006016:	b004      	add	sp, #16
 8006018:	bd80      	pop	{r7, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	20000858 	.word	0x20000858
 8006020:	20000d34 	.word	0x20000d34
 8006024:	2000085c 	.word	0x2000085c

08006028 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006036:	2301      	movs	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d058      	beq.n	80060f2 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <vTaskPriorityDisinheritAfterTimeout+0x24>
 8006048:	b672      	cpsid	i
 800604a:	e7fe      	b.n	800604a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d902      	bls.n	800605c <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	e002      	b.n	8006062 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006060:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	429a      	cmp	r2, r3
 800606a:	d042      	beq.n	80060f2 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	429a      	cmp	r2, r3
 8006074:	d13d      	bne.n	80060f2 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006076:	4b21      	ldr	r3, [pc, #132]	; (80060fc <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	429a      	cmp	r2, r3
 800607e:	d101      	bne.n	8006084 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8006080:	b672      	cpsid	i
 8006082:	e7fe      	b.n	8006082 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	db04      	blt.n	80060a2 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2238      	movs	r2, #56	; 0x38
 800609c:	1ad2      	subs	r2, r2, r3
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6959      	ldr	r1, [r3, #20]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	0013      	movs	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	189b      	adds	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4a13      	ldr	r2, [pc, #76]	; (8006100 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	4299      	cmp	r1, r3
 80060b6:	d11c      	bne.n	80060f2 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	3304      	adds	r3, #4
 80060bc:	0018      	movs	r0, r3
 80060be:	f7fe fbce 	bl	800485e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d903      	bls.n	80060d6 <vTaskPriorityDisinheritAfterTimeout+0xae>
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060da:	0013      	movs	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	189b      	adds	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4a07      	ldr	r2, [pc, #28]	; (8006100 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80060e4:	189a      	adds	r2, r3, r2
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	3304      	adds	r3, #4
 80060ea:	0019      	movs	r1, r3
 80060ec:	0010      	movs	r0, r2
 80060ee:	f7fe fb5e 	bl	80047ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b006      	add	sp, #24
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	20000858 	.word	0x20000858
 8006100:	2000085c 	.word	0x2000085c
 8006104:	20000d34 	.word	0x20000d34

08006108 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <pvTaskIncrementMutexHeldCount+0x20>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006114:	4b04      	ldr	r3, [pc, #16]	; (8006128 <pvTaskIncrementMutexHeldCount+0x20>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800611a:	3201      	adds	r2, #1
 800611c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800611e:	4b02      	ldr	r3, [pc, #8]	; (8006128 <pvTaskIncrementMutexHeldCount+0x20>)
 8006120:	681b      	ldr	r3, [r3, #0]
	}
 8006122:	0018      	movs	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000858 	.word	0x20000858

0800612c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006136:	4b21      	ldr	r3, [pc, #132]	; (80061bc <prvAddCurrentTaskToDelayedList+0x90>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800613c:	4b20      	ldr	r3, [pc, #128]	; (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3304      	adds	r3, #4
 8006142:	0018      	movs	r0, r3
 8006144:	f7fe fb8b 	bl	800485e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3301      	adds	r3, #1
 800614c:	d10b      	bne.n	8006166 <prvAddCurrentTaskToDelayedList+0x3a>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006154:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	1d1a      	adds	r2, r3, #4
 800615a:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800615c:	0011      	movs	r1, r2
 800615e:	0018      	movs	r0, r3
 8006160:	f7fe fb25 	bl	80047ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006164:	e026      	b.n	80061b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	18d3      	adds	r3, r2, r3
 800616c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800616e:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	429a      	cmp	r2, r3
 800617c:	d209      	bcs.n	8006192 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617e:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3304      	adds	r3, #4
 8006188:	0019      	movs	r1, r3
 800618a:	0010      	movs	r0, r2
 800618c:	f7fe fb31 	bl	80047f2 <vListInsert>
}
 8006190:	e010      	b.n	80061b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006192:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3304      	adds	r3, #4
 800619c:	0019      	movs	r1, r3
 800619e:	0010      	movs	r0, r2
 80061a0:	f7fe fb27 	bl	80047f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d202      	bcs.n	80061b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061ae:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	601a      	str	r2, [r3, #0]
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b004      	add	sp, #16
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000d30 	.word	0x20000d30
 80061c0:	20000858 	.word	0x20000858
 80061c4:	20000d18 	.word	0x20000d18
 80061c8:	20000ce8 	.word	0x20000ce8
 80061cc:	20000ce4 	.word	0x20000ce4
 80061d0:	20000d4c 	.word	0x20000d4c

080061d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b089      	sub	sp, #36	; 0x24
 80061d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061de:	f000 fac9 	bl	8006774 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <xTimerCreateTimerTask+0x6c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d020      	beq.n	800622c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061f2:	003a      	movs	r2, r7
 80061f4:	1d39      	adds	r1, r7, #4
 80061f6:	2308      	movs	r3, #8
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	0018      	movs	r0, r3
 80061fc:	f7fe fa96 	bl	800472c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006200:	683c      	ldr	r4, [r7, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	490f      	ldr	r1, [pc, #60]	; (8006244 <xTimerCreateTimerTask+0x70>)
 8006208:	480f      	ldr	r0, [pc, #60]	; (8006248 <xTimerCreateTimerTask+0x74>)
 800620a:	9202      	str	r2, [sp, #8]
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	2302      	movs	r3, #2
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	2300      	movs	r3, #0
 8006214:	0022      	movs	r2, r4
 8006216:	f7ff f8d2 	bl	80053be <xTaskCreateStatic>
 800621a:	0002      	movs	r2, r0
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <xTimerCreateTimerTask+0x78>)
 800621e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <xTimerCreateTimerTask+0x78>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006228:	2301      	movs	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <xTimerCreateTimerTask+0x62>
 8006232:	b672      	cpsid	i
 8006234:	e7fe      	b.n	8006234 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006236:	68fb      	ldr	r3, [r7, #12]
}
 8006238:	0018      	movs	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	b005      	add	sp, #20
 800623e:	bd90      	pop	{r4, r7, pc}
 8006240:	20000d88 	.word	0x20000d88
 8006244:	08009978 	.word	0x08009978
 8006248:	0800636d 	.word	0x0800636d
 800624c:	20000d8c 	.word	0x20000d8c

08006250 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b08b      	sub	sp, #44	; 0x2c
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800625e:	2300      	movs	r3, #0
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <xTimerGenericCommand+0x1c>
 8006268:	b672      	cpsid	i
 800626a:	e7fe      	b.n	800626a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800626c:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <xTimerGenericCommand+0x90>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d030      	beq.n	80062d6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006274:	2414      	movs	r4, #20
 8006276:	193b      	adds	r3, r7, r4
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800627c:	193b      	adds	r3, r7, r4
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006282:	193b      	adds	r3, r7, r4
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b05      	cmp	r3, #5
 800628c:	dc19      	bgt.n	80062c2 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800628e:	f7ff fdeb 	bl	8005e68 <xTaskGetSchedulerState>
 8006292:	0003      	movs	r3, r0
 8006294:	2b02      	cmp	r3, #2
 8006296:	d109      	bne.n	80062ac <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <xTimerGenericCommand+0x90>)
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800629e:	1939      	adds	r1, r7, r4
 80062a0:	2300      	movs	r3, #0
 80062a2:	f7fe fc39 	bl	8004b18 <xQueueGenericSend>
 80062a6:	0003      	movs	r3, r0
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
 80062aa:	e014      	b.n	80062d6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <xTimerGenericCommand+0x90>)
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	2314      	movs	r3, #20
 80062b2:	18f9      	adds	r1, r7, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	2200      	movs	r2, #0
 80062b8:	f7fe fc2e 	bl	8004b18 <xQueueGenericSend>
 80062bc:	0003      	movs	r3, r0
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
 80062c0:	e009      	b.n	80062d6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <xTimerGenericCommand+0x90>)
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	2314      	movs	r3, #20
 80062ca:	18f9      	adds	r1, r7, r3
 80062cc:	2300      	movs	r3, #0
 80062ce:	f7fe fce7 	bl	8004ca0 <xQueueGenericSendFromISR>
 80062d2:	0003      	movs	r3, r0
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062d8:	0018      	movs	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	b00b      	add	sp, #44	; 0x2c
 80062de:	bd90      	pop	{r4, r7, pc}
 80062e0:	20000d88 	.word	0x20000d88

080062e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ee:	4b1e      	ldr	r3, [pc, #120]	; (8006368 <prvProcessExpiredTimer+0x84>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3304      	adds	r3, #4
 80062fc:	0018      	movs	r0, r3
 80062fe:	f7fe faae 	bl	800485e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2228      	movs	r2, #40	; 0x28
 8006306:	5c9b      	ldrb	r3, [r3, r2]
 8006308:	001a      	movs	r2, r3
 800630a:	2304      	movs	r3, #4
 800630c:	4013      	ands	r3, r2
 800630e:	d019      	beq.n	8006344 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	18d1      	adds	r1, r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f8c3 	bl	80064a8 <prvInsertTimerInActiveList>
 8006322:	1e03      	subs	r3, r0, #0
 8006324:	d017      	beq.n	8006356 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	2300      	movs	r3, #0
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	2300      	movs	r3, #0
 8006330:	2100      	movs	r1, #0
 8006332:	f7ff ff8d 	bl	8006250 <xTimerGenericCommand>
 8006336:	0003      	movs	r3, r0
 8006338:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <prvProcessExpiredTimer+0x72>
 8006340:	b672      	cpsid	i
 8006342:	e7fe      	b.n	8006342 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2228      	movs	r2, #40	; 0x28
 8006348:	5c9b      	ldrb	r3, [r3, r2]
 800634a:	2201      	movs	r2, #1
 800634c:	4393      	bics	r3, r2
 800634e:	b2d9      	uxtb	r1, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2228      	movs	r2, #40	; 0x28
 8006354:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	0010      	movs	r0, r2
 800635e:	4798      	blx	r3
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b004      	add	sp, #16
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000d80 	.word	0x20000d80

0800636c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006374:	2308      	movs	r3, #8
 8006376:	18fb      	adds	r3, r7, r3
 8006378:	0018      	movs	r0, r3
 800637a:	f000 f853 	bl	8006424 <prvGetNextExpireTime>
 800637e:	0003      	movs	r3, r0
 8006380:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	0011      	movs	r1, r2
 8006388:	0018      	movs	r0, r3
 800638a:	f000 f803 	bl	8006394 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800638e:	f000 f8cd 	bl	800652c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006392:	e7ef      	b.n	8006374 <prvTimerTask+0x8>

08006394 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800639e:	f7ff f9e5 	bl	800576c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063a2:	2308      	movs	r3, #8
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	0018      	movs	r0, r3
 80063a8:	f000 f85e 	bl	8006468 <prvSampleTimeNow>
 80063ac:	0003      	movs	r3, r0
 80063ae:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d12b      	bne.n	800640e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <prvProcessTimerOrBlockTask+0x42>
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d808      	bhi.n	80063d6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80063c4:	f7ff f9de 	bl	8005784 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	0011      	movs	r1, r2
 80063ce:	0018      	movs	r0, r3
 80063d0:	f7ff ff88 	bl	80062e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063d4:	e01d      	b.n	8006412 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <prvProcessTimerOrBlockTask+0x88>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <prvProcessTimerOrBlockTask+0x56>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <prvProcessTimerOrBlockTask+0x58>
 80063ea:	2300      	movs	r3, #0
 80063ec:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <prvProcessTimerOrBlockTask+0x8c>)
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	0019      	movs	r1, r3
 80063fc:	f7fe ffac 	bl	8005358 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006400:	f7ff f9c0 	bl	8005784 <xTaskResumeAll>
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d104      	bne.n	8006412 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8006408:	f000 fa82 	bl	8006910 <vPortYield>
}
 800640c:	e001      	b.n	8006412 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800640e:	f7ff f9b9 	bl	8005784 <xTaskResumeAll>
}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	46bd      	mov	sp, r7
 8006416:	b004      	add	sp, #16
 8006418:	bd80      	pop	{r7, pc}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	20000d84 	.word	0x20000d84
 8006420:	20000d88 	.word	0x20000d88

08006424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <prvGetNextExpireTime+0x40>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <prvGetNextExpireTime+0x16>
 8006436:	2201      	movs	r2, #1
 8006438:	e000      	b.n	800643c <prvGetNextExpireTime+0x18>
 800643a:	2200      	movs	r2, #0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <prvGetNextExpireTime+0x40>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e001      	b.n	8006458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006458:	68fb      	ldr	r3, [r7, #12]
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b004      	add	sp, #16
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	20000d80 	.word	0x20000d80

08006468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006470:	f7ff fa14 	bl	800589c <xTaskGetTickCount>
 8006474:	0003      	movs	r3, r0
 8006476:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <prvSampleTimeNow+0x3c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	429a      	cmp	r2, r3
 8006480:	d205      	bcs.n	800648e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006482:	f000 f919 	bl	80066b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	e002      	b.n	8006494 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <prvSampleTimeNow+0x3c>)
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800649a:	68fb      	ldr	r3, [r7, #12]
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	b004      	add	sp, #16
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000d90 	.word	0x20000d90

080064a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d812      	bhi.n	80064f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e01b      	b.n	800651a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <prvInsertTimerInActiveList+0x7c>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3304      	adds	r3, #4
 80064ea:	0019      	movs	r1, r3
 80064ec:	0010      	movs	r0, r2
 80064ee:	f7fe f980 	bl	80047f2 <vListInsert>
 80064f2:	e012      	b.n	800651a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d206      	bcs.n	800650a <prvInsertTimerInActiveList+0x62>
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e007      	b.n	800651a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <prvInsertTimerInActiveList+0x80>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3304      	adds	r3, #4
 8006512:	0019      	movs	r1, r3
 8006514:	0010      	movs	r0, r2
 8006516:	f7fe f96c 	bl	80047f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800651a:	697b      	ldr	r3, [r7, #20]
}
 800651c:	0018      	movs	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	b006      	add	sp, #24
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000d84 	.word	0x20000d84
 8006528:	20000d80 	.word	0x20000d80

0800652c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800652c:	b590      	push	{r4, r7, lr}
 800652e:	b08d      	sub	sp, #52	; 0x34
 8006530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006532:	e0ac      	b.n	800668e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006534:	2208      	movs	r2, #8
 8006536:	18bb      	adds	r3, r7, r2
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	da0f      	bge.n	800655e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800653e:	18bb      	adds	r3, r7, r2
 8006540:	3304      	adds	r3, #4
 8006542:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <prvProcessReceivedCommands+0x22>
 800654a:	b672      	cpsid	i
 800654c:	e7fe      	b.n	800654c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	6858      	ldr	r0, [r3, #4]
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	0019      	movs	r1, r3
 800655c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800655e:	2208      	movs	r2, #8
 8006560:	18bb      	adds	r3, r7, r2
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da00      	bge.n	800656a <prvProcessReceivedCommands+0x3e>
 8006568:	e091      	b.n	800668e <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800656a:	18bb      	adds	r3, r7, r2
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	3304      	adds	r3, #4
 800657c:	0018      	movs	r0, r3
 800657e:	f7fe f96e 	bl	800485e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	0018      	movs	r0, r3
 8006586:	f7ff ff6f 	bl	8006468 <prvSampleTimeNow>
 800658a:	0003      	movs	r3, r0
 800658c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800658e:	2308      	movs	r3, #8
 8006590:	18fb      	adds	r3, r7, r3
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b09      	cmp	r3, #9
 8006596:	d900      	bls.n	800659a <prvProcessReceivedCommands+0x6e>
 8006598:	e078      	b.n	800668c <prvProcessReceivedCommands+0x160>
 800659a:	009a      	lsls	r2, r3, #2
 800659c:	4b44      	ldr	r3, [pc, #272]	; (80066b0 <prvProcessReceivedCommands+0x184>)
 800659e:	18d3      	adds	r3, r2, r3
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	2228      	movs	r2, #40	; 0x28
 80065a8:	5c9b      	ldrb	r3, [r3, r2]
 80065aa:	2201      	movs	r2, #1
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b2d9      	uxtb	r1, r3
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	2228      	movs	r2, #40	; 0x28
 80065b4:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065b6:	2408      	movs	r4, #8
 80065b8:	193b      	adds	r3, r7, r4
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	18d1      	adds	r1, r2, r3
 80065c2:	193b      	adds	r3, r7, r4
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	6a38      	ldr	r0, [r7, #32]
 80065ca:	f7ff ff6d 	bl	80064a8 <prvInsertTimerInActiveList>
 80065ce:	1e03      	subs	r3, r0, #0
 80065d0:	d05d      	beq.n	800668e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	6a3a      	ldr	r2, [r7, #32]
 80065d8:	0010      	movs	r0, r2
 80065da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	2228      	movs	r2, #40	; 0x28
 80065e0:	5c9b      	ldrb	r3, [r3, r2]
 80065e2:	001a      	movs	r2, r3
 80065e4:	2304      	movs	r3, #4
 80065e6:	4013      	ands	r3, r2
 80065e8:	d051      	beq.n	800668e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065ea:	193b      	adds	r3, r7, r4
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	18d2      	adds	r2, r2, r3
 80065f4:	6a38      	ldr	r0, [r7, #32]
 80065f6:	2300      	movs	r3, #0
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	2300      	movs	r3, #0
 80065fc:	2100      	movs	r1, #0
 80065fe:	f7ff fe27 	bl	8006250 <xTimerGenericCommand>
 8006602:	0003      	movs	r3, r0
 8006604:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d140      	bne.n	800668e <prvProcessReceivedCommands+0x162>
 800660c:	b672      	cpsid	i
 800660e:	e7fe      	b.n	800660e <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	2228      	movs	r2, #40	; 0x28
 8006614:	5c9b      	ldrb	r3, [r3, r2]
 8006616:	2201      	movs	r2, #1
 8006618:	4393      	bics	r3, r2
 800661a:	b2d9      	uxtb	r1, r3
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	2228      	movs	r2, #40	; 0x28
 8006620:	5499      	strb	r1, [r3, r2]
					break;
 8006622:	e034      	b.n	800668e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2228      	movs	r2, #40	; 0x28
 8006628:	5c9b      	ldrb	r3, [r3, r2]
 800662a:	2201      	movs	r2, #1
 800662c:	4313      	orrs	r3, r2
 800662e:	b2d9      	uxtb	r1, r3
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	2228      	movs	r2, #40	; 0x28
 8006634:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006636:	2308      	movs	r3, #8
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <prvProcessReceivedCommands+0x120>
 8006648:	b672      	cpsid	i
 800664a:	e7fe      	b.n	800664a <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	18d1      	adds	r1, r2, r3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	6a38      	ldr	r0, [r7, #32]
 800665a:	f7ff ff25 	bl	80064a8 <prvInsertTimerInActiveList>
					break;
 800665e:	e016      	b.n	800668e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	2228      	movs	r2, #40	; 0x28
 8006664:	5c9b      	ldrb	r3, [r3, r2]
 8006666:	001a      	movs	r2, r3
 8006668:	2302      	movs	r3, #2
 800666a:	4013      	ands	r3, r2
 800666c:	d104      	bne.n	8006678 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	0018      	movs	r0, r3
 8006672:	f000 fa9b 	bl	8006bac <vPortFree>
 8006676:	e00a      	b.n	800668e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2228      	movs	r2, #40	; 0x28
 800667c:	5c9b      	ldrb	r3, [r3, r2]
 800667e:	2201      	movs	r2, #1
 8006680:	4393      	bics	r3, r2
 8006682:	b2d9      	uxtb	r1, r3
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2228      	movs	r2, #40	; 0x28
 8006688:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800668a:	e000      	b.n	800668e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 800668c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <prvProcessReceivedCommands+0x188>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2208      	movs	r2, #8
 8006694:	18b9      	adds	r1, r7, r2
 8006696:	2200      	movs	r2, #0
 8006698:	0018      	movs	r0, r3
 800669a:	f7fe fb72 	bl	8004d82 <xQueueReceive>
 800669e:	1e03      	subs	r3, r0, #0
 80066a0:	d000      	beq.n	80066a4 <prvProcessReceivedCommands+0x178>
 80066a2:	e747      	b.n	8006534 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80066a4:	46c0      	nop			; (mov r8, r8)
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b00b      	add	sp, #44	; 0x2c
 80066ac:	bd90      	pop	{r4, r7, pc}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	08009dbc 	.word	0x08009dbc
 80066b4:	20000d88 	.word	0x20000d88

080066b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066be:	e041      	b.n	8006744 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066c0:	4b2a      	ldr	r3, [pc, #168]	; (800676c <prvSwitchTimerLists+0xb4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ca:	4b28      	ldr	r3, [pc, #160]	; (800676c <prvSwitchTimerLists+0xb4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3304      	adds	r3, #4
 80066d8:	0018      	movs	r0, r3
 80066da:	f7fe f8c0 	bl	800485e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	0010      	movs	r0, r2
 80066e6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2228      	movs	r2, #40	; 0x28
 80066ec:	5c9b      	ldrb	r3, [r3, r2]
 80066ee:	001a      	movs	r2, r3
 80066f0:	2304      	movs	r3, #4
 80066f2:	4013      	ands	r3, r2
 80066f4:	d026      	beq.n	8006744 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	18d3      	adds	r3, r2, r3
 80066fe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	429a      	cmp	r2, r3
 8006706:	d90e      	bls.n	8006726 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006714:	4b15      	ldr	r3, [pc, #84]	; (800676c <prvSwitchTimerLists+0xb4>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3304      	adds	r3, #4
 800671c:	0019      	movs	r1, r3
 800671e:	0010      	movs	r0, r2
 8006720:	f7fe f867 	bl	80047f2 <vListInsert>
 8006724:	e00e      	b.n	8006744 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	2300      	movs	r3, #0
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	2300      	movs	r3, #0
 8006730:	2100      	movs	r1, #0
 8006732:	f7ff fd8d 	bl	8006250 <xTimerGenericCommand>
 8006736:	0003      	movs	r3, r0
 8006738:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <prvSwitchTimerLists+0x8c>
 8006740:	b672      	cpsid	i
 8006742:	e7fe      	b.n	8006742 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <prvSwitchTimerLists+0xb4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1b8      	bne.n	80066c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <prvSwitchTimerLists+0xb4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006754:	4b06      	ldr	r3, [pc, #24]	; (8006770 <prvSwitchTimerLists+0xb8>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <prvSwitchTimerLists+0xb4>)
 800675a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800675c:	4b04      	ldr	r3, [pc, #16]	; (8006770 <prvSwitchTimerLists+0xb8>)
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	601a      	str	r2, [r3, #0]
}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	46bd      	mov	sp, r7
 8006766:	b006      	add	sp, #24
 8006768:	bd80      	pop	{r7, pc}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	20000d80 	.word	0x20000d80
 8006770:	20000d84 	.word	0x20000d84

08006774 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800677a:	f000 f8d9 	bl	8006930 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800677e:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <prvCheckForValidListAndQueue+0x64>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d123      	bne.n	80067ce <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006786:	4b15      	ldr	r3, [pc, #84]	; (80067dc <prvCheckForValidListAndQueue+0x68>)
 8006788:	0018      	movs	r0, r3
 800678a:	f7fd ffe7 	bl	800475c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800678e:	4b14      	ldr	r3, [pc, #80]	; (80067e0 <prvCheckForValidListAndQueue+0x6c>)
 8006790:	0018      	movs	r0, r3
 8006792:	f7fd ffe3 	bl	800475c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006796:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <prvCheckForValidListAndQueue+0x70>)
 8006798:	4a10      	ldr	r2, [pc, #64]	; (80067dc <prvCheckForValidListAndQueue+0x68>)
 800679a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800679c:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <prvCheckForValidListAndQueue+0x74>)
 800679e:	4a10      	ldr	r2, [pc, #64]	; (80067e0 <prvCheckForValidListAndQueue+0x6c>)
 80067a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067a2:	4b12      	ldr	r3, [pc, #72]	; (80067ec <prvCheckForValidListAndQueue+0x78>)
 80067a4:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <prvCheckForValidListAndQueue+0x7c>)
 80067a6:	2100      	movs	r1, #0
 80067a8:	9100      	str	r1, [sp, #0]
 80067aa:	2110      	movs	r1, #16
 80067ac:	200a      	movs	r0, #10
 80067ae:	f7fe f8d2 	bl	8004956 <xQueueGenericCreateStatic>
 80067b2:	0002      	movs	r2, r0
 80067b4:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <prvCheckForValidListAndQueue+0x64>)
 80067b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067b8:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <prvCheckForValidListAndQueue+0x64>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d006      	beq.n	80067ce <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <prvCheckForValidListAndQueue+0x64>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a0b      	ldr	r2, [pc, #44]	; (80067f4 <prvCheckForValidListAndQueue+0x80>)
 80067c6:	0011      	movs	r1, r2
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7fe fd9d 	bl	8005308 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067ce:	f000 f8c1 	bl	8006954 <vPortExitCritical>
}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000d88 	.word	0x20000d88
 80067dc:	20000d58 	.word	0x20000d58
 80067e0:	20000d6c 	.word	0x20000d6c
 80067e4:	20000d80 	.word	0x20000d80
 80067e8:	20000d84 	.word	0x20000d84
 80067ec:	20000e34 	.word	0x20000e34
 80067f0:	20000d94 	.word	0x20000d94
 80067f4:	08009980 	.word	0x08009980

080067f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3b04      	subs	r3, #4
 8006808:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2280      	movs	r2, #128	; 0x80
 800680e:	0452      	lsls	r2, r2, #17
 8006810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b04      	subs	r3, #4
 8006816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b04      	subs	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006824:	4a08      	ldr	r2, [pc, #32]	; (8006848 <pxPortInitialiseStack+0x50>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3b14      	subs	r3, #20
 800682e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3b20      	subs	r3, #32
 800683a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800683c:	68fb      	ldr	r3, [r7, #12]
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b004      	add	sp, #16
 8006844:	bd80      	pop	{r7, pc}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	0800684d 	.word	0x0800684d

0800684c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006852:	2300      	movs	r3, #0
 8006854:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006856:	4b08      	ldr	r3, [pc, #32]	; (8006878 <prvTaskExitError+0x2c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3301      	adds	r3, #1
 800685c:	d001      	beq.n	8006862 <prvTaskExitError+0x16>
 800685e:	b672      	cpsid	i
 8006860:	e7fe      	b.n	8006860 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006862:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006864:	46c0      	nop			; (mov r8, r8)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0fc      	beq.n	8006866 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800686c:	46c0      	nop			; (mov r8, r8)
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	46bd      	mov	sp, r7
 8006872:	b002      	add	sp, #8
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	2000000c 	.word	0x2000000c

0800687c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006880:	46c0      	nop			; (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006890 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006890:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <pxCurrentTCBConst2>)
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	3020      	adds	r0, #32
 8006898:	f380 8809 	msr	PSP, r0
 800689c:	2002      	movs	r0, #2
 800689e:	f380 8814 	msr	CONTROL, r0
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80068a8:	46ae      	mov	lr, r5
 80068aa:	bc08      	pop	{r3}
 80068ac:	bc04      	pop	{r2}
 80068ae:	b662      	cpsie	i
 80068b0:	4718      	bx	r3
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	46c0      	nop			; (mov r8, r8)
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	46c0      	nop			; (mov r8, r8)

080068c0 <pxCurrentTCBConst2>:
 80068c0:	20000858 	.word	0x20000858
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80068c4:	46c0      	nop			; (mov r8, r8)
 80068c6:	46c0      	nop			; (mov r8, r8)

080068c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80068cc:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <xPortStartScheduler+0x40>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <xPortStartScheduler+0x40>)
 80068d2:	21ff      	movs	r1, #255	; 0xff
 80068d4:	0409      	lsls	r1, r1, #16
 80068d6:	430a      	orrs	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80068da:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <xPortStartScheduler+0x40>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <xPortStartScheduler+0x40>)
 80068e0:	21ff      	movs	r1, #255	; 0xff
 80068e2:	0609      	lsls	r1, r1, #24
 80068e4:	430a      	orrs	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80068e8:	f000 f898 	bl	8006a1c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <xPortStartScheduler+0x44>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80068f2:	f7ff ffcd 	bl	8006890 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068f6:	f7ff f88f 	bl	8005a18 <vTaskSwitchContext>
	prvTaskExitError();
 80068fa:	f7ff ffa7 	bl	800684c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	0018      	movs	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	e000ed20 	.word	0xe000ed20
 800690c:	2000000c 	.word	0x2000000c

08006910 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <vPortYield+0x1c>)
 8006916:	2280      	movs	r2, #128	; 0x80
 8006918:	0552      	lsls	r2, r2, #21
 800691a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800691c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006920:	f3bf 8f6f 	isb	sy
}
 8006924:	46c0      	nop			; (mov r8, r8)
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006934:	b672      	cpsid	i
    uxCriticalNesting++;
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <vPortEnterCritical+0x20>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <vPortEnterCritical+0x20>)
 800693e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006940:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006944:	f3bf 8f6f 	isb	sy
}
 8006948:	46c0      	nop			; (mov r8, r8)
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	2000000c 	.word	0x2000000c

08006954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006958:	4b09      	ldr	r3, [pc, #36]	; (8006980 <vPortExitCritical+0x2c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <vPortExitCritical+0x10>
 8006960:	b672      	cpsid	i
 8006962:	e7fe      	b.n	8006962 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <vPortExitCritical+0x2c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	1e5a      	subs	r2, r3, #1
 800696a:	4b05      	ldr	r3, [pc, #20]	; (8006980 <vPortExitCritical+0x2c>)
 800696c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800696e:	4b04      	ldr	r3, [pc, #16]	; (8006980 <vPortExitCritical+0x2c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d100      	bne.n	8006978 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006976:	b662      	cpsie	i
    }
}
 8006978:	46c0      	nop			; (mov r8, r8)
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	46c0      	nop			; (mov r8, r8)
 8006980:	2000000c 	.word	0x2000000c

08006984 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006984:	f3ef 8010 	mrs	r0, PRIMASK
 8006988:	b672      	cpsid	i
 800698a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800698c:	46c0      	nop			; (mov r8, r8)
 800698e:	0018      	movs	r0, r3

08006990 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006990:	f380 8810 	msr	PRIMASK, r0
 8006994:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006996:	46c0      	nop			; (mov r8, r8)
	...

080069a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069a0:	f3ef 8009 	mrs	r0, PSP
 80069a4:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <pxCurrentTCBConst>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	3820      	subs	r0, #32
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80069ae:	4644      	mov	r4, r8
 80069b0:	464d      	mov	r5, r9
 80069b2:	4656      	mov	r6, sl
 80069b4:	465f      	mov	r7, fp
 80069b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80069b8:	b508      	push	{r3, lr}
 80069ba:	b672      	cpsid	i
 80069bc:	f7ff f82c 	bl	8005a18 <vTaskSwitchContext>
 80069c0:	b662      	cpsie	i
 80069c2:	bc0c      	pop	{r2, r3}
 80069c4:	6811      	ldr	r1, [r2, #0]
 80069c6:	6808      	ldr	r0, [r1, #0]
 80069c8:	3010      	adds	r0, #16
 80069ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80069cc:	46a0      	mov	r8, r4
 80069ce:	46a9      	mov	r9, r5
 80069d0:	46b2      	mov	sl, r6
 80069d2:	46bb      	mov	fp, r7
 80069d4:	f380 8809 	msr	PSP, r0
 80069d8:	3820      	subs	r0, #32
 80069da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80069dc:	4718      	bx	r3
 80069de:	46c0      	nop			; (mov r8, r8)

080069e0 <pxCurrentTCBConst>:
 80069e0:	20000858 	.word	0x20000858
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46c0      	nop			; (mov r8, r8)

080069e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ee:	f7ff ffc9 	bl	8006984 <ulSetInterruptMaskFromISR>
 80069f2:	0003      	movs	r3, r0
 80069f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069f6:	f7fe ff5f 	bl	80058b8 <xTaskIncrementTick>
 80069fa:	1e03      	subs	r3, r0, #0
 80069fc:	d003      	beq.n	8006a06 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <SysTick_Handler+0x30>)
 8006a00:	2280      	movs	r2, #128	; 0x80
 8006a02:	0552      	lsls	r2, r2, #21
 8006a04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7ff ffc1 	bl	8006990 <vClearInterruptMaskFromISR>
}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	46bd      	mov	sp, r7
 8006a12:	b002      	add	sp, #8
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <prvSetupTimerInterrupt+0x34>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <prvSetupTimerInterrupt+0x38>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <prvSetupTimerInterrupt+0x3c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	22fa      	movs	r2, #250	; 0xfa
 8006a32:	0091      	lsls	r1, r2, #2
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7f9 fb79 	bl	800012c <__udivsi3>
 8006a3a:	0003      	movs	r3, r0
 8006a3c:	001a      	movs	r2, r3
 8006a3e:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <prvSetupTimerInterrupt+0x40>)
 8006a40:	3a01      	subs	r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <prvSetupTimerInterrupt+0x34>)
 8006a46:	2207      	movs	r2, #7
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	e000e010 	.word	0xe000e010
 8006a54:	e000e018 	.word	0xe000e018
 8006a58:	20000000 	.word	0x20000000
 8006a5c:	e000e014 	.word	0xe000e014

08006a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006a6c:	f7fe fe7e 	bl	800576c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a70:	4b49      	ldr	r3, [pc, #292]	; (8006b98 <pvPortMalloc+0x138>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a78:	f000 f8e0 	bl	8006c3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a7c:	4b47      	ldr	r3, [pc, #284]	; (8006b9c <pvPortMalloc+0x13c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4013      	ands	r3, r2
 8006a84:	d000      	beq.n	8006a88 <pvPortMalloc+0x28>
 8006a86:	e079      	b.n	8006b7c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d012      	beq.n	8006ab4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8006a8e:	2208      	movs	r2, #8
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	189b      	adds	r3, r3, r2
 8006a94:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2207      	movs	r2, #7
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d00a      	beq.n	8006ab4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2207      	movs	r2, #7
 8006aa2:	4393      	bics	r3, r2
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2207      	movs	r2, #7
 8006aac:	4013      	ands	r3, r2
 8006aae:	d001      	beq.n	8006ab4 <pvPortMalloc+0x54>
 8006ab0:	b672      	cpsid	i
 8006ab2:	e7fe      	b.n	8006ab2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d060      	beq.n	8006b7c <pvPortMalloc+0x11c>
 8006aba:	4b39      	ldr	r3, [pc, #228]	; (8006ba0 <pvPortMalloc+0x140>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d85b      	bhi.n	8006b7c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ac4:	4b37      	ldr	r3, [pc, #220]	; (8006ba4 <pvPortMalloc+0x144>)
 8006ac6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006ac8:	4b36      	ldr	r3, [pc, #216]	; (8006ba4 <pvPortMalloc+0x144>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ace:	e004      	b.n	8006ada <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d903      	bls.n	8006aec <pvPortMalloc+0x8c>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f1      	bne.n	8006ad0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006aec:	4b2a      	ldr	r3, [pc, #168]	; (8006b98 <pvPortMalloc+0x138>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d042      	beq.n	8006b7c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2208      	movs	r2, #8
 8006afc:	189b      	adds	r3, r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	2308      	movs	r3, #8
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d916      	bls.n	8006b46 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	18d3      	adds	r3, r2, r3
 8006b1e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2207      	movs	r2, #7
 8006b24:	4013      	ands	r3, r2
 8006b26:	d001      	beq.n	8006b2c <pvPortMalloc+0xcc>
 8006b28:	b672      	cpsid	i
 8006b2a:	e7fe      	b.n	8006b2a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	0018      	movs	r0, r3
 8006b42:	f000 f8db 	bl	8006cfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b46:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <pvPortMalloc+0x140>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <pvPortMalloc+0x140>)
 8006b52:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b54:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <pvPortMalloc+0x140>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <pvPortMalloc+0x148>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d203      	bcs.n	8006b68 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <pvPortMalloc+0x140>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <pvPortMalloc+0x148>)
 8006b66:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <pvPortMalloc+0x13c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b7c:	f7fe fe02 	bl	8005784 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2207      	movs	r2, #7
 8006b84:	4013      	ands	r3, r2
 8006b86:	d001      	beq.n	8006b8c <pvPortMalloc+0x12c>
 8006b88:	b672      	cpsid	i
 8006b8a:	e7fe      	b.n	8006b8a <pvPortMalloc+0x12a>
	return pvReturn;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
}
 8006b8e:	0018      	movs	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b006      	add	sp, #24
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	200015f8 	.word	0x200015f8
 8006b9c:	20001604 	.word	0x20001604
 8006ba0:	200015fc 	.word	0x200015fc
 8006ba4:	200015f0 	.word	0x200015f0
 8006ba8:	20001600 	.word	0x20001600

08006bac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d035      	beq.n	8006c2a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	425b      	negs	r3, r3
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	18d3      	adds	r3, r2, r3
 8006bc6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <vPortFree+0x88>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d101      	bne.n	8006bdc <vPortFree+0x30>
 8006bd8:	b672      	cpsid	i
 8006bda:	e7fe      	b.n	8006bda <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <vPortFree+0x3c>
 8006be4:	b672      	cpsid	i
 8006be6:	e7fe      	b.n	8006be6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <vPortFree+0x88>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d01a      	beq.n	8006c2a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d116      	bne.n	8006c2a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <vPortFree+0x88>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	43db      	mvns	r3, r3
 8006c06:	401a      	ands	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c0c:	f7fe fdae 	bl	800576c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <vPortFree+0x8c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	18d2      	adds	r2, r2, r3
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <vPortFree+0x8c>)
 8006c1c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	0018      	movs	r0, r3
 8006c22:	f000 f86b 	bl	8006cfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c26:	f7fe fdad 	bl	8005784 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b004      	add	sp, #16
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	20001604 	.word	0x20001604
 8006c38:	200015fc 	.word	0x200015fc

08006c3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c42:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <prvHeapInit+0xa4>)
 8006c44:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c46:	4b27      	ldr	r3, [pc, #156]	; (8006ce4 <prvHeapInit+0xa8>)
 8006c48:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2207      	movs	r2, #7
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d00c      	beq.n	8006c6c <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3307      	adds	r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2207      	movs	r2, #7
 8006c5c:	4393      	bics	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1ad2      	subs	r2, r2, r3
 8006c66:	4b1f      	ldr	r3, [pc, #124]	; (8006ce4 <prvHeapInit+0xa8>)
 8006c68:	18d3      	adds	r3, r2, r3
 8006c6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c70:	4b1d      	ldr	r3, [pc, #116]	; (8006ce8 <prvHeapInit+0xac>)
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c76:	4b1c      	ldr	r3, [pc, #112]	; (8006ce8 <prvHeapInit+0xac>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	18d3      	adds	r3, r2, r3
 8006c82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c84:	2208      	movs	r2, #8
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1a9b      	subs	r3, r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2207      	movs	r2, #7
 8006c90:	4393      	bics	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <prvHeapInit+0xb0>)
 8006c98:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006c9a:	4b14      	ldr	r3, [pc, #80]	; (8006cec <prvHeapInit+0xb0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <prvHeapInit+0xb0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	1ad2      	subs	r2, r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <prvHeapInit+0xb0>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <prvHeapInit+0xb4>)
 8006cc6:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <prvHeapInit+0xb8>)
 8006cce:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cd0:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <prvHeapInit+0xbc>)
 8006cd2:	2280      	movs	r2, #128	; 0x80
 8006cd4:	0612      	lsls	r2, r2, #24
 8006cd6:	601a      	str	r2, [r3, #0]
}
 8006cd8:	46c0      	nop			; (mov r8, r8)
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b004      	add	sp, #16
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	0000076c 	.word	0x0000076c
 8006ce4:	20000e84 	.word	0x20000e84
 8006ce8:	200015f0 	.word	0x200015f0
 8006cec:	200015f8 	.word	0x200015f8
 8006cf0:	20001600 	.word	0x20001600
 8006cf4:	200015fc 	.word	0x200015fc
 8006cf8:	20001604 	.word	0x20001604

08006cfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d04:	4b27      	ldr	r3, [pc, #156]	; (8006da4 <prvInsertBlockIntoFreeList+0xa8>)
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	e002      	b.n	8006d10 <prvInsertBlockIntoFreeList+0x14>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d8f7      	bhi.n	8006d0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	18d3      	adds	r3, r2, r3
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d108      	bne.n	8006d3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	18d2      	adds	r2, r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	18d2      	adds	r2, r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d118      	bne.n	8006d84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <prvInsertBlockIntoFreeList+0xac>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d00d      	beq.n	8006d7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	18d2      	adds	r2, r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	e008      	b.n	8006d8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <prvInsertBlockIntoFreeList+0xac>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e003      	b.n	8006d8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d002      	beq.n	8006d9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b004      	add	sp, #16
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	200015f0 	.word	0x200015f0
 8006da8:	200015f8 	.word	0x200015f8

08006dac <shellInit>:
 * @brief shell 初始化
 * 
 * @param shell shell对象
 */
void shellInit(Shell *shell, char *buffer, unsigned short size)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	1dbb      	adds	r3, r7, #6
 8006db8:	801a      	strh	r2, [r3, #0]
    shell->parser.length = 0;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	819a      	strh	r2, [r3, #12]
    shell->parser.cursor = 0;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	81da      	strh	r2, [r3, #14]
    shell->info.user = NULL;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]
    shell->status.isChecked = 1;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2260      	movs	r2, #96	; 0x60
 8006dd0:	5c99      	ldrb	r1, [r3, r2]
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	4301      	orrs	r1, r0
 8006dd6:	5499      	strb	r1, [r3, r2]

    shell->parser.buffer = buffer;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	611a      	str	r2, [r3, #16]
    shell->parser.bufferSize = size / (SHELL_HISTORY_MAX_NUMBER + 1);
 8006dde:	1dbb      	adds	r3, r7, #6
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	2106      	movs	r1, #6
 8006de4:	0018      	movs	r0, r3
 8006de6:	f7f9 f9a1 	bl	800012c <__udivsi3>
 8006dea:	0003      	movs	r3, r0
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	869a      	strh	r2, [r3, #52]	; 0x34
    
#if SHELL_HISTORY_MAX_NUMBER > 0
    shell->history.offset = 0;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2254      	movs	r2, #84	; 0x54
 8006df6:	2100      	movs	r1, #0
 8006df8:	5299      	strh	r1, [r3, r2]
    shell->history.number = 0;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2250      	movs	r2, #80	; 0x50
 8006dfe:	2100      	movs	r1, #0
 8006e00:	5299      	strh	r1, [r3, r2]
    shell->history.record = 0;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2252      	movs	r2, #82	; 0x52
 8006e06:	2100      	movs	r1, #0
 8006e08:	5299      	strh	r1, [r3, r2]
    for (short i = 0; i < SHELL_HISTORY_MAX_NUMBER; i++)
 8006e0a:	2316      	movs	r3, #22
 8006e0c:	18fb      	adds	r3, r7, r3
 8006e0e:	2200      	movs	r2, #0
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	e01c      	b.n	8006e4e <shellInit+0xa2>
    {
        shell->history.item[i] = buffer + shell->parser.bufferSize * (i + 1);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006e18:	001a      	movs	r2, r3
 8006e1a:	2016      	movs	r0, #22
 8006e1c:	183b      	adds	r3, r7, r0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	5e5b      	ldrsh	r3, [r3, r1]
 8006e22:	3301      	adds	r3, #1
 8006e24:	4353      	muls	r3, r2
 8006e26:	0019      	movs	r1, r3
 8006e28:	183b      	adds	r3, r7, r0
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	5e9b      	ldrsh	r3, [r3, r2]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	1852      	adds	r2, r2, r1
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	330e      	adds	r3, #14
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	18cb      	adds	r3, r1, r3
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	601a      	str	r2, [r3, #0]
    for (short i = 0; i < SHELL_HISTORY_MAX_NUMBER; i++)
 8006e3e:	183b      	adds	r3, r7, r0
 8006e40:	2200      	movs	r2, #0
 8006e42:	5e9b      	ldrsh	r3, [r3, r2]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3301      	adds	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	183b      	adds	r3, r7, r0
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	2316      	movs	r3, #22
 8006e50:	18fb      	adds	r3, r7, r3
 8006e52:	2200      	movs	r2, #0
 8006e54:	5e9b      	ldrsh	r3, [r3, r2]
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	dddc      	ble.n	8006e14 <shellInit+0x68>
        shell->commandList.base = (ShellCommand *)(__section_begin("shellCommand"));
        shell->commandList.count = ((size_t)(__section_end("shellCommand"))
                                - (size_t)(__section_begin("shellCommand")))
                                / sizeof(ShellCommand);
    #elif defined(__GNUC__)
        shell->commandList.base = (ShellCommand *)(&_shell_command_start);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a11      	ldr	r2, [pc, #68]	; (8006ea4 <shellInit+0xf8>)
 8006e5e:	659a      	str	r2, [r3, #88]	; 0x58
        shell->commandList.count = ((size_t)(&_shell_command_end)
 8006e60:	4a11      	ldr	r2, [pc, #68]	; (8006ea8 <shellInit+0xfc>)
                                - (size_t)(&_shell_command_start))
 8006e62:	4b10      	ldr	r3, [pc, #64]	; (8006ea4 <shellInit+0xf8>)
 8006e64:	1ad3      	subs	r3, r2, r3
                                / sizeof(ShellCommand);
 8006e66:	091b      	lsrs	r3, r3, #4
        shell->commandList.count = ((size_t)(&_shell_command_end)
 8006e68:	b299      	uxth	r1, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	225c      	movs	r2, #92	; 0x5c
 8006e6e:	5299      	strh	r1, [r3, r2]
#else
    shell->commandList.base = (ShellCommand *)shellCommandList;
    shell->commandList.count = shellCommandCount;
#endif

    shellAdd(shell);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	0018      	movs	r0, r3
 8006e74:	f000 f81c 	bl	8006eb0 <shellAdd>

    shellSetUser(shell, shellSeekCommand(shell,
                                         SHELL_DEFAULT_USER,
                                         shell->commandList.base,
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    shellSetUser(shell, shellSeekCommand(shell,
 8006e7c:	490b      	ldr	r1, [pc, #44]	; (8006eac <shellInit+0x100>)
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	2300      	movs	r3, #0
 8006e82:	f001 f923 	bl	80080cc <shellSeekCommand>
 8006e86:	0002      	movs	r2, r0
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	0011      	movs	r1, r2
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f001 fbd7 	bl	8008640 <shellSetUser>
                                         0));
    shellWritePrompt(shell, 1);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2101      	movs	r1, #1
 8006e96:	0018      	movs	r0, r3
 8006e98:	f000 f8fa 	bl	8007090 <shellWritePrompt>
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b006      	add	sp, #24
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	08009f58 	.word	0x08009f58
 8006ea8:	0800a078 	.word	0x0800a078
 8006eac:	08009c2c 	.word	0x08009c2c

08006eb0 <shellAdd>:
 * @brief 添加shell
 * 
 * @param shell shell对象
 */
static void shellAdd(Shell *shell)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 8006eb8:	230e      	movs	r3, #14
 8006eba:	18fb      	adds	r3, r7, r3
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	801a      	strh	r2, [r3, #0]
 8006ec0:	e019      	b.n	8006ef6 <shellAdd+0x46>
    {
        if (shellList[i] == NULL)
 8006ec2:	210e      	movs	r1, #14
 8006ec4:	187b      	adds	r3, r7, r1
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	5e9a      	ldrsh	r2, [r3, r2]
 8006eca:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <shellAdd+0x58>)
 8006ecc:	0092      	lsls	r2, r2, #2
 8006ece:	58d3      	ldr	r3, [r2, r3]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d107      	bne.n	8006ee4 <shellAdd+0x34>
        {
            shellList[i] = shell;
 8006ed4:	187b      	adds	r3, r7, r1
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	5e9a      	ldrsh	r2, [r3, r2]
 8006eda:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <shellAdd+0x58>)
 8006edc:	0092      	lsls	r2, r2, #2
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	50d1      	str	r1, [r2, r3]
            return;
 8006ee2:	e00e      	b.n	8006f02 <shellAdd+0x52>
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 8006ee4:	210e      	movs	r1, #14
 8006ee6:	187b      	adds	r3, r7, r1
 8006ee8:	2200      	movs	r2, #0
 8006eea:	5e9b      	ldrsh	r3, [r3, r2]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	187b      	adds	r3, r7, r1
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	230e      	movs	r3, #14
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	2200      	movs	r2, #0
 8006efc:	5e9b      	ldrsh	r3, [r3, r2]
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	dddf      	ble.n	8006ec2 <shellAdd+0x12>
        }
    }
}
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b004      	add	sp, #16
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20001608 	.word	0x20001608

08006f0c <shellGetCurrent>:
 * @brief 获取当前活动shell
 * 
 * @return Shell* 当前活动shell对象
 */
Shell* shellGetCurrent(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 8006f12:	1dbb      	adds	r3, r7, #6
 8006f14:	2200      	movs	r2, #0
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e023      	b.n	8006f62 <shellGetCurrent+0x56>
    {
        if (shellList[i] && shellList[i]->status.isActive)
 8006f1a:	1dbb      	adds	r3, r7, #6
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	5e9a      	ldrsh	r2, [r3, r2]
 8006f20:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <shellGetCurrent+0x6c>)
 8006f22:	0092      	lsls	r2, r2, #2
 8006f24:	58d3      	ldr	r3, [r2, r3]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d013      	beq.n	8006f52 <shellGetCurrent+0x46>
 8006f2a:	1dbb      	adds	r3, r7, #6
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	5e9a      	ldrsh	r2, [r3, r2]
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <shellGetCurrent+0x6c>)
 8006f32:	0092      	lsls	r2, r2, #2
 8006f34:	58d3      	ldr	r3, [r2, r3]
 8006f36:	2260      	movs	r2, #96	; 0x60
 8006f38:	5c9b      	ldrb	r3, [r3, r2]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d006      	beq.n	8006f52 <shellGetCurrent+0x46>
        {
            return shellList[i];
 8006f44:	1dbb      	adds	r3, r7, #6
 8006f46:	2200      	movs	r2, #0
 8006f48:	5e9a      	ldrsh	r2, [r3, r2]
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <shellGetCurrent+0x6c>)
 8006f4c:	0092      	lsls	r2, r2, #2
 8006f4e:	58d3      	ldr	r3, [r2, r3]
 8006f50:	e00d      	b.n	8006f6e <shellGetCurrent+0x62>
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 8006f52:	1dbb      	adds	r3, r7, #6
 8006f54:	2200      	movs	r2, #0
 8006f56:	5e9b      	ldrsh	r3, [r3, r2]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	1dbb      	adds	r3, r7, #6
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	1dbb      	adds	r3, r7, #6
 8006f64:	2200      	movs	r2, #0
 8006f66:	5e9b      	ldrsh	r3, [r3, r2]
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	ddd6      	ble.n	8006f1a <shellGetCurrent+0xe>
        }
    }
    return NULL;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	0018      	movs	r0, r3
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b002      	add	sp, #8
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	20001608 	.word	0x20001608

08006f7c <shellWriteByte>:
 * 
 * @param shell shell对象
 * @param data 字符数据
 */
static void shellWriteByte(Shell *shell, char data)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	000a      	movs	r2, r1
 8006f86:	1cfb      	adds	r3, r7, #3
 8006f88:	701a      	strb	r2, [r3, #0]
    shell->write(&data, 1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f8e:	1cfa      	adds	r2, r7, #3
 8006f90:	2101      	movs	r1, #1
 8006f92:	0010      	movs	r0, r2
 8006f94:	4798      	blx	r3
}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b002      	add	sp, #8
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <shellWriteString>:
 * @param string 字符串数据
 * 
 * @return unsigned short 写入字符的数量
 */
unsigned short shellWriteString(Shell *shell, const char *string)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
    unsigned short count = 0;
 8006fa8:	230e      	movs	r3, #14
 8006faa:	18fb      	adds	r3, r7, r3
 8006fac:	2200      	movs	r2, #0
 8006fae:	801a      	strh	r2, [r3, #0]
    const char *p = string;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	60bb      	str	r3, [r7, #8]
    SHELL_ASSERT(shell->write, return 0);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <shellWriteString+0x2e>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e015      	b.n	8006fec <shellWriteString+0x4e>
    while(*p++)
    {
        count ++;
 8006fc0:	210e      	movs	r1, #14
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	881a      	ldrh	r2, [r3, #0]
 8006fc6:	187b      	adds	r3, r7, r1
 8006fc8:	3201      	adds	r2, #1
 8006fca:	801a      	strh	r2, [r3, #0]
    while(*p++)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	60ba      	str	r2, [r7, #8]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f3      	bne.n	8006fc0 <shellWriteString+0x22>
    }
    return shell->write((char *)string, count);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fdc:	220e      	movs	r2, #14
 8006fde:	18ba      	adds	r2, r7, r2
 8006fe0:	8811      	ldrh	r1, [r2, #0]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	0010      	movs	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	0003      	movs	r3, r0
 8006fea:	b29b      	uxth	r3, r3
}
 8006fec:	0018      	movs	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	b004      	add	sp, #16
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <shellWriteCommandDesc>:
 * @param string 字符串数据
 * 
 * @return unsigned short 写入字符的数量
 */
static unsigned short shellWriteCommandDesc(Shell *shell, const char *string)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
    unsigned short count = 0;
 8006ffe:	230e      	movs	r3, #14
 8007000:	18fb      	adds	r3, r7, r3
 8007002:	2200      	movs	r2, #0
 8007004:	801a      	strh	r2, [r3, #0]
    const char *p = string;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	60bb      	str	r3, [r7, #8]
    SHELL_ASSERT(shell->write, return 0);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <shellWriteCommandDesc+0x34>
 8007012:	2300      	movs	r3, #0
 8007014:	e036      	b.n	8007084 <shellWriteCommandDesc+0x90>
    while (*p && *p != '\r' && *p != '\n')
    {
        p++;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3301      	adds	r3, #1
 800701a:	60bb      	str	r3, [r7, #8]
        count++;
 800701c:	210e      	movs	r1, #14
 800701e:	187b      	adds	r3, r7, r1
 8007020:	881a      	ldrh	r2, [r3, #0]
 8007022:	187b      	adds	r3, r7, r1
 8007024:	3201      	adds	r2, #1
 8007026:	801a      	strh	r2, [r3, #0]
    while (*p && *p != '\r' && *p != '\n')
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <shellWriteCommandDesc+0x4c>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b0d      	cmp	r3, #13
 8007036:	d003      	beq.n	8007040 <shellWriteCommandDesc+0x4c>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b0a      	cmp	r3, #10
 800703e:	d1ea      	bne.n	8007016 <shellWriteCommandDesc+0x22>
    }
    
    if (count > 36)
 8007040:	230e      	movs	r3, #14
 8007042:	18fb      	adds	r3, r7, r3
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	2b24      	cmp	r3, #36	; 0x24
 8007048:	d90c      	bls.n	8007064 <shellWriteCommandDesc+0x70>
    {
        shell->write((char *)string, 36);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	2124      	movs	r1, #36	; 0x24
 8007052:	0010      	movs	r0, r2
 8007054:	4798      	blx	r3
        shell->write("...", 3);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <shellWriteCommandDesc+0x98>)
 800705c:	2103      	movs	r1, #3
 800705e:	0010      	movs	r0, r2
 8007060:	4798      	blx	r3
 8007062:	e007      	b.n	8007074 <shellWriteCommandDesc+0x80>
    }
    else
    {
        shell->write((char *)string, count);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007068:	220e      	movs	r2, #14
 800706a:	18ba      	adds	r2, r7, r2
 800706c:	8811      	ldrh	r1, [r2, #0]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	0010      	movs	r0, r2
 8007072:	4798      	blx	r3
    }
    return count > 36 ? 36 : 39;
 8007074:	230e      	movs	r3, #14
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	2b24      	cmp	r3, #36	; 0x24
 800707c:	d901      	bls.n	8007082 <shellWriteCommandDesc+0x8e>
 800707e:	2324      	movs	r3, #36	; 0x24
 8007080:	e000      	b.n	8007084 <shellWriteCommandDesc+0x90>
 8007082:	2327      	movs	r3, #39	; 0x27
}
 8007084:	0018      	movs	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	b004      	add	sp, #16
 800708a:	bd80      	pop	{r7, pc}
 800708c:	08009c34 	.word	0x08009c34

08007090 <shellWritePrompt>:
 * @param shell shell对象
 * @param newline 新行
 * 
 */
static void shellWritePrompt(Shell *shell, unsigned char newline)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	000a      	movs	r2, r1
 800709a:	1cfb      	adds	r3, r7, #3
 800709c:	701a      	strb	r2, [r3, #0]
    if (shell->status.isChecked)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2260      	movs	r2, #96	; 0x60
 80070a2:	5c9b      	ldrb	r3, [r3, r2]
 80070a4:	2201      	movs	r2, #1
 80070a6:	4013      	ands	r3, r2
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d02b      	beq.n	8007106 <shellWritePrompt+0x76>
    {
        if (newline)
 80070ae:	1cfb      	adds	r3, r7, #3
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <shellWritePrompt+0x32>
        {
            shellWriteString(shell, "\r\n");
 80070b6:	4a19      	ldr	r2, [pc, #100]	; (800711c <shellWritePrompt+0x8c>)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	0011      	movs	r1, r2
 80070bc:	0018      	movs	r0, r3
 80070be:	f7ff ff6e 	bl	8006f9e <shellWriteString>
        }
        shellWriteString(shell, shell->info.user->data.user.name);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	0011      	movs	r1, r2
 80070cc:	0018      	movs	r0, r3
 80070ce:	f7ff ff66 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, ":");
 80070d2:	4a13      	ldr	r2, [pc, #76]	; (8007120 <shellWritePrompt+0x90>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	0011      	movs	r1, r2
 80070d8:	0018      	movs	r0, r3
 80070da:	f7ff ff60 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, shell->info.path ? shell->info.path : "/");
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <shellWritePrompt+0x5c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	e000      	b.n	80070ee <shellWritePrompt+0x5e>
 80070ec:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <shellWritePrompt+0x94>)
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	0019      	movs	r1, r3
 80070f2:	0010      	movs	r0, r2
 80070f4:	f7ff ff53 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, "$ ");
 80070f8:	4a0b      	ldr	r2, [pc, #44]	; (8007128 <shellWritePrompt+0x98>)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	0011      	movs	r1, r2
 80070fe:	0018      	movs	r0, r3
 8007100:	f7ff ff4d 	bl	8006f9e <shellWriteString>
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_HINT]);
    }
}
 8007104:	e006      	b.n	8007114 <shellWritePrompt+0x84>
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_HINT]);
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <shellWritePrompt+0x9c>)
 8007108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0011      	movs	r1, r2
 800710e:	0018      	movs	r0, r3
 8007110:	f7ff ff45 	bl	8006f9e <shellWriteString>
}
 8007114:	46c0      	nop			; (mov r8, r8)
 8007116:	46bd      	mov	sp, r7
 8007118:	b002      	add	sp, #8
 800711a:	bd80      	pop	{r7, pc}
 800711c:	08009c38 	.word	0x08009c38
 8007120:	08009c3c 	.word	0x08009c3c
 8007124:	08009c40 	.word	0x08009c40
 8007128:	08009c44 	.word	0x08009c44
 800712c:	20000010 	.word	0x20000010

08007130 <shellCheckPermission>:
 * 
 * @return signed char 0 当前用户具有该命令权限
 * @return signec char -1 当前用户不具有该命令权限
 */
signed char shellCheckPermission(Shell *shell, ShellCommand *command)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
    return ((!command->attr.attrs.permission
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
                || (shell->info.user
                    && (command->attr.attrs.permission 
                        & shell->info.user->attr.attrs.permission)))
            && (shell->status.isChecked
                || command->attr.attrs.enableUnchecked))
            ? 0 : -1;
 800713e:	2b00      	cmp	r3, #0
 8007140:	d013      	beq.n	800716a <shellCheckPermission+0x3a>
                || command->attr.attrs.type == SHELL_TYPE_USER
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	220f      	movs	r2, #15
 8007148:	4013      	ands	r3, r2
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b08      	cmp	r3, #8
 800714e:	d00c      	beq.n	800716a <shellCheckPermission+0x3a>
                || (shell->info.user
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d019      	beq.n	800718c <shellCheckPermission+0x5c>
                    && (command->attr.attrs.permission 
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781a      	ldrb	r2, [r3, #0]
                        & shell->info.user->attr.attrs.permission)))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
                    && (command->attr.attrs.permission 
 8007162:	4013      	ands	r3, r2
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d010      	beq.n	800718c <shellCheckPermission+0x5c>
            && (shell->status.isChecked
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2260      	movs	r2, #96	; 0x60
 800716e:	5c9b      	ldrb	r3, [r3, r2]
 8007170:	2201      	movs	r2, #1
 8007172:	4013      	ands	r3, r2
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d106      	bne.n	8007188 <shellCheckPermission+0x58>
                || command->attr.attrs.enableUnchecked))
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2210      	movs	r2, #16
 8007180:	4013      	ands	r3, r2
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <shellCheckPermission+0x5c>
            ? 0 : -1;
 8007188:	2300      	movs	r3, #0
 800718a:	e001      	b.n	8007190 <shellCheckPermission+0x60>
 800718c:	2301      	movs	r3, #1
 800718e:	425b      	negs	r3, r3
}
 8007190:	0018      	movs	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	b002      	add	sp, #8
 8007196:	bd80      	pop	{r7, pc}

08007198 <shellToHex>:
 * @param buffer 缓冲
 * 
 * @return signed char 转换后有效数据长度
 */
signed char shellToHex(unsigned int value, char *buffer)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
    char byte;
    unsigned char i = 8;
 80071a2:	230f      	movs	r3, #15
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	2208      	movs	r2, #8
 80071a8:	701a      	strb	r2, [r3, #0]
    buffer[8] = 0;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
    while (value)
 80071b2:	e023      	b.n	80071fc <shellToHex+0x64>
    {
        byte = value & 0x0000000F;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	200e      	movs	r0, #14
 80071ba:	183b      	adds	r3, r7, r0
 80071bc:	210f      	movs	r1, #15
 80071be:	400a      	ands	r2, r1
 80071c0:	701a      	strb	r2, [r3, #0]
        buffer[--i] = (byte > 9) ? (byte + 87) : (byte + 48);
 80071c2:	0002      	movs	r2, r0
 80071c4:	18bb      	adds	r3, r7, r2
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d904      	bls.n	80071d6 <shellToHex+0x3e>
 80071cc:	18bb      	adds	r3, r7, r2
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	3357      	adds	r3, #87	; 0x57
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	e004      	b.n	80071e0 <shellToHex+0x48>
 80071d6:	230e      	movs	r3, #14
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	3330      	adds	r3, #48	; 0x30
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	200f      	movs	r0, #15
 80071e2:	183a      	adds	r2, r7, r0
 80071e4:	1839      	adds	r1, r7, r0
 80071e6:	7809      	ldrb	r1, [r1, #0]
 80071e8:	3901      	subs	r1, #1
 80071ea:	7011      	strb	r1, [r2, #0]
 80071ec:	183a      	adds	r2, r7, r0
 80071ee:	7812      	ldrb	r2, [r2, #0]
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	188a      	adds	r2, r1, r2
 80071f4:	7013      	strb	r3, [r2, #0]
        value >>= 4;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	091b      	lsrs	r3, r3, #4
 80071fa:	607b      	str	r3, [r7, #4]
    while (value)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1d8      	bne.n	80071b4 <shellToHex+0x1c>
    }
    return 8 - i;
 8007202:	230f      	movs	r3, #15
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2208      	movs	r2, #8
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	b2db      	uxtb	r3, r3
 800720e:	b25b      	sxtb	r3, r3
}
 8007210:	0018      	movs	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	b004      	add	sp, #16
 8007216:	bd80      	pop	{r7, pc}

08007218 <shellToDec>:
 * @param buffer 缓冲
 * 
 * @return signed char 转换后有效数据长度
 */
signed char shellToDec(int value, char *buffer)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
    unsigned char i = 11;
 8007222:	230f      	movs	r3, #15
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	220b      	movs	r2, #11
 8007228:	701a      	strb	r2, [r3, #0]
    int v = value;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60bb      	str	r3, [r7, #8]
    if (value < 0)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	da02      	bge.n	800723a <shellToDec+0x22>
    {
        v = -value;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	425b      	negs	r3, r3
 8007238:	60bb      	str	r3, [r7, #8]
    }
    buffer[11] = 0;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	330b      	adds	r3, #11
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
    while (v)
 8007242:	e01a      	b.n	800727a <shellToDec+0x62>
    {
        buffer[--i] = v % 10 + 48;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	210a      	movs	r1, #10
 8007248:	0018      	movs	r0, r3
 800724a:	f7f9 f8df 	bl	800040c <__aeabi_idivmod>
 800724e:	000b      	movs	r3, r1
 8007250:	b2da      	uxtb	r2, r3
 8007252:	200f      	movs	r0, #15
 8007254:	183b      	adds	r3, r7, r0
 8007256:	1839      	adds	r1, r7, r0
 8007258:	7809      	ldrb	r1, [r1, #0]
 800725a:	3901      	subs	r1, #1
 800725c:	7019      	strb	r1, [r3, #0]
 800725e:	183b      	adds	r3, r7, r0
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	18cb      	adds	r3, r1, r3
 8007266:	3230      	adds	r2, #48	; 0x30
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]
        v /= 10;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	210a      	movs	r1, #10
 8007270:	0018      	movs	r0, r3
 8007272:	f7f8 ffe5 	bl	8000240 <__divsi3>
 8007276:	0003      	movs	r3, r0
 8007278:	60bb      	str	r3, [r7, #8]
    while (v)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e1      	bne.n	8007244 <shellToDec+0x2c>
    }
    if (value < 0)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	da0b      	bge.n	800729e <shellToDec+0x86>
    {
        buffer[--i] = '-';
 8007286:	210f      	movs	r1, #15
 8007288:	187b      	adds	r3, r7, r1
 800728a:	187a      	adds	r2, r7, r1
 800728c:	7812      	ldrb	r2, [r2, #0]
 800728e:	3a01      	subs	r2, #1
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	187b      	adds	r3, r7, r1
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	18d3      	adds	r3, r2, r3
 800729a:	222d      	movs	r2, #45	; 0x2d
 800729c:	701a      	strb	r2, [r3, #0]
    }
    if (value == 0) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <shellToDec+0xa4>
        buffer[--i] = '0';
 80072a4:	210f      	movs	r1, #15
 80072a6:	187b      	adds	r3, r7, r1
 80072a8:	187a      	adds	r2, r7, r1
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	3a01      	subs	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	18d3      	adds	r3, r2, r3
 80072b8:	2230      	movs	r2, #48	; 0x30
 80072ba:	701a      	strb	r2, [r3, #0]
    }
    return 11 - i;
 80072bc:	230f      	movs	r3, #15
 80072be:	18fb      	adds	r3, r7, r3
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	220b      	movs	r2, #11
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	b25b      	sxtb	r3, r3
}
 80072ca:	0018      	movs	r0, r3
 80072cc:	46bd      	mov	sp, r7
 80072ce:	b004      	add	sp, #16
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <shellStringCopy>:
 * @param dest 目标字符串
 * @param src 源字符串
 * @return unsigned short 字符串长度
 */
static unsigned short shellStringCopy(char *dest, char* src)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
    unsigned short count = 0;
 80072dc:	230e      	movs	r3, #14
 80072de:	18fb      	adds	r3, r7, r3
 80072e0:	2200      	movs	r2, #0
 80072e2:	801a      	strh	r2, [r3, #0]
    while (*(src + count))
 80072e4:	e00f      	b.n	8007306 <shellStringCopy+0x34>
    {
        *(dest + count) = *(src + count);
 80072e6:	200e      	movs	r0, #14
 80072e8:	183b      	adds	r3, r7, r0
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	18d2      	adds	r2, r2, r3
 80072f0:	183b      	adds	r3, r7, r0
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	18cb      	adds	r3, r1, r3
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	701a      	strb	r2, [r3, #0]
        count++;
 80072fc:	183b      	adds	r3, r7, r0
 80072fe:	881a      	ldrh	r2, [r3, #0]
 8007300:	183b      	adds	r3, r7, r0
 8007302:	3201      	adds	r2, #1
 8007304:	801a      	strh	r2, [r3, #0]
    while (*(src + count))
 8007306:	210e      	movs	r1, #14
 8007308:	187b      	adds	r3, r7, r1
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	18d3      	adds	r3, r2, r3
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e7      	bne.n	80072e6 <shellStringCopy+0x14>
    }
    *(dest + count) = 0;
 8007316:	187b      	adds	r3, r7, r1
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	18d3      	adds	r3, r2, r3
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
    return count;
 8007322:	187b      	adds	r3, r7, r1
 8007324:	881b      	ldrh	r3, [r3, #0]
}
 8007326:	0018      	movs	r0, r3
 8007328:	46bd      	mov	sp, r7
 800732a:	b004      	add	sp, #16
 800732c:	bd80      	pop	{r7, pc}

0800732e <shellStringCompare>:
 * @param dest 目标字符串
 * @param src 源字符串
 * @return unsigned short 匹配长度
 */
static unsigned short shellStringCompare(char* dest, char *src)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
    unsigned short match = 0;
 8007338:	230e      	movs	r3, #14
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	2200      	movs	r2, #0
 800733e:	801a      	strh	r2, [r3, #0]
    unsigned short i = 0;
 8007340:	230c      	movs	r3, #12
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2200      	movs	r2, #0
 8007346:	801a      	strh	r2, [r3, #0]

    while (*(dest +i) && *(src + i))
 8007348:	e017      	b.n	800737a <shellStringCompare+0x4c>
    {
        if (*(dest + i) != *(src +i))
 800734a:	200c      	movs	r0, #12
 800734c:	183b      	adds	r3, r7, r0
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	18d3      	adds	r3, r2, r3
 8007354:	781a      	ldrb	r2, [r3, #0]
 8007356:	183b      	adds	r3, r7, r0
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	18cb      	adds	r3, r1, r3
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d11a      	bne.n	800739a <shellStringCompare+0x6c>
        {
            break;
        }
        match ++;
 8007364:	210e      	movs	r1, #14
 8007366:	187b      	adds	r3, r7, r1
 8007368:	881a      	ldrh	r2, [r3, #0]
 800736a:	187b      	adds	r3, r7, r1
 800736c:	3201      	adds	r2, #1
 800736e:	801a      	strh	r2, [r3, #0]
        i++;
 8007370:	183b      	adds	r3, r7, r0
 8007372:	881a      	ldrh	r2, [r3, #0]
 8007374:	183b      	adds	r3, r7, r0
 8007376:	3201      	adds	r2, #1
 8007378:	801a      	strh	r2, [r3, #0]
    while (*(dest +i) && *(src + i))
 800737a:	210c      	movs	r1, #12
 800737c:	187b      	adds	r3, r7, r1
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	18d3      	adds	r3, r2, r3
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <shellStringCompare+0x6e>
 800738a:	187b      	adds	r3, r7, r1
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	18d3      	adds	r3, r2, r3
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1d8      	bne.n	800734a <shellStringCompare+0x1c>
 8007398:	e000      	b.n	800739c <shellStringCompare+0x6e>
            break;
 800739a:	46c0      	nop			; (mov r8, r8)
    }
    return match;
 800739c:	230e      	movs	r3, #14
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	881b      	ldrh	r3, [r3, #0]
}
 80073a2:	0018      	movs	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b004      	add	sp, #16
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <shellGetCommandName>:
 * 
 * @param command 命令
 * @return const char* 命令名
 */
static const char* shellGetCommandName(ShellCommand *command)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
    static char buffer[9];
    for (unsigned char i = 0; i < 9; i++)
 80073b4:	230f      	movs	r3, #15
 80073b6:	18fb      	adds	r3, r7, r3
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	e00a      	b.n	80073d4 <shellGetCommandName+0x28>
    {
        buffer[i] = '0';
 80073be:	200f      	movs	r0, #15
 80073c0:	183b      	adds	r3, r7, r0
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	4a1b      	ldr	r2, [pc, #108]	; (8007434 <shellGetCommandName+0x88>)
 80073c6:	2130      	movs	r1, #48	; 0x30
 80073c8:	54d1      	strb	r1, [r2, r3]
    for (unsigned char i = 0; i < 9; i++)
 80073ca:	183b      	adds	r3, r7, r0
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	183b      	adds	r3, r7, r0
 80073d0:	3201      	adds	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	230f      	movs	r3, #15
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d9ef      	bls.n	80073be <shellGetCommandName+0x12>
    }
    if (command->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	071b      	lsls	r3, r3, #28
 80073e4:	0f1b      	lsrs	r3, r3, #28
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d802      	bhi.n	80073f2 <shellGetCommandName+0x46>
    {
        return command->data.cmd.name;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	e01c      	b.n	800742c <shellGetCommandName+0x80>
    }
    else if (command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	785b      	ldrb	r3, [r3, #1]
 80073f6:	071b      	lsls	r3, r3, #28
 80073f8:	0f1b      	lsrs	r3, r3, #28
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b07      	cmp	r3, #7
 80073fe:	d802      	bhi.n	8007406 <shellGetCommandName+0x5a>
    {
        return command->data.var.name;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	e012      	b.n	800742c <shellGetCommandName+0x80>
    }
    else if (command->attr.attrs.type <= SHELL_TYPE_USER)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	071b      	lsls	r3, r3, #28
 800740c:	0f1b      	lsrs	r3, r3, #28
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b08      	cmp	r3, #8
 8007412:	d802      	bhi.n	800741a <shellGetCommandName+0x6e>
    {
        return command->data.user.name;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	e008      	b.n	800742c <shellGetCommandName+0x80>
        return command->data.paramParser.type;
    }
#endif
    else
    {
        shellToHex(command->data.key.value, buffer);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	001a      	movs	r2, r3
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <shellGetCommandName+0x88>)
 8007422:	0019      	movs	r1, r3
 8007424:	0010      	movs	r0, r2
 8007426:	f7ff feb7 	bl	8007198 <shellToHex>
        return buffer;
 800742a:	4b02      	ldr	r3, [pc, #8]	; (8007434 <shellGetCommandName+0x88>)
    }
}
 800742c:	0018      	movs	r0, r3
 800742e:	46bd      	mov	sp, r7
 8007430:	b004      	add	sp, #16
 8007432:	bd80      	pop	{r7, pc}
 8007434:	2000161c 	.word	0x2000161c

08007438 <shellGetCommandDesc>:
 * 
 * @param command 命令
 * @return const char* 命令描述
 */
static const char* shellGetCommandDesc(ShellCommand *command)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
    if (command->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	071b      	lsls	r3, r3, #28
 8007446:	0f1b      	lsrs	r3, r3, #28
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b01      	cmp	r3, #1
 800744c:	d802      	bhi.n	8007454 <shellGetCommandDesc+0x1c>
    {
        return command->data.cmd.desc;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	e015      	b.n	8007480 <shellGetCommandDesc+0x48>
    }
    else if (command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	785b      	ldrb	r3, [r3, #1]
 8007458:	071b      	lsls	r3, r3, #28
 800745a:	0f1b      	lsrs	r3, r3, #28
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b07      	cmp	r3, #7
 8007460:	d802      	bhi.n	8007468 <shellGetCommandDesc+0x30>
    {
        return command->data.var.desc;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	e00b      	b.n	8007480 <shellGetCommandDesc+0x48>
    }
    else if (command->attr.attrs.type <= SHELL_TYPE_USER)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	071b      	lsls	r3, r3, #28
 800746e:	0f1b      	lsrs	r3, r3, #28
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b08      	cmp	r3, #8
 8007474:	d802      	bhi.n	800747c <shellGetCommandDesc+0x44>
    {
        return command->data.user.desc;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	e001      	b.n	8007480 <shellGetCommandDesc+0x48>
    }
    else
    {
        return command->data.key.desc;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
    }
}
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	b002      	add	sp, #8
 8007486:	bd80      	pop	{r7, pc}

08007488 <shellListItem>:
 * 
 * @param shell shell对象
 * @param item 命令条目
 */
void shellListItem(Shell *shell, ShellCommand *item)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
    short spaceLength;

    spaceLength = 22 - shellWriteString(shell, shellGetCommandName(item));
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	0018      	movs	r0, r3
 8007496:	f7ff ff89 	bl	80073ac <shellGetCommandName>
 800749a:	0002      	movs	r2, r0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	0011      	movs	r1, r2
 80074a0:	0018      	movs	r0, r3
 80074a2:	f7ff fd7c 	bl	8006f9e <shellWriteString>
 80074a6:	0003      	movs	r3, r0
 80074a8:	001a      	movs	r2, r3
 80074aa:	2316      	movs	r3, #22
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	210e      	movs	r1, #14
 80074b2:	187b      	adds	r3, r7, r1
 80074b4:	801a      	strh	r2, [r3, #0]
    spaceLength = (spaceLength > 0) ? spaceLength : 4;
 80074b6:	000a      	movs	r2, r1
 80074b8:	18bb      	adds	r3, r7, r2
 80074ba:	2100      	movs	r1, #0
 80074bc:	5e5b      	ldrsh	r3, [r3, r1]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dd03      	ble.n	80074ca <shellListItem+0x42>
 80074c2:	18bb      	adds	r3, r7, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	5e9a      	ldrsh	r2, [r3, r2]
 80074c8:	e000      	b.n	80074cc <shellListItem+0x44>
 80074ca:	2204      	movs	r2, #4
 80074cc:	230e      	movs	r3, #14
 80074ce:	18fb      	adds	r3, r7, r3
 80074d0:	801a      	strh	r2, [r3, #0]
    do {
        shellWriteByte(shell, ' ');
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2120      	movs	r1, #32
 80074d6:	0018      	movs	r0, r3
 80074d8:	f7ff fd50 	bl	8006f7c <shellWriteByte>
    } while (--spaceLength);
 80074dc:	210e      	movs	r1, #14
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	187b      	adds	r3, r7, r1
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	187b      	adds	r3, r7, r1
 80074ec:	2200      	movs	r2, #0
 80074ee:	5e9b      	ldrsh	r3, [r3, r2]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1ee      	bne.n	80074d2 <shellListItem+0x4a>
    if (item->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	071b      	lsls	r3, r3, #28
 80074fa:	0f1b      	lsrs	r3, r3, #28
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d807      	bhi.n	8007512 <shellListItem+0x8a>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_CMD]);
 8007502:	4b41      	ldr	r3, [pc, #260]	; (8007608 <shellListItem+0x180>)
 8007504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	0011      	movs	r1, r2
 800750a:	0018      	movs	r0, r3
 800750c:	f7ff fd47 	bl	8006f9e <shellWriteString>
 8007510:	e033      	b.n	800757a <shellListItem+0xf2>
    }
    else if (item->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	071b      	lsls	r3, r3, #28
 8007518:	0f1b      	lsrs	r3, r3, #28
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b07      	cmp	r3, #7
 800751e:	d807      	bhi.n	8007530 <shellListItem+0xa8>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_VAR]);
 8007520:	4b39      	ldr	r3, [pc, #228]	; (8007608 <shellListItem+0x180>)
 8007522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	0011      	movs	r1, r2
 8007528:	0018      	movs	r0, r3
 800752a:	f7ff fd38 	bl	8006f9e <shellWriteString>
 800752e:	e024      	b.n	800757a <shellListItem+0xf2>
    }
    else if (item->attr.attrs.type <= SHELL_TYPE_USER)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	071b      	lsls	r3, r3, #28
 8007536:	0f1b      	lsrs	r3, r3, #28
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b08      	cmp	r3, #8
 800753c:	d807      	bhi.n	800754e <shellListItem+0xc6>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_USER]);
 800753e:	4b32      	ldr	r3, [pc, #200]	; (8007608 <shellListItem+0x180>)
 8007540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	0011      	movs	r1, r2
 8007546:	0018      	movs	r0, r3
 8007548:	f7ff fd29 	bl	8006f9e <shellWriteString>
 800754c:	e015      	b.n	800757a <shellListItem+0xf2>
    }
    else if (item->attr.attrs.type <= SHELL_TYPE_KEY)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	071b      	lsls	r3, r3, #28
 8007554:	0f1b      	lsrs	r3, r3, #28
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b09      	cmp	r3, #9
 800755a:	d807      	bhi.n	800756c <shellListItem+0xe4>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_KEY]);
 800755c:	4b2a      	ldr	r3, [pc, #168]	; (8007608 <shellListItem+0x180>)
 800755e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	0011      	movs	r1, r2
 8007564:	0018      	movs	r0, r3
 8007566:	f7ff fd1a 	bl	8006f9e <shellWriteString>
 800756a:	e006      	b.n	800757a <shellListItem+0xf2>
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_NONE]);
 800756c:	4b26      	ldr	r3, [pc, #152]	; (8007608 <shellListItem+0x180>)
 800756e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	0011      	movs	r1, r2
 8007574:	0018      	movs	r0, r3
 8007576:	f7ff fd12 	bl	8006f9e <shellWriteString>
    }
#if SHELL_HELP_SHOW_PERMISSION == 1
    shellWriteString(shell, "  ");
 800757a:	4a24      	ldr	r2, [pc, #144]	; (800760c <shellListItem+0x184>)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	0011      	movs	r1, r2
 8007580:	0018      	movs	r0, r3
 8007582:	f7ff fd0c 	bl	8006f9e <shellWriteString>
    for (signed char i = 7; i >= 0; i--)
 8007586:	230d      	movs	r3, #13
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	2207      	movs	r2, #7
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	e01c      	b.n	80075ca <shellListItem+0x142>
    {
        shellWriteByte(shell, item->attr.attrs.permission & (1 << i) ? 'x' : '-');
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	001a      	movs	r2, r3
 8007596:	230d      	movs	r3, #13
 8007598:	18fb      	adds	r3, r7, r3
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b25b      	sxtb	r3, r3
 800759e:	411a      	asrs	r2, r3
 80075a0:	0013      	movs	r3, r2
 80075a2:	2201      	movs	r2, #1
 80075a4:	4013      	ands	r3, r2
 80075a6:	d001      	beq.n	80075ac <shellListItem+0x124>
 80075a8:	2378      	movs	r3, #120	; 0x78
 80075aa:	e000      	b.n	80075ae <shellListItem+0x126>
 80075ac:	232d      	movs	r3, #45	; 0x2d
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	0019      	movs	r1, r3
 80075b2:	0010      	movs	r0, r2
 80075b4:	f7ff fce2 	bl	8006f7c <shellWriteByte>
    for (signed char i = 7; i >= 0; i--)
 80075b8:	210d      	movs	r1, #13
 80075ba:	187b      	adds	r3, r7, r1
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	187b      	adds	r3, r7, r1
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	230d      	movs	r3, #13
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b7f      	cmp	r3, #127	; 0x7f
 80075d2:	d9dd      	bls.n	8007590 <shellListItem+0x108>
    }
#endif
    shellWriteString(shell, "  ");
 80075d4:	4a0d      	ldr	r2, [pc, #52]	; (800760c <shellListItem+0x184>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	0011      	movs	r1, r2
 80075da:	0018      	movs	r0, r3
 80075dc:	f7ff fcdf 	bl	8006f9e <shellWriteString>
    shellWriteCommandDesc(shell, shellGetCommandDesc(item));
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	0018      	movs	r0, r3
 80075e4:	f7ff ff28 	bl	8007438 <shellGetCommandDesc>
 80075e8:	0002      	movs	r2, r0
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	0011      	movs	r1, r2
 80075ee:	0018      	movs	r0, r3
 80075f0:	f7ff fd00 	bl	8006ff4 <shellWriteCommandDesc>
    shellWriteString(shell, "\r\n");
 80075f4:	4a06      	ldr	r2, [pc, #24]	; (8007610 <shellListItem+0x188>)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0011      	movs	r1, r2
 80075fa:	0018      	movs	r0, r3
 80075fc:	f7ff fccf 	bl	8006f9e <shellWriteString>
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b004      	add	sp, #16
 8007606:	bd80      	pop	{r7, pc}
 8007608:	20000010 	.word	0x20000010
 800760c:	08009c48 	.word	0x08009c48
 8007610:	08009c38 	.word	0x08009c38

08007614 <shellListCommand>:
 * @brief shell列出可执行命令
 * 
 * @param shell shell对象
 */
void shellListCommand(Shell *shell)
{
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007620:	60bb      	str	r3, [r7, #8]
    shellWriteString(shell, shellText[SHELL_TEXT_CMD_LIST]);
 8007622:	4b24      	ldr	r3, [pc, #144]	; (80076b4 <shellListCommand+0xa0>)
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	0011      	movs	r1, r2
 800762a:	0018      	movs	r0, r3
 800762c:	f7ff fcb7 	bl	8006f9e <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 8007630:	230e      	movs	r3, #14
 8007632:	18fb      	adds	r3, r7, r3
 8007634:	2200      	movs	r2, #0
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	e02e      	b.n	8007698 <shellListCommand+0x84>
    {
        if (base[i].attr.attrs.type <= SHELL_TYPE_CMD_FUNC
 800763a:	210e      	movs	r1, #14
 800763c:	187b      	adds	r3, r7, r1
 800763e:	2200      	movs	r2, #0
 8007640:	5e9b      	ldrsh	r3, [r3, r2]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	18d3      	adds	r3, r2, r3
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	071b      	lsls	r3, r3, #28
 800764c:	0f1b      	lsrs	r3, r3, #28
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b01      	cmp	r3, #1
 8007652:	d818      	bhi.n	8007686 <shellListCommand+0x72>
            && shellCheckPermission(shell, &base[i]) == 0)
 8007654:	000c      	movs	r4, r1
 8007656:	187b      	adds	r3, r7, r1
 8007658:	2200      	movs	r2, #0
 800765a:	5e9b      	ldrsh	r3, [r3, r2]
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	18d2      	adds	r2, r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	0011      	movs	r1, r2
 8007666:	0018      	movs	r0, r3
 8007668:	f7ff fd62 	bl	8007130 <shellCheckPermission>
 800766c:	1e03      	subs	r3, r0, #0
 800766e:	d10a      	bne.n	8007686 <shellListCommand+0x72>
        {
            shellListItem(shell, &base[i]);
 8007670:	193b      	adds	r3, r7, r4
 8007672:	2200      	movs	r2, #0
 8007674:	5e9b      	ldrsh	r3, [r3, r2]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	18d2      	adds	r2, r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	0011      	movs	r1, r2
 8007680:	0018      	movs	r0, r3
 8007682:	f7ff ff01 	bl	8007488 <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 8007686:	210e      	movs	r1, #14
 8007688:	187b      	adds	r3, r7, r1
 800768a:	2200      	movs	r2, #0
 800768c:	5e9b      	ldrsh	r3, [r3, r2]
 800768e:	b29b      	uxth	r3, r3
 8007690:	3301      	adds	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	187b      	adds	r3, r7, r1
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	230e      	movs	r3, #14
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	2200      	movs	r2, #0
 800769e:	5e9b      	ldrsh	r3, [r3, r2]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	215c      	movs	r1, #92	; 0x5c
 80076a4:	5a52      	ldrh	r2, [r2, r1]
 80076a6:	4293      	cmp	r3, r2
 80076a8:	dbc7      	blt.n	800763a <shellListCommand+0x26>
        }
    }
}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	46c0      	nop			; (mov r8, r8)
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b005      	add	sp, #20
 80076b2:	bd90      	pop	{r4, r7, pc}
 80076b4:	20000010 	.word	0x20000010

080076b8 <shellListVar>:
 * @brief shell列出变量
 * 
 * @param shell shell对象
 */
void shellListVar(Shell *shell)
{
 80076b8:	b590      	push	{r4, r7, lr}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c4:	60bb      	str	r3, [r7, #8]
    shellWriteString(shell, shellText[SHELL_TEXT_VAR_LIST]);
 80076c6:	4b2a      	ldr	r3, [pc, #168]	; (8007770 <shellListVar+0xb8>)
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	0011      	movs	r1, r2
 80076ce:	0018      	movs	r0, r3
 80076d0:	f7ff fc65 	bl	8006f9e <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 80076d4:	230e      	movs	r3, #14
 80076d6:	18fb      	adds	r3, r7, r3
 80076d8:	2200      	movs	r2, #0
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	e03a      	b.n	8007754 <shellListVar+0x9c>
    {
        if (base[i].attr.attrs.type > SHELL_TYPE_CMD_FUNC
 80076de:	210e      	movs	r1, #14
 80076e0:	187b      	adds	r3, r7, r1
 80076e2:	2200      	movs	r2, #0
 80076e4:	5e9b      	ldrsh	r3, [r3, r2]
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	18d3      	adds	r3, r2, r3
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	071b      	lsls	r3, r3, #28
 80076f0:	0f1b      	lsrs	r3, r3, #28
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d924      	bls.n	8007742 <shellListVar+0x8a>
            && base[i].attr.attrs.type <= SHELL_TYPE_VAR_NODE
 80076f8:	187b      	adds	r3, r7, r1
 80076fa:	2200      	movs	r2, #0
 80076fc:	5e9b      	ldrsh	r3, [r3, r2]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	18d3      	adds	r3, r2, r3
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	071b      	lsls	r3, r3, #28
 8007708:	0f1b      	lsrs	r3, r3, #28
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b07      	cmp	r3, #7
 800770e:	d818      	bhi.n	8007742 <shellListVar+0x8a>
            && shellCheckPermission(shell, &base[i]) == 0)
 8007710:	000c      	movs	r4, r1
 8007712:	187b      	adds	r3, r7, r1
 8007714:	2200      	movs	r2, #0
 8007716:	5e9b      	ldrsh	r3, [r3, r2]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	18d2      	adds	r2, r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	0011      	movs	r1, r2
 8007722:	0018      	movs	r0, r3
 8007724:	f7ff fd04 	bl	8007130 <shellCheckPermission>
 8007728:	1e03      	subs	r3, r0, #0
 800772a:	d10a      	bne.n	8007742 <shellListVar+0x8a>
        {
            shellListItem(shell, &base[i]);
 800772c:	193b      	adds	r3, r7, r4
 800772e:	2200      	movs	r2, #0
 8007730:	5e9b      	ldrsh	r3, [r3, r2]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	18d2      	adds	r2, r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	0011      	movs	r1, r2
 800773c:	0018      	movs	r0, r3
 800773e:	f7ff fea3 	bl	8007488 <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 8007742:	210e      	movs	r1, #14
 8007744:	187b      	adds	r3, r7, r1
 8007746:	2200      	movs	r2, #0
 8007748:	5e9b      	ldrsh	r3, [r3, r2]
 800774a:	b29b      	uxth	r3, r3
 800774c:	3301      	adds	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	187b      	adds	r3, r7, r1
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	230e      	movs	r3, #14
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	2200      	movs	r2, #0
 800775a:	5e9b      	ldrsh	r3, [r3, r2]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	215c      	movs	r1, #92	; 0x5c
 8007760:	5a52      	ldrh	r2, [r2, r1]
 8007762:	4293      	cmp	r3, r2
 8007764:	dbbb      	blt.n	80076de <shellListVar+0x26>
        }
    }
}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	46c0      	nop			; (mov r8, r8)
 800776a:	46bd      	mov	sp, r7
 800776c:	b005      	add	sp, #20
 800776e:	bd90      	pop	{r4, r7, pc}
 8007770:	20000010 	.word	0x20000010

08007774 <shellListUser>:
 * @brief shell列出用户
 * 
 * @param shell shell对象
 */
void shellListUser(Shell *shell)
{
 8007774:	b590      	push	{r4, r7, lr}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007780:	60bb      	str	r3, [r7, #8]
    shellWriteString(shell, shellText[SHELL_TEXT_USER_LIST]);
 8007782:	4b2a      	ldr	r3, [pc, #168]	; (800782c <shellListUser+0xb8>)
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	0011      	movs	r1, r2
 800778a:	0018      	movs	r0, r3
 800778c:	f7ff fc07 	bl	8006f9e <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 8007790:	230e      	movs	r3, #14
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	2200      	movs	r2, #0
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e03a      	b.n	8007810 <shellListUser+0x9c>
    {
        if (base[i].attr.attrs.type > SHELL_TYPE_VAR_NODE
 800779a:	210e      	movs	r1, #14
 800779c:	187b      	adds	r3, r7, r1
 800779e:	2200      	movs	r2, #0
 80077a0:	5e9b      	ldrsh	r3, [r3, r2]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	18d3      	adds	r3, r2, r3
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	071b      	lsls	r3, r3, #28
 80077ac:	0f1b      	lsrs	r3, r3, #28
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	d924      	bls.n	80077fe <shellListUser+0x8a>
            && base[i].attr.attrs.type <= SHELL_TYPE_USER
 80077b4:	187b      	adds	r3, r7, r1
 80077b6:	2200      	movs	r2, #0
 80077b8:	5e9b      	ldrsh	r3, [r3, r2]
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	18d3      	adds	r3, r2, r3
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	071b      	lsls	r3, r3, #28
 80077c4:	0f1b      	lsrs	r3, r3, #28
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d818      	bhi.n	80077fe <shellListUser+0x8a>
            && shellCheckPermission(shell, &base[i]) == 0)
 80077cc:	000c      	movs	r4, r1
 80077ce:	187b      	adds	r3, r7, r1
 80077d0:	2200      	movs	r2, #0
 80077d2:	5e9b      	ldrsh	r3, [r3, r2]
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	18d2      	adds	r2, r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0011      	movs	r1, r2
 80077de:	0018      	movs	r0, r3
 80077e0:	f7ff fca6 	bl	8007130 <shellCheckPermission>
 80077e4:	1e03      	subs	r3, r0, #0
 80077e6:	d10a      	bne.n	80077fe <shellListUser+0x8a>
        {
            shellListItem(shell, &base[i]);
 80077e8:	193b      	adds	r3, r7, r4
 80077ea:	2200      	movs	r2, #0
 80077ec:	5e9b      	ldrsh	r3, [r3, r2]
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	18d2      	adds	r2, r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	0011      	movs	r1, r2
 80077f8:	0018      	movs	r0, r3
 80077fa:	f7ff fe45 	bl	8007488 <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 80077fe:	210e      	movs	r1, #14
 8007800:	187b      	adds	r3, r7, r1
 8007802:	2200      	movs	r2, #0
 8007804:	5e9b      	ldrsh	r3, [r3, r2]
 8007806:	b29b      	uxth	r3, r3
 8007808:	3301      	adds	r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	187b      	adds	r3, r7, r1
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	230e      	movs	r3, #14
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	2200      	movs	r2, #0
 8007816:	5e9b      	ldrsh	r3, [r3, r2]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	215c      	movs	r1, #92	; 0x5c
 800781c:	5a52      	ldrh	r2, [r2, r1]
 800781e:	4293      	cmp	r3, r2
 8007820:	dbbb      	blt.n	800779a <shellListUser+0x26>
        }
    }
}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	46bd      	mov	sp, r7
 8007828:	b005      	add	sp, #20
 800782a:	bd90      	pop	{r4, r7, pc}
 800782c:	20000010 	.word	0x20000010

08007830 <shellListKey>:
 * @brief shell列出按键
 * 
 * @param shell shell对象
 */
void shellListKey(Shell *shell)
{
 8007830:	b590      	push	{r4, r7, lr}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783c:	60bb      	str	r3, [r7, #8]
    shellWriteString(shell, shellText[SHELL_TEXT_KEY_LIST]);
 800783e:	4b2a      	ldr	r3, [pc, #168]	; (80078e8 <shellListKey+0xb8>)
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	0011      	movs	r1, r2
 8007846:	0018      	movs	r0, r3
 8007848:	f7ff fba9 	bl	8006f9e <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 800784c:	230e      	movs	r3, #14
 800784e:	18fb      	adds	r3, r7, r3
 8007850:	2200      	movs	r2, #0
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e03a      	b.n	80078cc <shellListKey+0x9c>
    {
        if (base[i].attr.attrs.type > SHELL_TYPE_USER
 8007856:	210e      	movs	r1, #14
 8007858:	187b      	adds	r3, r7, r1
 800785a:	2200      	movs	r2, #0
 800785c:	5e9b      	ldrsh	r3, [r3, r2]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	18d3      	adds	r3, r2, r3
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	071b      	lsls	r3, r3, #28
 8007868:	0f1b      	lsrs	r3, r3, #28
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b08      	cmp	r3, #8
 800786e:	d924      	bls.n	80078ba <shellListKey+0x8a>
            && base[i].attr.attrs.type <= SHELL_TYPE_KEY
 8007870:	187b      	adds	r3, r7, r1
 8007872:	2200      	movs	r2, #0
 8007874:	5e9b      	ldrsh	r3, [r3, r2]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	18d3      	adds	r3, r2, r3
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	071b      	lsls	r3, r3, #28
 8007880:	0f1b      	lsrs	r3, r3, #28
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b09      	cmp	r3, #9
 8007886:	d818      	bhi.n	80078ba <shellListKey+0x8a>
            && shellCheckPermission(shell, &base[i]) == 0)
 8007888:	000c      	movs	r4, r1
 800788a:	187b      	adds	r3, r7, r1
 800788c:	2200      	movs	r2, #0
 800788e:	5e9b      	ldrsh	r3, [r3, r2]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	18d2      	adds	r2, r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	0011      	movs	r1, r2
 800789a:	0018      	movs	r0, r3
 800789c:	f7ff fc48 	bl	8007130 <shellCheckPermission>
 80078a0:	1e03      	subs	r3, r0, #0
 80078a2:	d10a      	bne.n	80078ba <shellListKey+0x8a>
        {
            shellListItem(shell, &base[i]);
 80078a4:	193b      	adds	r3, r7, r4
 80078a6:	2200      	movs	r2, #0
 80078a8:	5e9b      	ldrsh	r3, [r3, r2]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	18d2      	adds	r2, r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	0011      	movs	r1, r2
 80078b4:	0018      	movs	r0, r3
 80078b6:	f7ff fde7 	bl	8007488 <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 80078ba:	210e      	movs	r1, #14
 80078bc:	187b      	adds	r3, r7, r1
 80078be:	2200      	movs	r2, #0
 80078c0:	5e9b      	ldrsh	r3, [r3, r2]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3301      	adds	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	187b      	adds	r3, r7, r1
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	230e      	movs	r3, #14
 80078ce:	18fb      	adds	r3, r7, r3
 80078d0:	2200      	movs	r2, #0
 80078d2:	5e9b      	ldrsh	r3, [r3, r2]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	215c      	movs	r1, #92	; 0x5c
 80078d8:	5a52      	ldrh	r2, [r2, r1]
 80078da:	4293      	cmp	r3, r2
 80078dc:	dbbb      	blt.n	8007856 <shellListKey+0x26>
        }
    }
}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	46c0      	nop			; (mov r8, r8)
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b005      	add	sp, #20
 80078e6:	bd90      	pop	{r4, r7, pc}
 80078e8:	20000010 	.word	0x20000010

080078ec <shellListAll>:
 * @brief shell列出所有命令
 * 
 * @param shell shell对象
 */
void shellListAll(Shell *shell)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
#if SHELL_HELP_LIST_USER == 1
    shellListUser(shell);
#endif
    shellListCommand(shell);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	0018      	movs	r0, r3
 80078f8:	f7ff fe8c 	bl	8007614 <shellListCommand>
#if SHELL_HELP_LIST_VAR == 1
    shellListVar(shell);
#endif
#if SHELL_HELP_LIST_KEY == 1
    shellListKey(shell);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	0018      	movs	r0, r3
 8007900:	f7ff ff96 	bl	8007830 <shellListKey>
#endif
}
 8007904:	46c0      	nop			; (mov r8, r8)
 8007906:	46bd      	mov	sp, r7
 8007908:	b002      	add	sp, #8
 800790a:	bd80      	pop	{r7, pc}

0800790c <shellDeleteCommandLine>:
 * 
 * @param shell shell对象
 * @param length 删除长度
 */
void shellDeleteCommandLine(Shell *shell, unsigned char length)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	000a      	movs	r2, r1
 8007916:	1cfb      	adds	r3, r7, #3
 8007918:	701a      	strb	r2, [r3, #0]
    while (length--)
 800791a:	e005      	b.n	8007928 <shellDeleteCommandLine+0x1c>
    {
        shellWriteString(shell, "\b \b");
 800791c:	4a08      	ldr	r2, [pc, #32]	; (8007940 <shellDeleteCommandLine+0x34>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	0011      	movs	r1, r2
 8007922:	0018      	movs	r0, r3
 8007924:	f7ff fb3b 	bl	8006f9e <shellWriteString>
    while (length--)
 8007928:	1cfb      	adds	r3, r7, #3
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	1cfa      	adds	r2, r7, #3
 800792e:	1e59      	subs	r1, r3, #1
 8007930:	7011      	strb	r1, [r2, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f2      	bne.n	800791c <shellDeleteCommandLine+0x10>
    }
}
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	46bd      	mov	sp, r7
 800793c:	b002      	add	sp, #8
 800793e:	bd80      	pop	{r7, pc}
 8007940:	08009c4c 	.word	0x08009c4c

08007944 <shellClearCommandLine>:
 * @brief shell 清空命令行输入
 * 
 * @param shell shell对象
 */
void shellClearCommandLine(Shell *shell)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
    for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	899a      	ldrh	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	89db      	ldrh	r3, [r3, #14]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	b29a      	uxth	r2, r3
 8007958:	230e      	movs	r3, #14
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	e00d      	b.n	800797c <shellClearCommandLine+0x38>
    {
        shellWriteByte(shell, ' ');
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2120      	movs	r1, #32
 8007964:	0018      	movs	r0, r3
 8007966:	f7ff fb09 	bl	8006f7c <shellWriteByte>
    for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800796a:	210e      	movs	r1, #14
 800796c:	187b      	adds	r3, r7, r1
 800796e:	2200      	movs	r2, #0
 8007970:	5e9b      	ldrsh	r3, [r3, r2]
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	187b      	adds	r3, r7, r1
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	230e      	movs	r3, #14
 800797e:	18fb      	adds	r3, r7, r3
 8007980:	2200      	movs	r2, #0
 8007982:	5e9b      	ldrsh	r3, [r3, r2]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dceb      	bgt.n	8007960 <shellClearCommandLine+0x1c>
    }
    shellDeleteCommandLine(shell, shell->parser.length);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	899b      	ldrh	r3, [r3, #12]
 800798c:	b2da      	uxtb	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	0011      	movs	r1, r2
 8007992:	0018      	movs	r0, r3
 8007994:	f7ff ffba 	bl	800790c <shellDeleteCommandLine>
}
 8007998:	46c0      	nop			; (mov r8, r8)
 800799a:	46bd      	mov	sp, r7
 800799c:	b004      	add	sp, #16
 800799e:	bd80      	pop	{r7, pc}

080079a0 <shellInsertByte>:
 * 
 * @param shell shell对象
 * @param data 字符数据
 */
void shellInsertByte(Shell *shell, char data)
{
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	000a      	movs	r2, r1
 80079aa:	1cfb      	adds	r3, r7, #3
 80079ac:	701a      	strb	r2, [r3, #0]
    /* 判断输入数据是否过长 */
    if (shell->parser.length >= shell->parser.bufferSize - 1)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	899b      	ldrh	r3, [r3, #12]
 80079b2:	001a      	movs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80079b8:	3b01      	subs	r3, #1
 80079ba:	429a      	cmp	r2, r3
 80079bc:	db13      	blt.n	80079e6 <shellInsertByte+0x46>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_TOO_LONG]);
 80079be:	4b73      	ldr	r3, [pc, #460]	; (8007b8c <shellInsertByte+0x1ec>)
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	0011      	movs	r1, r2
 80079c6:	0018      	movs	r0, r3
 80079c8:	f7ff fae9 	bl	8006f9e <shellWriteString>
        shellWritePrompt(shell, 1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2101      	movs	r1, #1
 80079d0:	0018      	movs	r0, r3
 80079d2:	f7ff fb5d 	bl	8007090 <shellWritePrompt>
        shellWriteString(shell, shell->parser.buffer);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	0011      	movs	r1, r2
 80079de:	0018      	movs	r0, r3
 80079e0:	f7ff fadd 	bl	8006f9e <shellWriteString>
        return;
 80079e4:	e0ce      	b.n	8007b84 <shellInsertByte+0x1e4>
    }

    /* 插入数据 */
    if (shell->parser.cursor == shell->parser.length)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	89da      	ldrh	r2, [r3, #14]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	899b      	ldrh	r3, [r3, #12]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d12a      	bne.n	8007a48 <shellInsertByte+0xa8>
    {
        shell->parser.buffer[shell->parser.length++] = data;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691a      	ldr	r2, [r3, #16]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	899b      	ldrh	r3, [r3, #12]
 80079fa:	1c59      	adds	r1, r3, #1
 80079fc:	b288      	uxth	r0, r1
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	8188      	strh	r0, [r1, #12]
 8007a02:	18d3      	adds	r3, r2, r3
 8007a04:	1cfa      	adds	r2, r7, #3
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	701a      	strb	r2, [r3, #0]
        shell->parser.buffer[shell->parser.length] = 0;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	8992      	ldrh	r2, [r2, #12]
 8007a12:	189b      	adds	r3, r3, r2
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
        shell->parser.cursor++;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	89db      	ldrh	r3, [r3, #14]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	81da      	strh	r2, [r3, #14]
        shellWriteByte(shell, shell->status.isChecked ? data : '*');
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2260      	movs	r2, #96	; 0x60
 8007a28:	5c9b      	ldrb	r3, [r3, r2]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <shellInsertByte+0x9a>
 8007a34:	1cfb      	adds	r3, r7, #3
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	e000      	b.n	8007a3c <shellInsertByte+0x9c>
 8007a3a:	232a      	movs	r3, #42	; 0x2a
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	0019      	movs	r1, r3
 8007a40:	0010      	movs	r0, r2
 8007a42:	f7ff fa9b 	bl	8006f7c <shellWriteByte>
 8007a46:	e09d      	b.n	8007b84 <shellInsertByte+0x1e4>
    }
    else if (shell->parser.cursor < shell->parser.length)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	89da      	ldrh	r2, [r3, #14]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	899b      	ldrh	r3, [r3, #12]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d300      	bcc.n	8007a56 <shellInsertByte+0xb6>
 8007a54:	e096      	b.n	8007b84 <shellInsertByte+0x1e4>
    {
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	899a      	ldrh	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	89db      	ldrh	r3, [r3, #14]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	230e      	movs	r3, #14
 8007a64:	18fb      	adds	r3, r7, r3
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e01f      	b.n	8007aaa <shellInsertByte+0x10a>
        {
            shell->parser.buffer[shell->parser.cursor + i] = 
                shell->parser.buffer[shell->parser.cursor + i - 1];
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691a      	ldr	r2, [r3, #16]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	89db      	ldrh	r3, [r3, #14]
 8007a72:	0019      	movs	r1, r3
 8007a74:	240e      	movs	r4, #14
 8007a76:	193b      	adds	r3, r7, r4
 8007a78:	2000      	movs	r0, #0
 8007a7a:	5e1b      	ldrsh	r3, [r3, r0]
 8007a7c:	18cb      	adds	r3, r1, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	18d2      	adds	r2, r2, r3
            shell->parser.buffer[shell->parser.cursor + i] = 
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	89c9      	ldrh	r1, [r1, #14]
 8007a8a:	0008      	movs	r0, r1
 8007a8c:	1939      	adds	r1, r7, r4
 8007a8e:	2500      	movs	r5, #0
 8007a90:	5f49      	ldrsh	r1, [r1, r5]
 8007a92:	1841      	adds	r1, r0, r1
 8007a94:	185b      	adds	r3, r3, r1
                shell->parser.buffer[shell->parser.cursor + i - 1];
 8007a96:	7812      	ldrb	r2, [r2, #0]
            shell->parser.buffer[shell->parser.cursor + i] = 
 8007a98:	701a      	strb	r2, [r3, #0]
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 8007a9a:	193b      	adds	r3, r7, r4
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	5e9b      	ldrsh	r3, [r3, r2]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	193b      	adds	r3, r7, r4
 8007aa8:	801a      	strh	r2, [r3, #0]
 8007aaa:	230e      	movs	r3, #14
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	2200      	movs	r2, #0
 8007ab0:	5e9b      	ldrsh	r3, [r3, r2]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dcd9      	bgt.n	8007a6a <shellInsertByte+0xca>
        }
        shell->parser.buffer[shell->parser.cursor++] = data;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	89db      	ldrh	r3, [r3, #14]
 8007abe:	1c59      	adds	r1, r3, #1
 8007ac0:	b288      	uxth	r0, r1
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	81c8      	strh	r0, [r1, #14]
 8007ac6:	18d3      	adds	r3, r2, r3
 8007ac8:	1cfa      	adds	r2, r7, #3
 8007aca:	7812      	ldrb	r2, [r2, #0]
 8007acc:	701a      	strb	r2, [r3, #0]
        shell->parser.buffer[++shell->parser.length] = 0;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	8992      	ldrh	r2, [r2, #12]
 8007ad6:	3201      	adds	r2, #1
 8007ad8:	b291      	uxth	r1, r2
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	8191      	strh	r1, [r2, #12]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	8992      	ldrh	r2, [r2, #12]
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
        for (short i = shell->parser.cursor - 1; i < shell->parser.length; i++)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	89db      	ldrh	r3, [r3, #14]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	230c      	movs	r3, #12
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	e01f      	b.n	8007b38 <shellInsertByte+0x198>
        {
            shellWriteByte(shell, 
                           shell->status.isChecked ? shell->parser.buffer[i] : '*');
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2260      	movs	r2, #96	; 0x60
 8007afc:	5c9b      	ldrb	r3, [r3, r2]
 8007afe:	2201      	movs	r2, #1
 8007b00:	4013      	ands	r3, r2
 8007b02:	b2db      	uxtb	r3, r3
            shellWriteByte(shell, 
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <shellInsertByte+0x17a>
                           shell->status.isChecked ? shell->parser.buffer[i] : '*');
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	230c      	movs	r3, #12
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	2100      	movs	r1, #0
 8007b12:	5e5b      	ldrsh	r3, [r3, r1]
 8007b14:	18d3      	adds	r3, r2, r3
            shellWriteByte(shell, 
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	e000      	b.n	8007b1c <shellInsertByte+0x17c>
 8007b1a:	232a      	movs	r3, #42	; 0x2a
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	0019      	movs	r1, r3
 8007b20:	0010      	movs	r0, r2
 8007b22:	f7ff fa2b 	bl	8006f7c <shellWriteByte>
        for (short i = shell->parser.cursor - 1; i < shell->parser.length; i++)
 8007b26:	210c      	movs	r1, #12
 8007b28:	187b      	adds	r3, r7, r1
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	5e9b      	ldrsh	r3, [r3, r2]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3301      	adds	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	187b      	adds	r3, r7, r1
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	230c      	movs	r3, #12
 8007b3a:	18fb      	adds	r3, r7, r3
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	5e9b      	ldrsh	r3, [r3, r2]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	8992      	ldrh	r2, [r2, #12]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	dbd7      	blt.n	8007af8 <shellInsertByte+0x158>
        }
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	899a      	ldrh	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	89db      	ldrh	r3, [r3, #14]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	230a      	movs	r3, #10
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	e00d      	b.n	8007b78 <shellInsertByte+0x1d8>
        {
            shellWriteByte(shell, '\b');
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2108      	movs	r1, #8
 8007b60:	0018      	movs	r0, r3
 8007b62:	f7ff fa0b 	bl	8006f7c <shellWriteByte>
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 8007b66:	210a      	movs	r1, #10
 8007b68:	187b      	adds	r3, r7, r1
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	5e9b      	ldrsh	r3, [r3, r2]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	187b      	adds	r3, r7, r1
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	230a      	movs	r3, #10
 8007b7a:	18fb      	adds	r3, r7, r3
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dceb      	bgt.n	8007b5c <shellInsertByte+0x1bc>
        }
    }
}
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b004      	add	sp, #16
 8007b88:	bdb0      	pop	{r4, r5, r7, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	20000010 	.word	0x20000010

08007b90 <shellDeleteByte>:
 * 
 * @param shell shell对象
 * @param direction 删除方向 {@code 1}删除光标前字符 {@code -1}删除光标处字符
 */
void shellDeleteByte(Shell *shell, signed char direction)
{
 8007b90:	b5b0      	push	{r4, r5, r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	000a      	movs	r2, r1
 8007b9a:	1cfb      	adds	r3, r7, #3
 8007b9c:	701a      	strb	r2, [r3, #0]
    char offset = (direction == -1) ? 1 : 0;
 8007b9e:	1cfb      	adds	r3, r7, #3
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b25b      	sxtb	r3, r3
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	425a      	negs	r2, r3
 8007ba8:	4153      	adcs	r3, r2
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	2309      	movs	r3, #9
 8007bae:	18fb      	adds	r3, r7, r3
 8007bb0:	701a      	strb	r2, [r3, #0]

    if ((shell->parser.cursor == 0 && direction == 1)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	89db      	ldrh	r3, [r3, #14]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d105      	bne.n	8007bc6 <shellDeleteByte+0x36>
 8007bba:	1cfb      	adds	r3, r7, #3
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b25b      	sxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d100      	bne.n	8007bc6 <shellDeleteByte+0x36>
 8007bc4:	e0c9      	b.n	8007d5a <shellDeleteByte+0x1ca>
        || (shell->parser.cursor == shell->parser.length && direction == -1))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	89da      	ldrh	r2, [r3, #14]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	899b      	ldrh	r3, [r3, #12]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d105      	bne.n	8007bde <shellDeleteByte+0x4e>
 8007bd2:	1cfb      	adds	r3, r7, #3
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	3301      	adds	r3, #1
 8007bda:	d100      	bne.n	8007bde <shellDeleteByte+0x4e>
 8007bdc:	e0bd      	b.n	8007d5a <shellDeleteByte+0x1ca>
    {
        return;
    }
    if (shell->parser.cursor == shell->parser.length && direction == 1)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	89da      	ldrh	r2, [r3, #14]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	899b      	ldrh	r3, [r3, #12]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d11d      	bne.n	8007c26 <shellDeleteByte+0x96>
 8007bea:	1cfb      	adds	r3, r7, #3
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b25b      	sxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d118      	bne.n	8007c26 <shellDeleteByte+0x96>
    {
        shell->parser.cursor--;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	89db      	ldrh	r3, [r3, #14]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	81da      	strh	r2, [r3, #14]
        shell->parser.length--;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	899b      	ldrh	r3, [r3, #12]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	819a      	strh	r2, [r3, #12]
        shell->parser.buffer[shell->parser.length] = 0;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	8992      	ldrh	r2, [r2, #12]
 8007c14:	189b      	adds	r3, r3, r2
 8007c16:	2200      	movs	r2, #0
 8007c18:	701a      	strb	r2, [r3, #0]
        shellDeleteCommandLine(shell, 1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	0018      	movs	r0, r3
 8007c20:	f7ff fe74 	bl	800790c <shellDeleteCommandLine>
 8007c24:	e09a      	b.n	8007d5c <shellDeleteByte+0x1cc>
    }
    else
    {
        for (short i = offset; i < shell->parser.length - shell->parser.cursor; i++)
 8007c26:	230e      	movs	r3, #14
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	2209      	movs	r2, #9
 8007c2c:	18ba      	adds	r2, r7, r2
 8007c2e:	7812      	ldrb	r2, [r2, #0]
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	e01f      	b.n	8007c74 <shellDeleteByte+0xe4>
        {
            shell->parser.buffer[shell->parser.cursor + i - 1] = 
                shell->parser.buffer[shell->parser.cursor + i];
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	89d2      	ldrh	r2, [r2, #14]
 8007c3c:	0011      	movs	r1, r2
 8007c3e:	240e      	movs	r4, #14
 8007c40:	193a      	adds	r2, r7, r4
 8007c42:	2000      	movs	r0, #0
 8007c44:	5e12      	ldrsh	r2, [r2, r0]
 8007c46:	188a      	adds	r2, r1, r2
 8007c48:	189a      	adds	r2, r3, r2
            shell->parser.buffer[shell->parser.cursor + i - 1] = 
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6919      	ldr	r1, [r3, #16]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	89db      	ldrh	r3, [r3, #14]
 8007c52:	0018      	movs	r0, r3
 8007c54:	193b      	adds	r3, r7, r4
 8007c56:	2500      	movs	r5, #0
 8007c58:	5f5b      	ldrsh	r3, [r3, r5]
 8007c5a:	18c3      	adds	r3, r0, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	18cb      	adds	r3, r1, r3
                shell->parser.buffer[shell->parser.cursor + i];
 8007c60:	7812      	ldrb	r2, [r2, #0]
            shell->parser.buffer[shell->parser.cursor + i - 1] = 
 8007c62:	701a      	strb	r2, [r3, #0]
        for (short i = offset; i < shell->parser.length - shell->parser.cursor; i++)
 8007c64:	193b      	adds	r3, r7, r4
 8007c66:	2200      	movs	r2, #0
 8007c68:	5e9b      	ldrsh	r3, [r3, r2]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	193b      	adds	r3, r7, r4
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	230e      	movs	r3, #14
 8007c76:	18fb      	adds	r3, r7, r3
 8007c78:	2200      	movs	r2, #0
 8007c7a:	5e9a      	ldrsh	r2, [r3, r2]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	899b      	ldrh	r3, [r3, #12]
 8007c80:	0019      	movs	r1, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	89db      	ldrh	r3, [r3, #14]
 8007c86:	1acb      	subs	r3, r1, r3
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	dbd3      	blt.n	8007c34 <shellDeleteByte+0xa4>
        }
        shell->parser.length--;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	899b      	ldrh	r3, [r3, #12]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	819a      	strh	r2, [r3, #12]
        if (!offset)
 8007c98:	2309      	movs	r3, #9
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <shellDeleteByte+0x128>
        {
            shell->parser.cursor--;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	89db      	ldrh	r3, [r3, #14]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	81da      	strh	r2, [r3, #14]
            shellWriteByte(shell, '\b');
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2108      	movs	r1, #8
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f7ff f962 	bl	8006f7c <shellWriteByte>
        }
        shell->parser.buffer[shell->parser.length] = 0;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	8992      	ldrh	r2, [r2, #12]
 8007cc0:	189b      	adds	r3, r3, r2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	701a      	strb	r2, [r3, #0]
        for (short i = shell->parser.cursor; i < shell->parser.length; i++)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	89da      	ldrh	r2, [r3, #14]
 8007cca:	230c      	movs	r3, #12
 8007ccc:	18fb      	adds	r3, r7, r3
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	e015      	b.n	8007cfe <shellDeleteByte+0x16e>
        {
            shellWriteByte(shell, shell->parser.buffer[i]);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691a      	ldr	r2, [r3, #16]
 8007cd6:	240c      	movs	r4, #12
 8007cd8:	193b      	adds	r3, r7, r4
 8007cda:	2100      	movs	r1, #0
 8007cdc:	5e5b      	ldrsh	r3, [r3, r1]
 8007cde:	18d3      	adds	r3, r2, r3
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	0011      	movs	r1, r2
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	f7ff f948 	bl	8006f7c <shellWriteByte>
        for (short i = shell->parser.cursor; i < shell->parser.length; i++)
 8007cec:	0021      	movs	r1, r4
 8007cee:	187b      	adds	r3, r7, r1
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	5e9b      	ldrsh	r3, [r3, r2]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	187b      	adds	r3, r7, r1
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	230c      	movs	r3, #12
 8007d00:	18fb      	adds	r3, r7, r3
 8007d02:	2200      	movs	r2, #0
 8007d04:	5e9b      	ldrsh	r3, [r3, r2]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	8992      	ldrh	r2, [r2, #12]
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	dbe1      	blt.n	8007cd2 <shellDeleteByte+0x142>
        }
        shellWriteByte(shell, ' ');
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2120      	movs	r1, #32
 8007d12:	0018      	movs	r0, r3
 8007d14:	f7ff f932 	bl	8006f7c <shellWriteByte>
        for (short i = shell->parser.length - shell->parser.cursor + 1; i > 0; i--)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	899a      	ldrh	r2, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	89db      	ldrh	r3, [r3, #14]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3301      	adds	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	230a      	movs	r3, #10
 8007d2a:	18fb      	adds	r3, r7, r3
 8007d2c:	801a      	strh	r2, [r3, #0]
 8007d2e:	e00d      	b.n	8007d4c <shellDeleteByte+0x1bc>
        {
            shellWriteByte(shell, '\b');
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2108      	movs	r1, #8
 8007d34:	0018      	movs	r0, r3
 8007d36:	f7ff f921 	bl	8006f7c <shellWriteByte>
        for (short i = shell->parser.length - shell->parser.cursor + 1; i > 0; i--)
 8007d3a:	210a      	movs	r1, #10
 8007d3c:	187b      	adds	r3, r7, r1
 8007d3e:	2200      	movs	r2, #0
 8007d40:	5e9b      	ldrsh	r3, [r3, r2]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	187b      	adds	r3, r7, r1
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	230a      	movs	r3, #10
 8007d4e:	18fb      	adds	r3, r7, r3
 8007d50:	2200      	movs	r2, #0
 8007d52:	5e9b      	ldrsh	r3, [r3, r2]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	dceb      	bgt.n	8007d30 <shellDeleteByte+0x1a0>
 8007d58:	e000      	b.n	8007d5c <shellDeleteByte+0x1cc>
        return;
 8007d5a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	b004      	add	sp, #16
 8007d60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007d64 <shellSplit>:
 * @param maxNum 最大分割数量
 * 
 * @return int 分割得到的字串数量
 */
int shellSplit(char *string, unsigned short strLen, char *array[], char splitKey, short maxNum)
{
 8007d64:	b590      	push	{r4, r7, lr}
 8007d66:	b08d      	sub	sp, #52	; 0x34
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	0008      	movs	r0, r1
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	0019      	movs	r1, r3
 8007d72:	230a      	movs	r3, #10
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	1c02      	adds	r2, r0, #0
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	2309      	movs	r3, #9
 8007d7c:	18fb      	adds	r3, r7, r3
 8007d7e:	1c0a      	adds	r2, r1, #0
 8007d80:	701a      	strb	r2, [r3, #0]
    unsigned char record = 1;
 8007d82:	232f      	movs	r3, #47	; 0x2f
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	2201      	movs	r2, #1
 8007d88:	701a      	strb	r2, [r3, #0]
    unsigned char pairedLeft[16] = {0};
 8007d8a:	2310      	movs	r3, #16
 8007d8c:	18fb      	adds	r3, r7, r3
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	3304      	adds	r3, #4
 8007d94:	220c      	movs	r2, #12
 8007d96:	2100      	movs	r1, #0
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f001 fd89 	bl	80098b0 <memset>
    unsigned char pariedCount = 0;
 8007d9e:	232e      	movs	r3, #46	; 0x2e
 8007da0:	18fb      	adds	r3, r7, r3
 8007da2:	2200      	movs	r2, #0
 8007da4:	701a      	strb	r2, [r3, #0]
    int count = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28

    for (short i = 0; i < maxNum; i++)
 8007daa:	2326      	movs	r3, #38	; 0x26
 8007dac:	18fb      	adds	r3, r7, r3
 8007dae:	2200      	movs	r2, #0
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e010      	b.n	8007dd6 <shellSplit+0x72>
    {
        array[i] = NULL;
 8007db4:	2126      	movs	r1, #38	; 0x26
 8007db6:	187b      	adds	r3, r7, r1
 8007db8:	2200      	movs	r2, #0
 8007dba:	5e9b      	ldrsh	r3, [r3, r2]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	18d3      	adds	r3, r2, r3
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
    for (short i = 0; i < maxNum; i++)
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	2200      	movs	r2, #0
 8007dca:	5e9b      	ldrsh	r3, [r3, r2]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	187b      	adds	r3, r7, r1
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	2326      	movs	r3, #38	; 0x26
 8007dd8:	18fa      	adds	r2, r7, r3
 8007dda:	2338      	movs	r3, #56	; 0x38
 8007ddc:	2108      	movs	r1, #8
 8007dde:	185b      	adds	r3, r3, r1
 8007de0:	19db      	adds	r3, r3, r7
 8007de2:	2100      	movs	r1, #0
 8007de4:	5e52      	ldrsh	r2, [r2, r1]
 8007de6:	2100      	movs	r1, #0
 8007de8:	5e5b      	ldrsh	r3, [r3, r1]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	dbe2      	blt.n	8007db4 <shellSplit+0x50>
    }

    for (unsigned short i = 0; i < strLen; i++)
 8007dee:	2324      	movs	r3, #36	; 0x24
 8007df0:	18fb      	adds	r3, r7, r3
 8007df2:	2200      	movs	r2, #0
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	e0d0      	b.n	8007f9a <shellSplit+0x236>
    {
        if (pariedCount == 0)
 8007df8:	232e      	movs	r3, #46	; 0x2e
 8007dfa:	18fb      	adds	r3, r7, r3
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d152      	bne.n	8007ea8 <shellSplit+0x144>
        {
            if (string[i] != splitKey && record == 1 && count < maxNum)
 8007e02:	2124      	movs	r1, #36	; 0x24
 8007e04:	187b      	adds	r3, r7, r1
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	18d3      	adds	r3, r2, r3
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2209      	movs	r2, #9
 8007e10:	18ba      	adds	r2, r7, r2
 8007e12:	7812      	ldrb	r2, [r2, #0]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d01c      	beq.n	8007e52 <shellSplit+0xee>
 8007e18:	202f      	movs	r0, #47	; 0x2f
 8007e1a:	183b      	adds	r3, r7, r0
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d117      	bne.n	8007e52 <shellSplit+0xee>
 8007e22:	2338      	movs	r3, #56	; 0x38
 8007e24:	2208      	movs	r2, #8
 8007e26:	189b      	adds	r3, r3, r2
 8007e28:	19db      	adds	r3, r3, r7
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	5e9b      	ldrsh	r3, [r3, r2]
 8007e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e30:	429a      	cmp	r2, r3
 8007e32:	da0e      	bge.n	8007e52 <shellSplit+0xee>
            {
                array[count++] = &(string[i]);
 8007e34:	187b      	adds	r3, r7, r1
 8007e36:	881a      	ldrh	r2, [r3, #0]
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	1c59      	adds	r1, r3, #1
 8007e3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	18cb      	adds	r3, r1, r3
 8007e44:	68f9      	ldr	r1, [r7, #12]
 8007e46:	188a      	adds	r2, r1, r2
 8007e48:	601a      	str	r2, [r3, #0]
                record = 0;
 8007e4a:	183b      	adds	r3, r7, r0
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	e02a      	b.n	8007ea8 <shellSplit+0x144>
            }
            else if ((string[i] == splitKey || string[i] == ' ') && record == 0)
 8007e52:	2124      	movs	r1, #36	; 0x24
 8007e54:	187b      	adds	r3, r7, r1
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	18d3      	adds	r3, r2, r3
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2209      	movs	r2, #9
 8007e60:	18ba      	adds	r2, r7, r2
 8007e62:	7812      	ldrb	r2, [r2, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d006      	beq.n	8007e76 <shellSplit+0x112>
 8007e68:	187b      	adds	r3, r7, r1
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	18d3      	adds	r3, r2, r3
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d118      	bne.n	8007ea8 <shellSplit+0x144>
 8007e76:	212f      	movs	r1, #47	; 0x2f
 8007e78:	187b      	adds	r3, r7, r1
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d113      	bne.n	8007ea8 <shellSplit+0x144>
            {
                string[i] = 0;
 8007e80:	2024      	movs	r0, #36	; 0x24
 8007e82:	183b      	adds	r3, r7, r0
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	18d3      	adds	r3, r2, r3
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]
                if (string[i + 1] != ' ')
 8007e8e:	183b      	adds	r3, r7, r0
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	18d3      	adds	r3, r2, r3
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d100      	bne.n	8007ea0 <shellSplit+0x13c>
 8007e9e:	e075      	b.n	8007f8c <shellSplit+0x228>
                {
                    record = 1;
 8007ea0:	187b      	adds	r3, r7, r1
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	701a      	strb	r2, [r3, #0]
                }
                continue;
 8007ea6:	e071      	b.n	8007f8c <shellSplit+0x228>
            }
        }

        for (unsigned char j = 0; j < sizeof(pairedChars) / 2; j++)
 8007ea8:	2323      	movs	r3, #35	; 0x23
 8007eaa:	18fb      	adds	r3, r7, r3
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	e051      	b.n	8007f56 <shellSplit+0x1f2>
        {
            if (pariedCount > 0
 8007eb2:	202e      	movs	r0, #46	; 0x2e
 8007eb4:	183b      	adds	r3, r7, r0
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d022      	beq.n	8007f02 <shellSplit+0x19e>
                && string[i] == pairedChars[j][1]
 8007ebc:	2324      	movs	r3, #36	; 0x24
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	18d3      	adds	r3, r2, r3
 8007ec6:	781a      	ldrb	r2, [r3, #0]
 8007ec8:	2423      	movs	r4, #35	; 0x23
 8007eca:	193b      	adds	r3, r7, r4
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	493a      	ldr	r1, [pc, #232]	; (8007fb8 <shellSplit+0x254>)
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	18cb      	adds	r3, r1, r3
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d112      	bne.n	8007f02 <shellSplit+0x19e>
                && pairedLeft[pariedCount - 1] == pairedChars[j][0])
 8007edc:	183b      	adds	r3, r7, r0
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	2210      	movs	r2, #16
 8007ee4:	18ba      	adds	r2, r7, r2
 8007ee6:	5cd2      	ldrb	r2, [r2, r3]
 8007ee8:	193b      	adds	r3, r7, r4
 8007eea:	7819      	ldrb	r1, [r3, #0]
 8007eec:	4b32      	ldr	r3, [pc, #200]	; (8007fb8 <shellSplit+0x254>)
 8007eee:	0049      	lsls	r1, r1, #1
 8007ef0:	5ccb      	ldrb	r3, [r1, r3]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d105      	bne.n	8007f02 <shellSplit+0x19e>
            {
                --pariedCount;
 8007ef6:	183b      	adds	r3, r7, r0
 8007ef8:	183a      	adds	r2, r7, r0
 8007efa:	7812      	ldrb	r2, [r2, #0]
 8007efc:	3a01      	subs	r2, #1
 8007efe:	701a      	strb	r2, [r3, #0]
                break;
 8007f00:	e02e      	b.n	8007f60 <shellSplit+0x1fc>
            }
            else if (string[i] == pairedChars[j][0])
 8007f02:	2324      	movs	r3, #36	; 0x24
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	18d3      	adds	r3, r2, r3
 8007f0c:	781a      	ldrb	r2, [r3, #0]
 8007f0e:	2023      	movs	r0, #35	; 0x23
 8007f10:	183b      	adds	r3, r7, r0
 8007f12:	7819      	ldrb	r1, [r3, #0]
 8007f14:	4b28      	ldr	r3, [pc, #160]	; (8007fb8 <shellSplit+0x254>)
 8007f16:	0049      	lsls	r1, r1, #1
 8007f18:	5ccb      	ldrb	r3, [r1, r3]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d115      	bne.n	8007f4a <shellSplit+0x1e6>
            {
                pairedLeft[pariedCount++] = pairedChars[j][0];
 8007f1e:	183b      	adds	r3, r7, r0
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	242e      	movs	r4, #46	; 0x2e
 8007f24:	193b      	adds	r3, r7, r4
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	1939      	adds	r1, r7, r4
 8007f2a:	1c58      	adds	r0, r3, #1
 8007f2c:	7008      	strb	r0, [r1, #0]
 8007f2e:	0019      	movs	r1, r3
 8007f30:	4b21      	ldr	r3, [pc, #132]	; (8007fb8 <shellSplit+0x254>)
 8007f32:	0052      	lsls	r2, r2, #1
 8007f34:	5cd2      	ldrb	r2, [r2, r3]
 8007f36:	2310      	movs	r3, #16
 8007f38:	18fb      	adds	r3, r7, r3
 8007f3a:	545a      	strb	r2, [r3, r1]
                pariedCount &= 0x0F;
 8007f3c:	193b      	adds	r3, r7, r4
 8007f3e:	193a      	adds	r2, r7, r4
 8007f40:	7812      	ldrb	r2, [r2, #0]
 8007f42:	210f      	movs	r1, #15
 8007f44:	400a      	ands	r2, r1
 8007f46:	701a      	strb	r2, [r3, #0]
                break;
 8007f48:	e00a      	b.n	8007f60 <shellSplit+0x1fc>
        for (unsigned char j = 0; j < sizeof(pairedChars) / 2; j++)
 8007f4a:	2123      	movs	r1, #35	; 0x23
 8007f4c:	187b      	adds	r3, r7, r1
 8007f4e:	781a      	ldrb	r2, [r3, #0]
 8007f50:	187b      	adds	r3, r7, r1
 8007f52:	3201      	adds	r2, #1
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	2323      	movs	r3, #35	; 0x23
 8007f58:	18fb      	adds	r3, r7, r3
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0a8      	beq.n	8007eb2 <shellSplit+0x14e>
            }
        }
        
        if (string[i] == '\\' && string[i + 1] != 0)
 8007f60:	2124      	movs	r1, #36	; 0x24
 8007f62:	187b      	adds	r3, r7, r1
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	18d3      	adds	r3, r2, r3
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b5c      	cmp	r3, #92	; 0x5c
 8007f6e:	d10e      	bne.n	8007f8e <shellSplit+0x22a>
 8007f70:	187b      	adds	r3, r7, r1
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	18d3      	adds	r3, r2, r3
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d006      	beq.n	8007f8e <shellSplit+0x22a>
        {
            i++;
 8007f80:	187b      	adds	r3, r7, r1
 8007f82:	881a      	ldrh	r2, [r3, #0]
 8007f84:	187b      	adds	r3, r7, r1
 8007f86:	3201      	adds	r2, #1
 8007f88:	801a      	strh	r2, [r3, #0]
 8007f8a:	e000      	b.n	8007f8e <shellSplit+0x22a>
                continue;
 8007f8c:	46c0      	nop			; (mov r8, r8)
    for (unsigned short i = 0; i < strLen; i++)
 8007f8e:	2124      	movs	r1, #36	; 0x24
 8007f90:	187b      	adds	r3, r7, r1
 8007f92:	881a      	ldrh	r2, [r3, #0]
 8007f94:	187b      	adds	r3, r7, r1
 8007f96:	3201      	adds	r2, #1
 8007f98:	801a      	strh	r2, [r3, #0]
 8007f9a:	2324      	movs	r3, #36	; 0x24
 8007f9c:	18fa      	adds	r2, r7, r3
 8007f9e:	230a      	movs	r3, #10
 8007fa0:	18fb      	adds	r3, r7, r3
 8007fa2:	8812      	ldrh	r2, [r2, #0]
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d200      	bcs.n	8007fac <shellSplit+0x248>
 8007faa:	e725      	b.n	8007df8 <shellSplit+0x94>
        }
    }
    return count;
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007fae:	0018      	movs	r0, r3
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b00d      	add	sp, #52	; 0x34
 8007fb4:	bd90      	pop	{r4, r7, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	20000064 	.word	0x20000064

08007fbc <shellParserParam>:
 * @brief shell 解析参数
 * 
 * @param shell shell对象
 */
static void shellParserParam(Shell *shell)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	6078      	str	r0, [r7, #4]
    shell->parser.paramCount = 
        shellSplit(shell->parser.buffer, shell->parser.length, 
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6918      	ldr	r0, [r3, #16]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	8999      	ldrh	r1, [r3, #12]
                   shell->parser.param, ' ', SHELL_PARAMETER_MAX_NUMBER);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3314      	adds	r3, #20
 8007fd0:	001a      	movs	r2, r3
        shellSplit(shell->parser.buffer, shell->parser.length, 
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	2320      	movs	r3, #32
 8007fd8:	f7ff fec4 	bl	8007d64 <shellSplit>
 8007fdc:	0003      	movs	r3, r0
    shell->parser.paramCount = 
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b002      	add	sp, #8
 8007fea:	bd80      	pop	{r7, pc}

08007fec <shellRemoveParamQuotes>:
 * @brief shell去除字符串参数头尾的双引号
 * 
 * @param shell shell对象
 */
static void shellRemoveParamQuotes(Shell *shell)
{
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
    unsigned short paramLength;
    for (unsigned short i = 0; i < shell->parser.paramCount; i++)
 8007ff4:	230e      	movs	r3, #14
 8007ff6:	18fb      	adds	r3, r7, r3
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	e05a      	b.n	80080b4 <shellRemoveParamQuotes+0xc8>
    {
        if (shell->parser.param[i][0] == '\"')
 8007ffe:	210e      	movs	r1, #14
 8008000:	187b      	adds	r3, r7, r1
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	3304      	adds	r3, #4
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	18d3      	adds	r3, r2, r3
 800800c:	3304      	adds	r3, #4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b22      	cmp	r3, #34	; 0x22
 8008014:	d11a      	bne.n	800804c <shellRemoveParamQuotes+0x60>
        {
            shell->parser.param[i][0] = 0;
 8008016:	187b      	adds	r3, r7, r1
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	18d3      	adds	r3, r2, r3
 8008022:	3304      	adds	r3, #4
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
            shell->parser.param[i] = &shell->parser.param[i][1];
 800802a:	187b      	adds	r3, r7, r1
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	3304      	adds	r3, #4
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	18d3      	adds	r3, r2, r3
 8008036:	3304      	adds	r3, #4
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	187b      	adds	r3, r7, r1
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	3201      	adds	r2, #1
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	18cb      	adds	r3, r1, r3
 8008048:	3304      	adds	r3, #4
 800804a:	601a      	str	r2, [r3, #0]
        }
        paramLength = strlen(shell->parser.param[i]);
 800804c:	240e      	movs	r4, #14
 800804e:	193b      	adds	r3, r7, r4
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	18d3      	adds	r3, r2, r3
 800805a:	3304      	adds	r3, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	0018      	movs	r0, r3
 8008060:	f7f8 f85c 	bl	800011c <strlen>
 8008064:	0002      	movs	r2, r0
 8008066:	200c      	movs	r0, #12
 8008068:	183b      	adds	r3, r7, r0
 800806a:	801a      	strh	r2, [r3, #0]
        if (shell->parser.param[i][paramLength - 1] == '\"')
 800806c:	0021      	movs	r1, r4
 800806e:	187b      	adds	r3, r7, r1
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	3304      	adds	r3, #4
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	18d3      	adds	r3, r2, r3
 800807a:	3304      	adds	r3, #4
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	183b      	adds	r3, r7, r0
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	3b01      	subs	r3, #1
 8008084:	18d3      	adds	r3, r2, r3
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b22      	cmp	r3, #34	; 0x22
 800808a:	d10d      	bne.n	80080a8 <shellRemoveParamQuotes+0xbc>
        {
            shell->parser.param[i][paramLength - 1] = 0;
 800808c:	187b      	adds	r3, r7, r1
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	3304      	adds	r3, #4
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	18d3      	adds	r3, r2, r3
 8008098:	3304      	adds	r3, #4
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	183b      	adds	r3, r7, r0
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	18d3      	adds	r3, r2, r3
 80080a4:	2200      	movs	r2, #0
 80080a6:	701a      	strb	r2, [r3, #0]
    for (unsigned short i = 0; i < shell->parser.paramCount; i++)
 80080a8:	210e      	movs	r1, #14
 80080aa:	187b      	adds	r3, r7, r1
 80080ac:	881a      	ldrh	r2, [r3, #0]
 80080ae:	187b      	adds	r3, r7, r1
 80080b0:	3201      	adds	r2, #1
 80080b2:	801a      	strh	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b8:	220e      	movs	r2, #14
 80080ba:	18ba      	adds	r2, r7, r2
 80080bc:	8812      	ldrh	r2, [r2, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d39d      	bcc.n	8007ffe <shellRemoveParamQuotes+0x12>
        }
    }
}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	46c0      	nop			; (mov r8, r8)
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b005      	add	sp, #20
 80080ca:	bd90      	pop	{r4, r7, pc}

080080cc <shellSeekCommand>:
 */
ShellCommand* shellSeekCommand(Shell *shell,
                               const char *cmd,
                               ShellCommand *base,
                               unsigned short compareLength)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	001a      	movs	r2, r3
 80080da:	1cbb      	adds	r3, r7, #2
 80080dc:	801a      	strh	r2, [r3, #0]
    const char *name;
    unsigned short count = shell->commandList.count -
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	225c      	movs	r2, #92	; 0x5c
 80080e2:	5a99      	ldrh	r1, [r3, r2]
        ((size_t)base - (size_t)shell->commandList.base) / sizeof(ShellCommand);
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	091b      	lsrs	r3, r3, #4
    unsigned short count = shell->commandList.count -
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	2314      	movs	r3, #20
 80080f2:	18fb      	adds	r3, r7, r3
 80080f4:	1a8a      	subs	r2, r1, r2
 80080f6:	801a      	strh	r2, [r3, #0]
    for (unsigned short i = 0; i < count; i++)
 80080f8:	2316      	movs	r3, #22
 80080fa:	18fb      	adds	r3, r7, r3
 80080fc:	2200      	movs	r2, #0
 80080fe:	801a      	strh	r2, [r3, #0]
 8008100:	e04a      	b.n	8008198 <shellSeekCommand+0xcc>
    {
        if (base[i].attr.attrs.type == SHELL_TYPE_KEY
 8008102:	2416      	movs	r4, #22
 8008104:	193b      	adds	r3, r7, r4
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	18d3      	adds	r3, r2, r3
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	220f      	movs	r2, #15
 8008112:	4013      	ands	r3, r2
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b09      	cmp	r3, #9
 8008118:	d037      	beq.n	800818a <shellSeekCommand+0xbe>
            || shellCheckPermission(shell, &base[i]) != 0)
 800811a:	193b      	adds	r3, r7, r4
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	18d2      	adds	r2, r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	0011      	movs	r1, r2
 8008128:	0018      	movs	r0, r3
 800812a:	f7ff f801 	bl	8007130 <shellCheckPermission>
 800812e:	1e03      	subs	r3, r0, #0
 8008130:	d12b      	bne.n	800818a <shellSeekCommand+0xbe>
        {
            continue;
        }
        name = shellGetCommandName(&base[i]);
 8008132:	193b      	adds	r3, r7, r4
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	18d3      	adds	r3, r2, r3
 800813c:	0018      	movs	r0, r3
 800813e:	f7ff f935 	bl	80073ac <shellGetCommandName>
 8008142:	0003      	movs	r3, r0
 8008144:	613b      	str	r3, [r7, #16]
        if (!compareLength)
 8008146:	1cbb      	adds	r3, r7, #2
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10d      	bne.n	800816a <shellSeekCommand+0x9e>
        {
            if (strcmp(cmd, name) == 0)
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	0011      	movs	r1, r2
 8008154:	0018      	movs	r0, r3
 8008156:	f7f7 ffd7 	bl	8000108 <strcmp>
 800815a:	1e03      	subs	r3, r0, #0
 800815c:	d116      	bne.n	800818c <shellSeekCommand+0xc0>
            {
                return &base[i];
 800815e:	193b      	adds	r3, r7, r4
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	18d3      	adds	r3, r2, r3
 8008168:	e01f      	b.n	80081aa <shellSeekCommand+0xde>
            }
        }
        else
        {
            if (strncmp(cmd, name, compareLength) == 0)
 800816a:	1cbb      	adds	r3, r7, #2
 800816c:	881a      	ldrh	r2, [r3, #0]
 800816e:	6939      	ldr	r1, [r7, #16]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	0018      	movs	r0, r3
 8008174:	f001 fba4 	bl	80098c0 <strncmp>
 8008178:	1e03      	subs	r3, r0, #0
 800817a:	d107      	bne.n	800818c <shellSeekCommand+0xc0>
            {
                return &base[i];
 800817c:	2316      	movs	r3, #22
 800817e:	18fb      	adds	r3, r7, r3
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	18d3      	adds	r3, r2, r3
 8008188:	e00f      	b.n	80081aa <shellSeekCommand+0xde>
            continue;
 800818a:	46c0      	nop			; (mov r8, r8)
    for (unsigned short i = 0; i < count; i++)
 800818c:	2116      	movs	r1, #22
 800818e:	187b      	adds	r3, r7, r1
 8008190:	881a      	ldrh	r2, [r3, #0]
 8008192:	187b      	adds	r3, r7, r1
 8008194:	3201      	adds	r2, #1
 8008196:	801a      	strh	r2, [r3, #0]
 8008198:	2316      	movs	r3, #22
 800819a:	18fa      	adds	r2, r7, r3
 800819c:	2314      	movs	r3, #20
 800819e:	18fb      	adds	r3, r7, r3
 80081a0:	8812      	ldrh	r2, [r2, #0]
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d3ac      	bcc.n	8008102 <shellSeekCommand+0x36>
            }
        }
    }
    return NULL;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	0018      	movs	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b007      	add	sp, #28
 80081b0:	bd90      	pop	{r4, r7, pc}
	...

080081b4 <shellGetVarValue>:
 * @param shell shell对象
 * @param command 命令
 * @return int 变量值
 */
int shellGetVarValue(Shell *shell, ShellCommand *command)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
    int value = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
    switch (command->attr.attrs.type)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	071b      	lsls	r3, r3, #28
 80081c8:	0f1b      	lsrs	r3, r3, #28
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b07      	cmp	r3, #7
 80081ce:	d82a      	bhi.n	8008226 <shellGetVarValue+0x72>
 80081d0:	009a      	lsls	r2, r3, #2
 80081d2:	4b18      	ldr	r3, [pc, #96]	; (8008234 <shellGetVarValue+0x80>)
 80081d4:	18d3      	adds	r3, r2, r3
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	469f      	mov	pc, r3
    {
    case SHELL_TYPE_VAR_INT:
        value = *((int *)(command->data.var.value));
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60fb      	str	r3, [r7, #12]
        break;
 80081e2:	e021      	b.n	8008228 <shellGetVarValue+0x74>
    case SHELL_TYPE_VAR_SHORT:
        value = *((short *)(command->data.var.value));
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2200      	movs	r2, #0
 80081ea:	5e9b      	ldrsh	r3, [r3, r2]
 80081ec:	60fb      	str	r3, [r7, #12]
        break;
 80081ee:	e01b      	b.n	8008228 <shellGetVarValue+0x74>
    case SHELL_TYPE_VAR_CHAR:
        value = *((char *)(command->data.var.value));
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
        break;
 80081f8:	e016      	b.n	8008228 <shellGetVarValue+0x74>
    case SHELL_TYPE_VAR_STRING:
    case SHELL_TYPE_VAR_POINT:
        value = (size_t)(command->data.var.value);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	60fb      	str	r3, [r7, #12]
        break;
 8008200:	e012      	b.n	8008228 <shellGetVarValue+0x74>
    case SHELL_TYPE_VAR_NODE: {
        int (*func)(void *) = ((ShellNodeVarAttr *)command->data.var.value)->get;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	60bb      	str	r3, [r7, #8]
        value = func ? func(((ShellNodeVarAttr *)command->data.var.value)->var) : 0;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d007      	beq.n	8008220 <shellGetVarValue+0x6c>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	0010      	movs	r0, r2
 800821a:	4798      	blx	r3
 800821c:	0003      	movs	r3, r0
 800821e:	e000      	b.n	8008222 <shellGetVarValue+0x6e>
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
        break;
 8008224:	e000      	b.n	8008228 <shellGetVarValue+0x74>
    }
    default:
        break;
 8008226:	46c0      	nop			; (mov r8, r8)
    }
    return value;
 8008228:	68fb      	ldr	r3, [r7, #12]
}
 800822a:	0018      	movs	r0, r3
 800822c:	46bd      	mov	sp, r7
 800822e:	b004      	add	sp, #16
 8008230:	bd80      	pop	{r7, pc}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	08009e00 	.word	0x08009e00

08008238 <shellSetVarValue>:
 * @param command 命令
 * @param value 值
 * @return int 返回变量值
 */
int shellSetVarValue(Shell *shell, ShellCommand *command, int value)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
    if (command->attr.attrs.readOnly)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	2240      	movs	r2, #64	; 0x40
 800824a:	4013      	ands	r3, r2
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <shellSetVarValue+0x2a>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_VAR_READ_ONLY_CANNOT_MODIFY]);
 8008252:	4b31      	ldr	r3, [pc, #196]	; (8008318 <shellSetVarValue+0xe0>)
 8008254:	6a1a      	ldr	r2, [r3, #32]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	0011      	movs	r1, r2
 800825a:	0018      	movs	r0, r3
 800825c:	f7fe fe9f 	bl	8006f9e <shellWriteString>
 8008260:	e04e      	b.n	8008300 <shellSetVarValue+0xc8>
    }
    else
    {
        switch (command->attr.attrs.type)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	071b      	lsls	r3, r3, #28
 8008268:	0f1b      	lsrs	r3, r3, #28
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b07      	cmp	r3, #7
 800826e:	d844      	bhi.n	80082fa <shellSetVarValue+0xc2>
 8008270:	009a      	lsls	r2, r3, #2
 8008272:	4b2a      	ldr	r3, [pc, #168]	; (800831c <shellSetVarValue+0xe4>)
 8008274:	18d3      	adds	r3, r2, r3
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	469f      	mov	pc, r3
        {
        case SHELL_TYPE_VAR_INT:
            *((int *)(command->data.var.value)) = value;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
            break;
 8008282:	e03d      	b.n	8008300 <shellSetVarValue+0xc8>
        case SHELL_TYPE_VAR_SHORT:
            *((short *)(command->data.var.value)) = value;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	b212      	sxth	r2, r2
 800828c:	801a      	strh	r2, [r3, #0]
            break;
 800828e:	e037      	b.n	8008300 <shellSetVarValue+0xc8>
        case SHELL_TYPE_VAR_CHAR:
            *((char *)(command->data.var.value)) = value;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]
            break;
 800829a:	e031      	b.n	8008300 <shellSetVarValue+0xc8>
        case SHELL_TYPE_VAR_STRING:
            shellStringCopy(((char *)(command->data.var.value)), (char *) (size_t) value);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	0011      	movs	r1, r2
 80082a4:	0018      	movs	r0, r3
 80082a6:	f7ff f814 	bl	80072d2 <shellStringCopy>
            break;
 80082aa:	e029      	b.n	8008300 <shellSetVarValue+0xc8>
        case SHELL_TYPE_VAR_POINT:
            shellWriteString(shell, shellText[SHELL_TEXT_POINT_CANNOT_MODIFY]);
 80082ac:	4b1a      	ldr	r3, [pc, #104]	; (8008318 <shellSetVarValue+0xe0>)
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	0011      	movs	r1, r2
 80082b4:	0018      	movs	r0, r3
 80082b6:	f7fe fe72 	bl	8006f9e <shellWriteString>
            break;
 80082ba:	e021      	b.n	8008300 <shellSetVarValue+0xc8>
        case SHELL_TYPE_VAR_NODE:
            if (((ShellNodeVarAttr *)command->data.var.value)->set)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d01b      	beq.n	80082fe <shellSetVarValue+0xc6>
            {
                if (((ShellNodeVarAttr *)command->data.var.value)->var)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <shellSetVarValue+0xb0>
                {
                    int (*func)(void *, int) = ((ShellNodeVarAttr *)command->data.var.value)->set;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	613b      	str	r3, [r7, #16]
                    func(((ShellNodeVarAttr *)command->data.var.value)->var, value);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	0010      	movs	r0, r2
 80082e4:	4798      	blx	r3
                {
                    int (*func)(int) = ((ShellNodeVarAttr *)command->data.var.value)->set;
                    func(value);
                }
            }
            break;
 80082e6:	e00a      	b.n	80082fe <shellSetVarValue+0xc6>
                    int (*func)(int) = ((ShellNodeVarAttr *)command->data.var.value)->set;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	617b      	str	r3, [r7, #20]
                    func(value);
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	0010      	movs	r0, r2
 80082f6:	4798      	blx	r3
            break;
 80082f8:	e001      	b.n	80082fe <shellSetVarValue+0xc6>
        default:
            break;
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	e000      	b.n	8008300 <shellSetVarValue+0xc8>
            break;
 80082fe:	46c0      	nop			; (mov r8, r8)
        }
    }
    return shellShowVar(shell, command);
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	0011      	movs	r1, r2
 8008306:	0018      	movs	r0, r3
 8008308:	f000 f80a 	bl	8008320 <shellShowVar>
 800830c:	0003      	movs	r3, r0
}
 800830e:	0018      	movs	r0, r3
 8008310:	46bd      	mov	sp, r7
 8008312:	b006      	add	sp, #24
 8008314:	bd80      	pop	{r7, pc}
 8008316:	46c0      	nop			; (mov r8, r8)
 8008318:	20000010 	.word	0x20000010
 800831c:	08009e20 	.word	0x08009e20

08008320 <shellShowVar>:
 * @param shell shell对象
 * @param command 命令
 * @return int 返回变量值
 */
static int shellShowVar(Shell *shell, ShellCommand *command)
{
 8008320:	b590      	push	{r4, r7, lr}
 8008322:	b089      	sub	sp, #36	; 0x24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
    char buffer[12] = "00000000000";
 800832a:	230c      	movs	r3, #12
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	4a3f      	ldr	r2, [pc, #252]	; (800842c <shellShowVar+0x10c>)
 8008330:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008332:	c313      	stmia	r3!, {r0, r1, r4}
    int value = shellGetVarValue(shell, command);
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	0011      	movs	r1, r2
 800833a:	0018      	movs	r0, r3
 800833c:	f7ff ff3a 	bl	80081b4 <shellGetVarValue>
 8008340:	0003      	movs	r3, r0
 8008342:	61bb      	str	r3, [r7, #24]
    
    shellWriteString(shell, command->data.var.name);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	0011      	movs	r1, r2
 800834c:	0018      	movs	r0, r3
 800834e:	f7fe fe26 	bl	8006f9e <shellWriteString>
    shellWriteString(shell, " = ");
 8008352:	4a37      	ldr	r2, [pc, #220]	; (8008430 <shellShowVar+0x110>)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	0011      	movs	r1, r2
 8008358:	0018      	movs	r0, r3
 800835a:	f7fe fe20 	bl	8006f9e <shellWriteString>

    switch (command->attr.attrs.type)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	785b      	ldrb	r3, [r3, #1]
 8008362:	071b      	lsls	r3, r3, #28
 8008364:	0f1b      	lsrs	r3, r3, #28
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b05      	cmp	r3, #5
 800836a:	d112      	bne.n	8008392 <shellShowVar+0x72>
    {
    case SHELL_TYPE_VAR_STRING:
        shellWriteString(shell, "\"");
 800836c:	4a31      	ldr	r2, [pc, #196]	; (8008434 <shellShowVar+0x114>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	0011      	movs	r1, r2
 8008372:	0018      	movs	r0, r3
 8008374:	f7fe fe13 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, (char *) (size_t) value);
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0011      	movs	r1, r2
 800837e:	0018      	movs	r0, r3
 8008380:	f7fe fe0d 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, "\"");
 8008384:	4a2b      	ldr	r2, [pc, #172]	; (8008434 <shellShowVar+0x114>)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	0011      	movs	r1, r2
 800838a:	0018      	movs	r0, r3
 800838c:	f7fe fe07 	bl	8006f9e <shellWriteString>
        break;
 8008390:	e041      	b.n	8008416 <shellShowVar+0xf6>
    // case SHELL_TYPE_VAR_INT:
    // case SHELL_TYPE_VAR_SHORT:
    // case SHELL_TYPE_VAR_CHAR:
    // case SHELL_TYPE_VAR_POINT:
    default:
        shellWriteString(shell, &buffer[11 - shellToDec(value, buffer)]);
 8008392:	240c      	movs	r4, #12
 8008394:	193a      	adds	r2, r7, r4
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	0011      	movs	r1, r2
 800839a:	0018      	movs	r0, r3
 800839c:	f7fe ff3c 	bl	8007218 <shellToDec>
 80083a0:	0003      	movs	r3, r0
 80083a2:	001a      	movs	r2, r3
 80083a4:	230b      	movs	r3, #11
 80083a6:	1a9b      	subs	r3, r3, r2
 80083a8:	193a      	adds	r2, r7, r4
 80083aa:	18d2      	adds	r2, r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	0011      	movs	r1, r2
 80083b0:	0018      	movs	r0, r3
 80083b2:	f7fe fdf4 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, ", 0x");
 80083b6:	4a20      	ldr	r2, [pc, #128]	; (8008438 <shellShowVar+0x118>)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	0011      	movs	r1, r2
 80083bc:	0018      	movs	r0, r3
 80083be:	f7fe fdee 	bl	8006f9e <shellWriteString>
        for (short i = 0; i < 11; i++)
 80083c2:	231e      	movs	r3, #30
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	2200      	movs	r2, #0
 80083c8:	801a      	strh	r2, [r3, #0]
 80083ca:	e010      	b.n	80083ee <shellShowVar+0xce>
        {
            buffer[i] = '0';
 80083cc:	201e      	movs	r0, #30
 80083ce:	183b      	adds	r3, r7, r0
 80083d0:	2200      	movs	r2, #0
 80083d2:	5e9b      	ldrsh	r3, [r3, r2]
 80083d4:	220c      	movs	r2, #12
 80083d6:	18ba      	adds	r2, r7, r2
 80083d8:	2130      	movs	r1, #48	; 0x30
 80083da:	54d1      	strb	r1, [r2, r3]
        for (short i = 0; i < 11; i++)
 80083dc:	0001      	movs	r1, r0
 80083de:	187b      	adds	r3, r7, r1
 80083e0:	2200      	movs	r2, #0
 80083e2:	5e9b      	ldrsh	r3, [r3, r2]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3301      	adds	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	187b      	adds	r3, r7, r1
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	231e      	movs	r3, #30
 80083f0:	18fb      	adds	r3, r7, r3
 80083f2:	2200      	movs	r2, #0
 80083f4:	5e9b      	ldrsh	r3, [r3, r2]
 80083f6:	2b0a      	cmp	r3, #10
 80083f8:	dde8      	ble.n	80083cc <shellShowVar+0xac>
        }
        shellToHex(value, buffer);
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	240c      	movs	r4, #12
 80083fe:	193a      	adds	r2, r7, r4
 8008400:	0011      	movs	r1, r2
 8008402:	0018      	movs	r0, r3
 8008404:	f7fe fec8 	bl	8007198 <shellToHex>
        shellWriteString(shell, buffer);
 8008408:	193a      	adds	r2, r7, r4
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	0011      	movs	r1, r2
 800840e:	0018      	movs	r0, r3
 8008410:	f7fe fdc5 	bl	8006f9e <shellWriteString>
        break;
 8008414:	46c0      	nop			; (mov r8, r8)
    }

    shellWriteString(shell, "\r\n");
 8008416:	4a09      	ldr	r2, [pc, #36]	; (800843c <shellShowVar+0x11c>)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	0011      	movs	r1, r2
 800841c:	0018      	movs	r0, r3
 800841e:	f7fe fdbe 	bl	8006f9e <shellWriteString>
    return value;
 8008422:	69bb      	ldr	r3, [r7, #24]
}
 8008424:	0018      	movs	r0, r3
 8008426:	46bd      	mov	sp, r7
 8008428:	b009      	add	sp, #36	; 0x24
 800842a:	bd90      	pop	{r4, r7, pc}
 800842c:	08009c60 	.word	0x08009c60
 8008430:	08009c50 	.word	0x08009c50
 8008434:	08009c54 	.word	0x08009c54
 8008438:	08009c58 	.word	0x08009c58
 800843c:	08009c38 	.word	0x08009c38

08008440 <shellSetVar>:
 * @param name 变量名
 * @param value 变量值
 * @return int 返回变量值
 */
int shellSetVar(char *name, int value)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 800844a:	f7fe fd5f 	bl	8006f0c <shellGetCurrent>
 800844e:	0003      	movs	r3, r0
 8008450:	60fb      	str	r3, [r7, #12]
    if (shell == NULL)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <shellSetVar+0x1c>
    {
        return 0;
 8008458:	2300      	movs	r3, #0
 800845a:	e038      	b.n	80084ce <shellSetVar+0x8e>
    }
    ShellCommand *command = shellSeekCommand(shell,
                                             name,
                                             shell->commandList.base,
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    ShellCommand *command = shellSeekCommand(shell,
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	2300      	movs	r3, #0
 8008466:	f7ff fe31 	bl	80080cc <shellSeekCommand>
 800846a:	0003      	movs	r3, r0
 800846c:	60bb      	str	r3, [r7, #8]
                                             0);
    if (!command)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d108      	bne.n	8008486 <shellSetVar+0x46>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_VAR_NOT_FOUND]);
 8008474:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <shellSetVar+0x98>)
 8008476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	0011      	movs	r1, r2
 800847c:	0018      	movs	r0, r3
 800847e:	f7fe fd8e 	bl	8006f9e <shellWriteString>
        return 0;
 8008482:	2300      	movs	r3, #0
 8008484:	e023      	b.n	80084ce <shellSetVar+0x8e>
    }
    if (command->attr.attrs.type < SHELL_TYPE_VAR_INT
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	071b      	lsls	r3, r3, #28
 800848c:	0f1b      	lsrs	r3, r3, #28
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b01      	cmp	r3, #1
 8008492:	d906      	bls.n	80084a2 <shellSetVar+0x62>
        || command->attr.attrs.type > SHELL_TYPE_VAR_NODE)
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	071b      	lsls	r3, r3, #28
 800849a:	0f1b      	lsrs	r3, r3, #28
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b07      	cmp	r3, #7
 80084a0:	d90e      	bls.n	80084c0 <shellSetVar+0x80>
    {
        shellWriteString(shell, name);
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	0011      	movs	r1, r2
 80084a8:	0018      	movs	r0, r3
 80084aa:	f7fe fd78 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, shellText[SHELL_TEXT_NOT_VAR]);
 80084ae:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <shellSetVar+0x98>)
 80084b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	0011      	movs	r1, r2
 80084b6:	0018      	movs	r0, r3
 80084b8:	f7fe fd71 	bl	8006f9e <shellWriteString>
        return 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	e006      	b.n	80084ce <shellSetVar+0x8e>
    }
    return shellSetVarValue(shell, command, value);
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	0018      	movs	r0, r3
 80084c8:	f7ff feb6 	bl	8008238 <shellSetVarValue>
 80084cc:	0003      	movs	r3, r0
}
 80084ce:	0018      	movs	r0, r3
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b004      	add	sp, #16
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	20000010 	.word	0x20000010

080084dc <shellRunCommand>:
 * @param command 命令
 * 
 * @return unsigned int 命令返回值
 */
unsigned int shellRunCommand(Shell *shell, ShellCommand *command)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
    int returnValue = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
    shell->status.isActive = 1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2260      	movs	r2, #96	; 0x60
 80084ee:	5c99      	ldrb	r1, [r3, r2]
 80084f0:	2002      	movs	r0, #2
 80084f2:	4301      	orrs	r1, r0
 80084f4:	5499      	strb	r1, [r3, r2]
    if (command->attr.attrs.type == SHELL_TYPE_CMD_MAIN)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	220f      	movs	r2, #15
 80084fc:	4013      	ands	r3, r2
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11f      	bne.n	8008544 <shellRunCommand+0x68>
    {
        shellRemoveParamQuotes(shell);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	0018      	movs	r0, r3
 8008508:	f7ff fd70 	bl	8007fec <shellRemoveParamQuotes>
        int (*func)(int, char **) = command->data.cmd.function;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	60bb      	str	r3, [r7, #8]
        returnValue = func(shell->parser.paramCount, shell->parser.param);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008516:	0018      	movs	r0, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3314      	adds	r3, #20
 800851c:	001a      	movs	r2, r3
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	0011      	movs	r1, r2
 8008522:	4798      	blx	r3
 8008524:	0003      	movs	r3, r0
 8008526:	60fb      	str	r3, [r7, #12]
        if (!command->attr.attrs.disableReturn)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	2220      	movs	r2, #32
 800852e:	4013      	ands	r3, r2
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d148      	bne.n	80085c8 <shellRunCommand+0xec>
        {
            shellWriteReturnValue(shell, returnValue);
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	0011      	movs	r1, r2
 800853c:	0018      	movs	r0, r3
 800853e:	f000 f8cd 	bl	80086dc <shellWriteReturnValue>
 8008542:	e041      	b.n	80085c8 <shellRunCommand+0xec>
        }
    }
    else if (command->attr.attrs.type == SHELL_TYPE_CMD_FUNC)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	220f      	movs	r2, #15
 800854a:	4013      	ands	r3, r2
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b01      	cmp	r3, #1
 8008550:	d118      	bne.n	8008584 <shellRunCommand+0xa8>
    {
        returnValue = shellExtRun(shell,
                                  command,
                                  shell->parser.paramCount,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
        returnValue = shellExtRun(shell,
 8008556:	001a      	movs	r2, r3
                                  shell->parser.param);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3314      	adds	r3, #20
        returnValue = shellExtRun(shell,
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 f83a 	bl	80095d8 <shellExtRun>
 8008564:	0003      	movs	r3, r0
 8008566:	60fb      	str	r3, [r7, #12]
        if (!command->attr.attrs.disableReturn)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2220      	movs	r2, #32
 800856e:	4013      	ands	r3, r2
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d128      	bne.n	80085c8 <shellRunCommand+0xec>
        {
            shellWriteReturnValue(shell, returnValue);
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	0011      	movs	r1, r2
 800857c:	0018      	movs	r0, r3
 800857e:	f000 f8ad 	bl	80086dc <shellWriteReturnValue>
 8008582:	e021      	b.n	80085c8 <shellRunCommand+0xec>
        }
    }
    else if (command->attr.attrs.type >= SHELL_TYPE_VAR_INT
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	071b      	lsls	r3, r3, #28
 800858a:	0f1b      	lsrs	r3, r3, #28
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b01      	cmp	r3, #1
 8008590:	d90d      	bls.n	80085ae <shellRunCommand+0xd2>
        && command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	071b      	lsls	r3, r3, #28
 8008598:	0f1b      	lsrs	r3, r3, #28
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b07      	cmp	r3, #7
 800859e:	d806      	bhi.n	80085ae <shellRunCommand+0xd2>
    {
        shellShowVar(shell, command);
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	0011      	movs	r1, r2
 80085a6:	0018      	movs	r0, r3
 80085a8:	f7ff feba 	bl	8008320 <shellShowVar>
 80085ac:	e00c      	b.n	80085c8 <shellRunCommand+0xec>
    }
    else if (command->attr.attrs.type == SHELL_TYPE_USER)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	220f      	movs	r2, #15
 80085b4:	4013      	ands	r3, r2
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d105      	bne.n	80085c8 <shellRunCommand+0xec>
    {
        shellSetUser(shell, command);
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	0011      	movs	r1, r2
 80085c2:	0018      	movs	r0, r3
 80085c4:	f000 f83c 	bl	8008640 <shellSetUser>
    }
    shell->status.isActive = 0;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2260      	movs	r2, #96	; 0x60
 80085cc:	5c99      	ldrb	r1, [r3, r2]
 80085ce:	2002      	movs	r0, #2
 80085d0:	4381      	bics	r1, r0
 80085d2:	5499      	strb	r1, [r3, r2]

    return returnValue;
 80085d4:	68fb      	ldr	r3, [r7, #12]
}
 80085d6:	0018      	movs	r0, r3
 80085d8:	46bd      	mov	sp, r7
 80085da:	b004      	add	sp, #16
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <shellCheckPassword>:
 * @brief shell校验密码
 * 
 * @param shell shell对象
 */
static void shellCheckPassword(Shell *shell)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
    if (strcmp(shell->parser.buffer, shell->info.user->data.user.password) == 0)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	0019      	movs	r1, r3
 80085f4:	0010      	movs	r0, r2
 80085f6:	f7f7 fd87 	bl	8000108 <strcmp>
 80085fa:	1e03      	subs	r3, r0, #0
 80085fc:	d10d      	bne.n	800861a <shellCheckPassword+0x3a>
    {
        shell->status.isChecked = 1;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2260      	movs	r2, #96	; 0x60
 8008602:	5c99      	ldrb	r1, [r3, r2]
 8008604:	2001      	movs	r0, #1
 8008606:	4301      	orrs	r1, r0
 8008608:	5499      	strb	r1, [r3, r2]
    #if SHELL_SHOW_INFO == 1
        shellWriteString(shell, shellText[SHELL_TEXT_INFO]);
 800860a:	4b0c      	ldr	r3, [pc, #48]	; (800863c <shellCheckPassword+0x5c>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	0011      	movs	r1, r2
 8008612:	0018      	movs	r0, r3
 8008614:	f7fe fcc3 	bl	8006f9e <shellWriteString>
 8008618:	e006      	b.n	8008628 <shellCheckPassword+0x48>
    #endif
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_ERROR]);
 800861a:	4b08      	ldr	r3, [pc, #32]	; (800863c <shellCheckPassword+0x5c>)
 800861c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	0011      	movs	r1, r2
 8008622:	0018      	movs	r0, r3
 8008624:	f7fe fcbb 	bl	8006f9e <shellWriteString>
    }
    shell->parser.length = 0;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	819a      	strh	r2, [r3, #12]
    shell->parser.cursor = 0;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	81da      	strh	r2, [r3, #14]
}
 8008634:	46c0      	nop			; (mov r8, r8)
 8008636:	46bd      	mov	sp, r7
 8008638:	b002      	add	sp, #8
 800863a:	bd80      	pop	{r7, pc}
 800863c:	20000010 	.word	0x20000010

08008640 <shellSetUser>:
 * 
 * @param shell shell对象
 * @param user 用户
 */
void shellSetUser(Shell *shell, const ShellCommand *user)
{
 8008640:	b590      	push	{r4, r7, lr}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
    shell->info.user = user;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	601a      	str	r2, [r3, #0]
    shell->status.isChecked = 
        ((user->data.user.password && strlen(user->data.user.password) != 0)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
            && (shell->parser.paramCount < 2
                || strcmp(user->data.user.password, shell->parser.param[1]) != 0))
         ? 0 : 1;
 8008654:	2b00      	cmp	r3, #0
 8008656:	d012      	beq.n	800867e <shellSetUser+0x3e>
        ((user->data.user.password && strlen(user->data.user.password) != 0)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00d      	beq.n	800867e <shellSetUser+0x3e>
            && (shell->parser.paramCount < 2
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
         ? 0 : 1;
 8008666:	2b01      	cmp	r3, #1
 8008668:	d90b      	bls.n	8008682 <shellSetUser+0x42>
                || strcmp(user->data.user.password, shell->parser.param[1]) != 0))
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	0019      	movs	r1, r3
 8008674:	0010      	movs	r0, r2
 8008676:	f7f7 fd47 	bl	8000108 <strcmp>
 800867a:	1e03      	subs	r3, r0, #0
 800867c:	d101      	bne.n	8008682 <shellSetUser+0x42>
         ? 0 : 1;
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <shellSetUser+0x44>
 8008682:	2300      	movs	r3, #0
 8008684:	1c1a      	adds	r2, r3, #0
 8008686:	2301      	movs	r3, #1
 8008688:	4013      	ands	r3, r2
 800868a:	b2d9      	uxtb	r1, r3
    shell->status.isChecked = 
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2260      	movs	r2, #96	; 0x60
 8008690:	2001      	movs	r0, #1
 8008692:	4001      	ands	r1, r0
 8008694:	000c      	movs	r4, r1
 8008696:	5c99      	ldrb	r1, [r3, r2]
 8008698:	2001      	movs	r0, #1
 800869a:	4381      	bics	r1, r0
 800869c:	1c08      	adds	r0, r1, #0
 800869e:	1c21      	adds	r1, r4, #0
 80086a0:	4301      	orrs	r1, r0
 80086a2:	5499      	strb	r1, [r3, r2]
        
#if SHELL_CLS_WHEN_LOGIN == 1
    shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 80086a4:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <shellSetUser+0x98>)
 80086a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	0011      	movs	r1, r2
 80086ac:	0018      	movs	r0, r3
 80086ae:	f7fe fc76 	bl	8006f9e <shellWriteString>
#endif
#if SHELL_SHOW_INFO == 1
    if (shell->status.isChecked)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2260      	movs	r2, #96	; 0x60
 80086b6:	5c9b      	ldrb	r3, [r3, r2]
 80086b8:	2201      	movs	r2, #1
 80086ba:	4013      	ands	r3, r2
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d006      	beq.n	80086d0 <shellSetUser+0x90>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_INFO]);
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <shellSetUser+0x98>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	0011      	movs	r1, r2
 80086ca:	0018      	movs	r0, r3
 80086cc:	f7fe fc67 	bl	8006f9e <shellWriteString>
    }
#endif
}
 80086d0:	46c0      	nop			; (mov r8, r8)
 80086d2:	46bd      	mov	sp, r7
 80086d4:	b003      	add	sp, #12
 80086d6:	bd90      	pop	{r4, r7, pc}
 80086d8:	20000010 	.word	0x20000010

080086dc <shellWriteReturnValue>:
 * 
 * @param shell shell对象
 * @param value 返回值
 */
static void shellWriteReturnValue(Shell *shell, int value)
{
 80086dc:	b5b0      	push	{r4, r5, r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
    char buffer[12] = "00000000000";
 80086e6:	2508      	movs	r5, #8
 80086e8:	197b      	adds	r3, r7, r5
 80086ea:	4a2a      	ldr	r2, [pc, #168]	; (8008794 <shellWriteReturnValue+0xb8>)
 80086ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80086ee:	c313      	stmia	r3!, {r0, r1, r4}
    shellWriteString(shell, "Return: ");
 80086f0:	4a29      	ldr	r2, [pc, #164]	; (8008798 <shellWriteReturnValue+0xbc>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	0011      	movs	r1, r2
 80086f6:	0018      	movs	r0, r3
 80086f8:	f7fe fc51 	bl	8006f9e <shellWriteString>
    shellWriteString(shell, &buffer[11 - shellToDec(value, buffer)]);
 80086fc:	002c      	movs	r4, r5
 80086fe:	193a      	adds	r2, r7, r4
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f7fe fd87 	bl	8007218 <shellToDec>
 800870a:	0003      	movs	r3, r0
 800870c:	001a      	movs	r2, r3
 800870e:	230b      	movs	r3, #11
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	193a      	adds	r2, r7, r4
 8008714:	18d2      	adds	r2, r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	0011      	movs	r1, r2
 800871a:	0018      	movs	r0, r3
 800871c:	f7fe fc3f 	bl	8006f9e <shellWriteString>
    shellWriteString(shell, ", 0x");
 8008720:	4a1e      	ldr	r2, [pc, #120]	; (800879c <shellWriteReturnValue+0xc0>)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	0011      	movs	r1, r2
 8008726:	0018      	movs	r0, r3
 8008728:	f7fe fc39 	bl	8006f9e <shellWriteString>
    for (short i = 0; i < 11; i++)
 800872c:	2316      	movs	r3, #22
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	2200      	movs	r2, #0
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	e010      	b.n	8008758 <shellWriteReturnValue+0x7c>
    {
        buffer[i] = '0';
 8008736:	2016      	movs	r0, #22
 8008738:	183b      	adds	r3, r7, r0
 800873a:	2200      	movs	r2, #0
 800873c:	5e9b      	ldrsh	r3, [r3, r2]
 800873e:	2208      	movs	r2, #8
 8008740:	18ba      	adds	r2, r7, r2
 8008742:	2130      	movs	r1, #48	; 0x30
 8008744:	54d1      	strb	r1, [r2, r3]
    for (short i = 0; i < 11; i++)
 8008746:	0001      	movs	r1, r0
 8008748:	187b      	adds	r3, r7, r1
 800874a:	2200      	movs	r2, #0
 800874c:	5e9b      	ldrsh	r3, [r3, r2]
 800874e:	b29b      	uxth	r3, r3
 8008750:	3301      	adds	r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	187b      	adds	r3, r7, r1
 8008756:	801a      	strh	r2, [r3, #0]
 8008758:	2316      	movs	r3, #22
 800875a:	18fb      	adds	r3, r7, r3
 800875c:	2200      	movs	r2, #0
 800875e:	5e9b      	ldrsh	r3, [r3, r2]
 8008760:	2b0a      	cmp	r3, #10
 8008762:	dde8      	ble.n	8008736 <shellWriteReturnValue+0x5a>
    }
    shellToHex(value, buffer);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2408      	movs	r4, #8
 8008768:	193a      	adds	r2, r7, r4
 800876a:	0011      	movs	r1, r2
 800876c:	0018      	movs	r0, r3
 800876e:	f7fe fd13 	bl	8007198 <shellToHex>
    shellWriteString(shell, buffer);
 8008772:	193a      	adds	r2, r7, r4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	0011      	movs	r1, r2
 8008778:	0018      	movs	r0, r3
 800877a:	f7fe fc10 	bl	8006f9e <shellWriteString>
    shellWriteString(shell, "\r\n");
 800877e:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <shellWriteReturnValue+0xc4>)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	0011      	movs	r1, r2
 8008784:	0018      	movs	r0, r3
 8008786:	f7fe fc0a 	bl	8006f9e <shellWriteString>
#if SHELL_KEEP_RETURN_VALUE == 1
    shell->info.retVal = value;
#endif
}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	46bd      	mov	sp, r7
 800878e:	b006      	add	sp, #24
 8008790:	bdb0      	pop	{r4, r5, r7, pc}
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	08009c60 	.word	0x08009c60
 8008798:	08009c6c 	.word	0x08009c6c
 800879c:	08009c58 	.word	0x08009c58
 80087a0:	08009c38 	.word	0x08009c38

080087a4 <shellHistoryAdd>:
 * @brief shell历史记录添加
 * 
 * @param shell shell对象
 */
static void shellHistoryAdd(Shell *shell)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
    shell->history.offset = 0;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2254      	movs	r2, #84	; 0x54
 80087b0:	2100      	movs	r1, #0
 80087b2:	5299      	strh	r1, [r3, r2]
    if (shell->history.number > 0
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2250      	movs	r2, #80	; 0x50
 80087b8:	5a9b      	ldrh	r3, [r3, r2]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d018      	beq.n	80087f0 <shellHistoryAdd+0x4c>
        && strcmp(shell->history.item[(shell->history.record == 0 ? 
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2252      	movs	r2, #82	; 0x52
 80087c2:	5a9b      	ldrh	r3, [r3, r2]
                SHELL_HISTORY_MAX_NUMBER : shell->history.record) - 1],
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d004      	beq.n	80087d2 <shellHistoryAdd+0x2e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2252      	movs	r2, #82	; 0x52
 80087cc:	5a9b      	ldrh	r3, [r3, r2]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	e000      	b.n	80087d4 <shellHistoryAdd+0x30>
 80087d2:	2304      	movs	r3, #4
        && strcmp(shell->history.item[(shell->history.record == 0 ? 
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	330e      	adds	r3, #14
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	18d3      	adds	r3, r2, r3
 80087dc:	3304      	adds	r3, #4
 80087de:	681a      	ldr	r2, [r3, #0]
                shell->parser.buffer) == 0)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
        && strcmp(shell->history.item[(shell->history.record == 0 ? 
 80087e4:	0019      	movs	r1, r3
 80087e6:	0010      	movs	r0, r2
 80087e8:	f7f7 fc8e 	bl	8000108 <strcmp>
 80087ec:	1e03      	subs	r3, r0, #0
 80087ee:	d033      	beq.n	8008858 <shellHistoryAdd+0xb4>
    {
        return;
    }
    if (shellStringCopy(shell->history.item[shell->history.record],
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2252      	movs	r2, #82	; 0x52
 80087f4:	5a9b      	ldrh	r3, [r3, r2]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	330e      	adds	r3, #14
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	18d3      	adds	r3, r2, r3
 80087fe:	3304      	adds	r3, #4
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	0019      	movs	r1, r3
 8008808:	0010      	movs	r0, r2
 800880a:	f7fe fd62 	bl	80072d2 <shellStringCopy>
 800880e:	1e03      	subs	r3, r0, #0
 8008810:	d007      	beq.n	8008822 <shellHistoryAdd+0x7e>
                        shell->parser.buffer) != 0)
    {
        shell->history.record++;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2252      	movs	r2, #82	; 0x52
 8008816:	5a9b      	ldrh	r3, [r3, r2]
 8008818:	3301      	adds	r3, #1
 800881a:	b299      	uxth	r1, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2252      	movs	r2, #82	; 0x52
 8008820:	5299      	strh	r1, [r3, r2]
    }
    if (++shell->history.number > SHELL_HISTORY_MAX_NUMBER)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2250      	movs	r2, #80	; 0x50
 8008826:	5a9b      	ldrh	r3, [r3, r2]
 8008828:	3301      	adds	r3, #1
 800882a:	b299      	uxth	r1, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2250      	movs	r2, #80	; 0x50
 8008830:	5299      	strh	r1, [r3, r2]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2250      	movs	r2, #80	; 0x50
 8008836:	5a9b      	ldrh	r3, [r3, r2]
 8008838:	2b05      	cmp	r3, #5
 800883a:	d903      	bls.n	8008844 <shellHistoryAdd+0xa0>
    {
        shell->history.number = SHELL_HISTORY_MAX_NUMBER;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2250      	movs	r2, #80	; 0x50
 8008840:	2105      	movs	r1, #5
 8008842:	5299      	strh	r1, [r3, r2]
    }
    if (shell->history.record >= SHELL_HISTORY_MAX_NUMBER)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2252      	movs	r2, #82	; 0x52
 8008848:	5a9b      	ldrh	r3, [r3, r2]
 800884a:	2b04      	cmp	r3, #4
 800884c:	d905      	bls.n	800885a <shellHistoryAdd+0xb6>
    {
        shell->history.record = 0;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2252      	movs	r2, #82	; 0x52
 8008852:	2100      	movs	r1, #0
 8008854:	5299      	strh	r1, [r3, r2]
 8008856:	e000      	b.n	800885a <shellHistoryAdd+0xb6>
        return;
 8008858:	46c0      	nop			; (mov r8, r8)
    }
}
 800885a:	46bd      	mov	sp, r7
 800885c:	b002      	add	sp, #8
 800885e:	bd80      	pop	{r7, pc}

08008860 <shellHistory>:
 * 
 * @param shell shell对象
 * @param dir 方向 {@code <0}往上查找 {@code >0}往下查找
 */
static void shellHistory(Shell *shell, signed char dir)
{
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	000a      	movs	r2, r1
 800886a:	1cfb      	adds	r3, r7, #3
 800886c:	701a      	strb	r2, [r3, #0]
    if (dir > 0)
 800886e:	1cfb      	adds	r3, r7, #3
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b25b      	sxtb	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	dd2d      	ble.n	80088d4 <shellHistory+0x74>
    {
        if (shell->history.offset-- <= 
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2254      	movs	r2, #84	; 0x54
 800887c:	5e99      	ldrsh	r1, [r3, r2]
 800887e:	b28b      	uxth	r3, r1
 8008880:	3b01      	subs	r3, #1
 8008882:	b29b      	uxth	r3, r3
 8008884:	b218      	sxth	r0, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2254      	movs	r2, #84	; 0x54
 800888a:	5298      	strh	r0, [r3, r2]
            -((shell->history.number > shell->history.record) ?
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2252      	movs	r2, #82	; 0x52
 8008890:	5a98      	ldrh	r0, [r3, r2]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2250      	movs	r2, #80	; 0x50
 8008896:	5a9b      	ldrh	r3, [r3, r2]
                shell->history.number : shell->history.record))
 8008898:	1c1c      	adds	r4, r3, #0
 800889a:	b282      	uxth	r2, r0
 800889c:	b2a3      	uxth	r3, r4
 800889e:	429a      	cmp	r2, r3
 80088a0:	d200      	bcs.n	80088a4 <shellHistory+0x44>
 80088a2:	1c20      	adds	r0, r4, #0
 80088a4:	b283      	uxth	r3, r0
            -((shell->history.number > shell->history.record) ?
 80088a6:	425b      	negs	r3, r3
        if (shell->history.offset-- <= 
 80088a8:	4299      	cmp	r1, r3
 80088aa:	dc2b      	bgt.n	8008904 <shellHistory+0xa4>
        {
            shell->history.offset = -((shell->history.number > shell->history.record)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2252      	movs	r2, #82	; 0x52
 80088b0:	5a99      	ldrh	r1, [r3, r2]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2250      	movs	r2, #80	; 0x50
 80088b6:	5a9b      	ldrh	r3, [r3, r2]
                                    ? shell->history.number : shell->history.record);
 80088b8:	1c18      	adds	r0, r3, #0
 80088ba:	b28a      	uxth	r2, r1
 80088bc:	b283      	uxth	r3, r0
 80088be:	429a      	cmp	r2, r3
 80088c0:	d200      	bcs.n	80088c4 <shellHistory+0x64>
 80088c2:	1c01      	adds	r1, r0, #0
 80088c4:	b28b      	uxth	r3, r1
            shell->history.offset = -((shell->history.number > shell->history.record)
 80088c6:	425b      	negs	r3, r3
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	b219      	sxth	r1, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2254      	movs	r2, #84	; 0x54
 80088d0:	5299      	strh	r1, [r3, r2]
 80088d2:	e017      	b.n	8008904 <shellHistory+0xa4>
        }
    }
    else if (dir < 0)
 80088d4:	1cfb      	adds	r3, r7, #3
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b7f      	cmp	r3, #127	; 0x7f
 80088da:	d951      	bls.n	8008980 <shellHistory+0x120>
    {
        if (++shell->history.offset > 0)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2254      	movs	r2, #84	; 0x54
 80088e0:	5e9b      	ldrsh	r3, [r3, r2]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3301      	adds	r3, #1
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	b219      	sxth	r1, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2254      	movs	r2, #84	; 0x54
 80088ee:	5299      	strh	r1, [r3, r2]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2254      	movs	r2, #84	; 0x54
 80088f4:	5e9b      	ldrsh	r3, [r3, r2]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd04      	ble.n	8008904 <shellHistory+0xa4>
        {
            shell->history.offset = 0;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2254      	movs	r2, #84	; 0x54
 80088fe:	2100      	movs	r1, #0
 8008900:	5299      	strh	r1, [r3, r2]
            return;
 8008902:	e040      	b.n	8008986 <shellHistory+0x126>
    }
    else
    {
        return;
    }
    shellClearCommandLine(shell);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	0018      	movs	r0, r3
 8008908:	f7ff f81c 	bl	8007944 <shellClearCommandLine>
    if (shell->history.offset == 0)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2254      	movs	r2, #84	; 0x54
 8008910:	5e9b      	ldrsh	r3, [r3, r2]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d107      	bne.n	8008926 <shellHistory+0xc6>
    {
        shell->parser.cursor = shell->parser.length = 0;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	819a      	strh	r2, [r3, #12]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	899a      	ldrh	r2, [r3, #12]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	81da      	strh	r2, [r3, #14]
 8008924:	e02f      	b.n	8008986 <shellHistory+0x126>
    }
    else
    {
        if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691c      	ldr	r4, [r3, #16]
                shell->history.item[(shell->history.record + SHELL_HISTORY_MAX_NUMBER
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2252      	movs	r2, #82	; 0x52
 800892e:	5a9b      	ldrh	r3, [r3, r2]
 8008930:	3305      	adds	r3, #5
                    + shell->history.offset) % SHELL_HISTORY_MAX_NUMBER])) == 0)
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	2154      	movs	r1, #84	; 0x54
 8008936:	5e52      	ldrsh	r2, [r2, r1]
 8008938:	189b      	adds	r3, r3, r2
 800893a:	2105      	movs	r1, #5
 800893c:	0018      	movs	r0, r3
 800893e:	f7f7 fd65 	bl	800040c <__aeabi_idivmod>
 8008942:	000b      	movs	r3, r1
        if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	330e      	adds	r3, #14
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	18d3      	adds	r3, r2, r3
 800894c:	3304      	adds	r3, #4
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	0019      	movs	r1, r3
 8008952:	0020      	movs	r0, r4
 8008954:	f7fe fcbd 	bl	80072d2 <shellStringCopy>
 8008958:	0003      	movs	r3, r0
 800895a:	001a      	movs	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	819a      	strh	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	899b      	ldrh	r3, [r3, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00d      	beq.n	8008984 <shellHistory+0x124>
        {
            return;
        }
        shell->parser.cursor = shell->parser.length;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	899a      	ldrh	r2, [r3, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	81da      	strh	r2, [r3, #14]
        shellWriteString(shell, shell->parser.buffer);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	0011      	movs	r1, r2
 8008978:	0018      	movs	r0, r3
 800897a:	f7fe fb10 	bl	8006f9e <shellWriteString>
 800897e:	e002      	b.n	8008986 <shellHistory+0x126>
        return;
 8008980:	46c0      	nop			; (mov r8, r8)
 8008982:	e000      	b.n	8008986 <shellHistory+0x126>
            return;
 8008984:	46c0      	nop			; (mov r8, r8)
    }
    
}
 8008986:	46bd      	mov	sp, r7
 8008988:	b003      	add	sp, #12
 800898a:	bd90      	pop	{r4, r7, pc}

0800898c <shellNormalInput>:
 * 
 * @param shell shell 对象
 * @param data 输入字符
 */
void shellNormalInput(Shell *shell, char data)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	000a      	movs	r2, r1
 8008996:	1cfb      	adds	r3, r7, #3
 8008998:	701a      	strb	r2, [r3, #0]
    shell->status.tabFlag = 0;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2260      	movs	r2, #96	; 0x60
 800899e:	5c99      	ldrb	r1, [r3, r2]
 80089a0:	2004      	movs	r0, #4
 80089a2:	4381      	bics	r1, r0
 80089a4:	5499      	strb	r1, [r3, r2]
    shellInsertByte(shell, data);
 80089a6:	1cfb      	adds	r3, r7, #3
 80089a8:	781a      	ldrb	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	0011      	movs	r1, r2
 80089ae:	0018      	movs	r0, r3
 80089b0:	f7fe fff6 	bl	80079a0 <shellInsertByte>
}
 80089b4:	46c0      	nop			; (mov r8, r8)
 80089b6:	46bd      	mov	sp, r7
 80089b8:	b002      	add	sp, #8
 80089ba:	bd80      	pop	{r7, pc}

080089bc <shellExec>:
 * @brief shell运行命令
 * 
 * @param shell shell对象
 */
void shellExec(Shell *shell)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
    
    if (shell->parser.length == 0)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	899b      	ldrh	r3, [r3, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d048      	beq.n	8008a5e <shellExec+0xa2>
    {
        return;
    }

    shell->parser.buffer[shell->parser.length] = 0;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	8992      	ldrh	r2, [r2, #12]
 80089d4:	189b      	adds	r3, r3, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]

    if (shell->status.isChecked)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2260      	movs	r2, #96	; 0x60
 80089de:	5c9b      	ldrb	r3, [r3, r2]
 80089e0:	2201      	movs	r2, #1
 80089e2:	4013      	ands	r3, r2
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d034      	beq.n	8008a54 <shellExec+0x98>
    {
    #if SHELL_HISTORY_MAX_NUMBER > 0
        shellHistoryAdd(shell);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	0018      	movs	r0, r3
 80089ee:	f7ff fed9 	bl	80087a4 <shellHistoryAdd>
    #endif /** SHELL_HISTORY_MAX_NUMBER > 0 */
        shellParserParam(shell);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	0018      	movs	r0, r3
 80089f6:	f7ff fae1 	bl	8007fbc <shellParserParam>
        shell->parser.length = shell->parser.cursor = 0;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	81da      	strh	r2, [r3, #14]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	89da      	ldrh	r2, [r3, #14]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	819a      	strh	r2, [r3, #12]
        if (shell->parser.paramCount == 0)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d028      	beq.n	8008a62 <shellExec+0xa6>
        {
            return;
        }
        shellWriteString(shell, "\r\n");
 8008a10:	4a16      	ldr	r2, [pc, #88]	; (8008a6c <shellExec+0xb0>)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	0011      	movs	r1, r2
 8008a16:	0018      	movs	r0, r3
 8008a18:	f7fe fac1 	bl	8006f9e <shellWriteString>

        ShellCommand *command = shellSeekCommand(shell,
                                                 shell->parser.param[0],
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6959      	ldr	r1, [r3, #20]
                                                 shell->commandList.base,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
        ShellCommand *command = shellSeekCommand(shell,
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	2300      	movs	r3, #0
 8008a28:	f7ff fb50 	bl	80080cc <shellSeekCommand>
 8008a2c:	0003      	movs	r3, r0
 8008a2e:	60fb      	str	r3, [r7, #12]
                                                 0);
        if (command != NULL)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d006      	beq.n	8008a44 <shellExec+0x88>
        {
            shellRunCommand(shell, command);
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	0011      	movs	r1, r2
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7ff fd4d 	bl	80084dc <shellRunCommand>
 8008a42:	e00f      	b.n	8008a64 <shellExec+0xa8>
        }
        else
        {
            shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
 8008a44:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <shellExec+0xb4>)
 8008a46:	699a      	ldr	r2, [r3, #24]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	0011      	movs	r1, r2
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7fe faa6 	bl	8006f9e <shellWriteString>
 8008a52:	e007      	b.n	8008a64 <shellExec+0xa8>
        }
    }
    else
    {
        shellCheckPassword(shell);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	0018      	movs	r0, r3
 8008a58:	f7ff fdc2 	bl	80085e0 <shellCheckPassword>
 8008a5c:	e002      	b.n	8008a64 <shellExec+0xa8>
        return;
 8008a5e:	46c0      	nop			; (mov r8, r8)
 8008a60:	e000      	b.n	8008a64 <shellExec+0xa8>
            return;
 8008a62:	46c0      	nop			; (mov r8, r8)
    }
}
 8008a64:	46bd      	mov	sp, r7
 8008a66:	b004      	add	sp, #16
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	08009c38 	.word	0x08009c38
 8008a70:	20000010 	.word	0x20000010

08008a74 <shellUp>:
 * @brief shell上方向键输入
 * 
 * @param shell shell对象
 */
void shellUp(Shell *shell)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
    shellHistory(shell, 1);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2101      	movs	r1, #1
 8008a80:	0018      	movs	r0, r3
 8008a82:	f7ff feed 	bl	8008860 <shellHistory>
}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	b002      	add	sp, #8
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <shellDown>:
 * @brief shell下方向键输入
 * 
 * @param shell shell对象
 */
void shellDown(Shell *shell)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
    shellHistory(shell, -1);
 8008a96:	2301      	movs	r3, #1
 8008a98:	425a      	negs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	0011      	movs	r1, r2
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f7ff fede 	bl	8008860 <shellHistory>
}
 8008aa4:	46c0      	nop			; (mov r8, r8)
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	b002      	add	sp, #8
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <shellRight>:
 * @brief shell右方向键输入
 * 
 * @param shell shell对象
 */
void shellRight(Shell *shell)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
    if (shell->parser.cursor < shell->parser.length)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	89da      	ldrh	r2, [r3, #14]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	899b      	ldrh	r3, [r3, #12]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d20e      	bcs.n	8008ade <shellRight+0x32>
    {
        shellWriteByte(shell, shell->parser.buffer[shell->parser.cursor++]);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691a      	ldr	r2, [r3, #16]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	89db      	ldrh	r3, [r3, #14]
 8008ac8:	1c59      	adds	r1, r3, #1
 8008aca:	b288      	uxth	r0, r1
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	81c8      	strh	r0, [r1, #14]
 8008ad0:	18d3      	adds	r3, r2, r3
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7fe fa4f 	bl	8006f7c <shellWriteByte>
    }
}
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	b002      	add	sp, #8
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <shellLeft>:
 * @brief shell左方向键输入
 * 
 * @param shell shell对象
 */
void shellLeft(Shell *shell)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
    if (shell->parser.cursor > 0)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	89db      	ldrh	r3, [r3, #14]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <shellLeft+0x26>
    {
        shellWriteByte(shell, '\b');
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2108      	movs	r1, #8
 8008afa:	0018      	movs	r0, r3
 8008afc:	f7fe fa3e 	bl	8006f7c <shellWriteByte>
        shell->parser.cursor--;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	89db      	ldrh	r3, [r3, #14]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	81da      	strh	r2, [r3, #14]
    }
}
 8008b0c:	46c0      	nop			; (mov r8, r8)
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b002      	add	sp, #8
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <shellTab>:
 * @brief shell Tab按键处理
 * 
 * @param shell shell对象
 */
void shellTab(Shell *shell)
{
 8008b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
    unsigned short maxMatch = shell->parser.bufferSize;
 8008b1c:	2314      	movs	r3, #20
 8008b1e:	18fb      	adds	r3, r7, r3
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8008b24:	801a      	strh	r2, [r3, #0]
    unsigned short lastMatchIndex = 0;
 8008b26:	2316      	movs	r3, #22
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	801a      	strh	r2, [r3, #0]
    unsigned short matchNum = 0;
 8008b2e:	2312      	movs	r3, #18
 8008b30:	18fb      	adds	r3, r7, r3
 8008b32:	2200      	movs	r2, #0
 8008b34:	801a      	strh	r2, [r3, #0]
    unsigned short length;

    if (shell->parser.length == 0)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	899b      	ldrh	r3, [r3, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d109      	bne.n	8008b52 <shellTab+0x3e>
    {
        shellListAll(shell);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	0018      	movs	r0, r3
 8008b42:	f7fe fed3 	bl	80078ec <shellListAll>
        shellWritePrompt(shell, 1);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2101      	movs	r1, #1
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7fe faa0 	bl	8007090 <shellWritePrompt>
 8008b50:	e0ec      	b.n	8008d2c <shellTab+0x218>
    }
    else if (shell->parser.length > 0)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	899b      	ldrh	r3, [r3, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d100      	bne.n	8008b5c <shellTab+0x48>
 8008b5a:	e0e7      	b.n	8008d2c <shellTab+0x218>
    {
        shell->parser.buffer[shell->parser.length] = 0;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	8992      	ldrh	r2, [r2, #12]
 8008b64:	189b      	adds	r3, r3, r2
 8008b66:	2200      	movs	r2, #0
 8008b68:	701a      	strb	r2, [r3, #0]
        ShellCommand *base = (ShellCommand *)shell->commandList.base;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6e:	60fb      	str	r3, [r7, #12]
        for (short i = 0; i < shell->commandList.count; i++)
 8008b70:	2310      	movs	r3, #16
 8008b72:	18fb      	adds	r3, r7, r3
 8008b74:	2200      	movs	r2, #0
 8008b76:	801a      	strh	r2, [r3, #0]
 8008b78:	e07a      	b.n	8008c70 <shellTab+0x15c>
        {
            if (shellCheckPermission(shell, &base[i]) == 0
 8008b7a:	2510      	movs	r5, #16
 8008b7c:	197b      	adds	r3, r7, r5
 8008b7e:	2200      	movs	r2, #0
 8008b80:	5e9b      	ldrsh	r3, [r3, r2]
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	18d2      	adds	r2, r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	0011      	movs	r1, r2
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f7fe facf 	bl	8007130 <shellCheckPermission>
 8008b92:	1e03      	subs	r3, r0, #0
 8008b94:	d163      	bne.n	8008c5e <shellTab+0x14a>
                && shellStringCompare(shell->parser.buffer,
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691c      	ldr	r4, [r3, #16]
                                   (char *)shellGetCommandName(&base[i]))
 8008b9a:	197b      	adds	r3, r7, r5
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	5e9b      	ldrsh	r3, [r3, r2]
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	18d3      	adds	r3, r2, r3
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f7fe fc00 	bl	80073ac <shellGetCommandName>
 8008bac:	0003      	movs	r3, r0
                && shellStringCompare(shell->parser.buffer,
 8008bae:	0019      	movs	r1, r3
 8008bb0:	0020      	movs	r0, r4
 8008bb2:	f7fe fbbc 	bl	800732e <shellStringCompare>
 8008bb6:	0003      	movs	r3, r0
 8008bb8:	001a      	movs	r2, r3
                        == shell->parser.length)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	899b      	ldrh	r3, [r3, #12]
                && shellStringCompare(shell->parser.buffer,
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d14d      	bne.n	8008c5e <shellTab+0x14a>
            {
                if (matchNum != 0)
 8008bc2:	2212      	movs	r2, #18
 8008bc4:	18bb      	adds	r3, r7, r2
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d03c      	beq.n	8008c46 <shellTab+0x132>
                {
                    if (matchNum == 1)
 8008bcc:	18bb      	adds	r3, r7, r2
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d105      	bne.n	8008be0 <shellTab+0xcc>
                    {
                        shellWriteString(shell, "\r\n");
 8008bd4:	4a57      	ldr	r2, [pc, #348]	; (8008d34 <shellTab+0x220>)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	0011      	movs	r1, r2
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f7fe f9df 	bl	8006f9e <shellWriteString>
                    }
                    shellListItem(shell, &base[lastMatchIndex]);
 8008be0:	2416      	movs	r4, #22
 8008be2:	193b      	adds	r3, r7, r4
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	18d2      	adds	r2, r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	0011      	movs	r1, r2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f7fe fc49 	bl	8007488 <shellListItem>
                    length = 
                        shellStringCompare((char *)shellGetCommandName(&base[lastMatchIndex]),
 8008bf6:	193b      	adds	r3, r7, r4
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	18d3      	adds	r3, r2, r3
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7fe fbd3 	bl	80073ac <shellGetCommandName>
 8008c06:	0005      	movs	r5, r0
                                           (char *)shellGetCommandName(&base[i]));
 8008c08:	2310      	movs	r3, #16
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	5e9b      	ldrsh	r3, [r3, r2]
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	18d3      	adds	r3, r2, r3
 8008c16:	0018      	movs	r0, r3
 8008c18:	f7fe fbc8 	bl	80073ac <shellGetCommandName>
 8008c1c:	0003      	movs	r3, r0
                        shellStringCompare((char *)shellGetCommandName(&base[lastMatchIndex]),
 8008c1e:	260a      	movs	r6, #10
 8008c20:	19bc      	adds	r4, r7, r6
 8008c22:	0019      	movs	r1, r3
 8008c24:	0028      	movs	r0, r5
 8008c26:	f7fe fb82 	bl	800732e <shellStringCompare>
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	8023      	strh	r3, [r4, #0]
                    maxMatch = (maxMatch > length) ? length : maxMatch;
 8008c2e:	2314      	movs	r3, #20
 8008c30:	18fa      	adds	r2, r7, r3
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	19b9      	adds	r1, r7, r6
 8008c36:	880c      	ldrh	r4, [r1, #0]
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	b298      	uxth	r0, r3
 8008c3c:	b2a1      	uxth	r1, r4
 8008c3e:	4288      	cmp	r0, r1
 8008c40:	d900      	bls.n	8008c44 <shellTab+0x130>
 8008c42:	1c23      	adds	r3, r4, #0
 8008c44:	8013      	strh	r3, [r2, #0]
                }
                lastMatchIndex = i;
 8008c46:	2316      	movs	r3, #22
 8008c48:	18fb      	adds	r3, r7, r3
 8008c4a:	2210      	movs	r2, #16
 8008c4c:	18ba      	adds	r2, r7, r2
 8008c4e:	8812      	ldrh	r2, [r2, #0]
 8008c50:	801a      	strh	r2, [r3, #0]
                matchNum++;
 8008c52:	2112      	movs	r1, #18
 8008c54:	187b      	adds	r3, r7, r1
 8008c56:	881a      	ldrh	r2, [r3, #0]
 8008c58:	187b      	adds	r3, r7, r1
 8008c5a:	3201      	adds	r2, #1
 8008c5c:	801a      	strh	r2, [r3, #0]
        for (short i = 0; i < shell->commandList.count; i++)
 8008c5e:	2110      	movs	r1, #16
 8008c60:	187b      	adds	r3, r7, r1
 8008c62:	2200      	movs	r2, #0
 8008c64:	5e9b      	ldrsh	r3, [r3, r2]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	3301      	adds	r3, #1
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	187b      	adds	r3, r7, r1
 8008c6e:	801a      	strh	r2, [r3, #0]
 8008c70:	2310      	movs	r3, #16
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	2200      	movs	r2, #0
 8008c76:	5e9b      	ldrsh	r3, [r3, r2]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	215c      	movs	r1, #92	; 0x5c
 8008c7c:	5a52      	ldrh	r2, [r2, r1]
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	da00      	bge.n	8008c84 <shellTab+0x170>
 8008c82:	e77a      	b.n	8008b7a <shellTab+0x66>
            }
        }
        if (matchNum == 0)
 8008c84:	2212      	movs	r2, #18
 8008c86:	18bb      	adds	r3, r7, r2
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d04d      	beq.n	8008d2a <shellTab+0x216>
        {
            return;
        }
        if (matchNum == 1)
 8008c8e:	18bb      	adds	r3, r7, r2
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d103      	bne.n	8008c9e <shellTab+0x18a>
        {
            shellClearCommandLine(shell);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	0018      	movs	r0, r3
 8008c9a:	f7fe fe53 	bl	8007944 <shellClearCommandLine>
        }
        if (matchNum != 0)
 8008c9e:	2312      	movs	r3, #18
 8008ca0:	18fb      	adds	r3, r7, r3
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d013      	beq.n	8008cd0 <shellTab+0x1bc>
        {
            shell->parser.length = 
                shellStringCopy(shell->parser.buffer,
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691c      	ldr	r4, [r3, #16]
                                (char *)shellGetCommandName(&base[lastMatchIndex]));
 8008cac:	2316      	movs	r3, #22
 8008cae:	18fb      	adds	r3, r7, r3
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	18d3      	adds	r3, r2, r3
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7fe fb77 	bl	80073ac <shellGetCommandName>
 8008cbe:	0003      	movs	r3, r0
                shellStringCopy(shell->parser.buffer,
 8008cc0:	0019      	movs	r1, r3
 8008cc2:	0020      	movs	r0, r4
 8008cc4:	f7fe fb05 	bl	80072d2 <shellStringCopy>
 8008cc8:	0003      	movs	r3, r0
 8008cca:	001a      	movs	r2, r3
            shell->parser.length = 
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	819a      	strh	r2, [r3, #12]
        }
        if (matchNum > 1)
 8008cd0:	2312      	movs	r3, #18
 8008cd2:	18fb      	adds	r3, r7, r3
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d914      	bls.n	8008d04 <shellTab+0x1f0>
        {
            shellListItem(shell, &base[lastMatchIndex]);
 8008cda:	2316      	movs	r3, #22
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	18d2      	adds	r2, r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	0011      	movs	r1, r2
 8008cea:	0018      	movs	r0, r3
 8008cec:	f7fe fbcc 	bl	8007488 <shellListItem>
            shellWritePrompt(shell, 1);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	f7fe f9cb 	bl	8007090 <shellWritePrompt>
            shell->parser.length = maxMatch;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2214      	movs	r2, #20
 8008cfe:	18ba      	adds	r2, r7, r2
 8008d00:	8812      	ldrh	r2, [r2, #0]
 8008d02:	819a      	strh	r2, [r3, #12]
        }
        shell->parser.buffer[shell->parser.length] = 0;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	8992      	ldrh	r2, [r2, #12]
 8008d0c:	189b      	adds	r3, r3, r2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	701a      	strb	r2, [r3, #0]
        shell->parser.cursor = shell->parser.length;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	899a      	ldrh	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	81da      	strh	r2, [r3, #14]
        shellWriteString(shell, shell->parser.buffer);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691a      	ldr	r2, [r3, #16]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	0011      	movs	r1, r2
 8008d22:	0018      	movs	r0, r3
 8008d24:	f7fe f93b 	bl	8006f9e <shellWriteString>
 8008d28:	e000      	b.n	8008d2c <shellTab+0x218>
            return;
 8008d2a:	46c0      	nop			; (mov r8, r8)
        else
        {
            shell->status.tabFlag = 1;
        }
    }
}
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b007      	add	sp, #28
 8008d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	08009c38 	.word	0x08009c38

08008d38 <shellBackspace>:
 * @brief shell 退格
 * 
 * @param shell shell对象
 */
void shellBackspace(Shell *shell)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
    shellDeleteByte(shell, 1);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2101      	movs	r1, #1
 8008d44:	0018      	movs	r0, r3
 8008d46:	f7fe ff23 	bl	8007b90 <shellDeleteByte>
}
 8008d4a:	46c0      	nop			; (mov r8, r8)
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	b002      	add	sp, #8
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <shellDelete>:
 * @brief shell 删除
 * 
 * @param shell shell对象
 */
void shellDelete(Shell *shell)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
    shellDeleteByte(shell, -1);
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	425a      	negs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	0011      	movs	r1, r2
 8008d62:	0018      	movs	r0, r3
 8008d64:	f7fe ff14 	bl	8007b90 <shellDeleteByte>
}
 8008d68:	46c0      	nop			; (mov r8, r8)
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	b002      	add	sp, #8
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <shellEnter>:
 * @brief shell 回车处理
 * 
 * @param shell shell对象
 */
void shellEnter(Shell *shell)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
    shellExec(shell);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f7ff fe1e 	bl	80089bc <shellExec>
    shellWritePrompt(shell, 1);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2101      	movs	r1, #1
 8008d84:	0018      	movs	r0, r3
 8008d86:	f7fe f983 	bl	8007090 <shellWritePrompt>
}
 8008d8a:	46c0      	nop			; (mov r8, r8)
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	b002      	add	sp, #8
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <shellWriteCommandHelp>:
 * 
 * @param shell shell对象
 * @param cmd 命令字符串
 */
static void shellWriteCommandHelp(Shell *shell, char *cmd)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
    ShellCommand *command = shellSeekCommand(shell,
                                             cmd,
                                             shell->commandList.base,
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    ShellCommand *command = shellSeekCommand(shell,
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	2300      	movs	r3, #0
 8008da8:	f7ff f990 	bl	80080cc <shellSeekCommand>
 8008dac:	0003      	movs	r3, r0
 8008dae:	60fb      	str	r3, [r7, #12]
                                             0);
    if (command)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d027      	beq.n	8008e06 <shellWriteCommandHelp+0x72>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_HELP_HEADER]);
 8008db6:	4b19      	ldr	r3, [pc, #100]	; (8008e1c <shellWriteCommandHelp+0x88>)
 8008db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	0011      	movs	r1, r2
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7fe f8ed 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, shellGetCommandName(command));
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f7fe faf0 	bl	80073ac <shellGetCommandName>
 8008dcc:	0002      	movs	r2, r0
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	0011      	movs	r1, r2
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f7fe f8e3 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, "\r\n");
 8008dd8:	4a11      	ldr	r2, [pc, #68]	; (8008e20 <shellWriteCommandHelp+0x8c>)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	0011      	movs	r1, r2
 8008dde:	0018      	movs	r0, r3
 8008de0:	f7fe f8dd 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, shellGetCommandDesc(command));
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	0018      	movs	r0, r3
 8008de8:	f7fe fb26 	bl	8007438 <shellGetCommandDesc>
 8008dec:	0002      	movs	r2, r0
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7fe f8d3 	bl	8006f9e <shellWriteString>
        shellWriteString(shell, "\r\n");
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <shellWriteCommandHelp+0x8c>)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	0011      	movs	r1, r2
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f7fe f8cd 	bl	8006f9e <shellWriteString>
    }
    else
    {
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
    }
}
 8008e04:	e006      	b.n	8008e14 <shellWriteCommandHelp+0x80>
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
 8008e06:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <shellWriteCommandHelp+0x88>)
 8008e08:	699a      	ldr	r2, [r3, #24]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	0011      	movs	r1, r2
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f7fe f8c5 	bl	8006f9e <shellWriteString>
}
 8008e14:	46c0      	nop			; (mov r8, r8)
 8008e16:	46bd      	mov	sp, r7
 8008e18:	b004      	add	sp, #16
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000010 	.word	0x20000010
 8008e20:	08009c38 	.word	0x08009c38

08008e24 <shellHelp>:
 * 
 * @param argc 参数个数
 * @param argv 参数
 */
void shellHelp(int argc, char *argv[])
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
    Shell *shell = shellGetCurrent();
 8008e2e:	f7fe f86d 	bl	8006f0c <shellGetCurrent>
 8008e32:	0003      	movs	r3, r0
 8008e34:	60fb      	str	r3, [r7, #12]
    SHELL_ASSERT(shell, return);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d012      	beq.n	8008e62 <shellHelp+0x3e>
    if (argc == 1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d104      	bne.n	8008e4c <shellHelp+0x28>
    {
        shellListAll(shell);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	0018      	movs	r0, r3
 8008e46:	f7fe fd51 	bl	80078ec <shellListAll>
 8008e4a:	e00a      	b.n	8008e62 <shellHelp+0x3e>
    }
    else if (argc > 1)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	dd07      	ble.n	8008e62 <shellHelp+0x3e>
    {
        shellWriteCommandHelp(shell, argv[1]);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	3304      	adds	r3, #4
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	0011      	movs	r1, r2
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f7ff ff99 	bl	8008d94 <shellWriteCommandHelp>
    }
}
 8008e62:	46bd      	mov	sp, r7
 8008e64:	b004      	add	sp, #16
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <shellHandler>:
 * 
 * @param shell shell对象
 * @param data 输入数据
 */
void shellHandler(Shell *shell, char data)
{
 8008e68:	b590      	push	{r4, r7, lr}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	000a      	movs	r2, r1
 8008e72:	1cfb      	adds	r3, r7, #3
 8008e74:	701a      	strb	r2, [r3, #0]
    SHELL_ASSERT(data, return);
 8008e76:	1cfb      	adds	r3, r7, #3
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d100      	bne.n	8008e80 <shellHandler+0x18>
 8008e7e:	e0d5      	b.n	800902c <shellHandler+0x1c4>
    SHELL_LOCK(shell);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	0010      	movs	r0, r2
 8008e88:	4798      	blx	r3
        }
    }
#endif

    /* 根据记录的按键键值计算当前字节在按键键值中的偏移 */
    char keyByteOffset = 24;
 8008e8a:	2117      	movs	r1, #23
 8008e8c:	187b      	adds	r3, r7, r1
 8008e8e:	2218      	movs	r2, #24
 8008e90:	701a      	strb	r2, [r3, #0]
    int keyFilter = 0x00000000;
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
    if ((shell->parser.keyValue & 0x0000FF00) != 0x00000000)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9a:	23ff      	movs	r3, #255	; 0xff
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	d005      	beq.n	8008eae <shellHandler+0x46>
    {
        keyByteOffset = 0;
 8008ea2:	187b      	adds	r3, r7, r1
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
        keyFilter = 0xFFFFFF00;
 8008ea8:	4b62      	ldr	r3, [pc, #392]	; (8009034 <shellHandler+0x1cc>)
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	e018      	b.n	8008ee0 <shellHandler+0x78>
    }
    else if ((shell->parser.keyValue & 0x00FF0000) != 0x00000000)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb2:	23ff      	movs	r3, #255	; 0xff
 8008eb4:	041b      	lsls	r3, r3, #16
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	d006      	beq.n	8008ec8 <shellHandler+0x60>
    {
        keyByteOffset = 8;
 8008eba:	2317      	movs	r3, #23
 8008ebc:	18fb      	adds	r3, r7, r3
 8008ebe:	2208      	movs	r2, #8
 8008ec0:	701a      	strb	r2, [r3, #0]
        keyFilter = 0xFFFF0000;
 8008ec2:	4b5d      	ldr	r3, [pc, #372]	; (8009038 <shellHandler+0x1d0>)
 8008ec4:	613b      	str	r3, [r7, #16]
 8008ec6:	e00b      	b.n	8008ee0 <shellHandler+0x78>
    }
    else if ((shell->parser.keyValue & 0xFF000000) != 0x00000000)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	0e1b      	lsrs	r3, r3, #24
 8008ece:	061b      	lsls	r3, r3, #24
 8008ed0:	d006      	beq.n	8008ee0 <shellHandler+0x78>
    {
        keyByteOffset = 16;
 8008ed2:	2317      	movs	r3, #23
 8008ed4:	18fb      	adds	r3, r7, r3
 8008ed6:	2210      	movs	r2, #16
 8008ed8:	701a      	strb	r2, [r3, #0]
        keyFilter = 0xFF000000;
 8008eda:	23ff      	movs	r3, #255	; 0xff
 8008edc:	061b      	lsls	r3, r3, #24
 8008ede:	613b      	str	r3, [r7, #16]
    }

    /* 遍历ShellCommand列表，尝试进行按键键值匹配 */
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee4:	60bb      	str	r3, [r7, #8]
    for (short i = 0; i < shell->commandList.count; i++)
 8008ee6:	230e      	movs	r3, #14
 8008ee8:	18fb      	adds	r3, r7, r3
 8008eea:	2200      	movs	r2, #0
 8008eec:	801a      	strh	r2, [r3, #0]
 8008eee:	e080      	b.n	8008ff2 <shellHandler+0x18a>
    {
        /* 判断是否是按键定义并验证权限 */
        if (base[i].attr.attrs.type == SHELL_TYPE_KEY
 8008ef0:	240e      	movs	r4, #14
 8008ef2:	193b      	adds	r3, r7, r4
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	18d3      	adds	r3, r2, r3
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	220f      	movs	r2, #15
 8008f02:	4013      	ands	r3, r2
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d16a      	bne.n	8008fe0 <shellHandler+0x178>
            && shellCheckPermission(shell, &(base[i])) == 0)
 8008f0a:	193b      	adds	r3, r7, r4
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	5e9b      	ldrsh	r3, [r3, r2]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	18d2      	adds	r2, r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	0011      	movs	r1, r2
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f7fe f908 	bl	8007130 <shellCheckPermission>
 8008f20:	1e03      	subs	r3, r0, #0
 8008f22:	d15d      	bne.n	8008fe0 <shellHandler+0x178>
        {
            /* 对输入的字节同按键键值进行匹配 */
            if ((base[i].data.key.value & keyFilter) == shell->parser.keyValue
 8008f24:	0020      	movs	r0, r4
 8008f26:	183b      	adds	r3, r7, r0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	5e9b      	ldrsh	r3, [r3, r2]
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	18d3      	adds	r3, r2, r3
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	401a      	ands	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d14f      	bne.n	8008fe0 <shellHandler+0x178>
                && (base[i].data.key.value & (0xFF << keyByteOffset))
 8008f40:	183b      	adds	r3, r7, r0
 8008f42:	2200      	movs	r2, #0
 8008f44:	5e9b      	ldrsh	r3, [r3, r2]
 8008f46:	011b      	lsls	r3, r3, #4
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	18d3      	adds	r3, r2, r3
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2417      	movs	r4, #23
 8008f50:	193a      	adds	r2, r7, r4
 8008f52:	7812      	ldrb	r2, [r2, #0]
 8008f54:	21ff      	movs	r1, #255	; 0xff
 8008f56:	4091      	lsls	r1, r2
 8008f58:	000a      	movs	r2, r1
 8008f5a:	401a      	ands	r2, r3
                    == (data << keyByteOffset))
 8008f5c:	1cfb      	adds	r3, r7, #3
 8008f5e:	7819      	ldrb	r1, [r3, #0]
 8008f60:	193b      	adds	r3, r7, r4
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	4099      	lsls	r1, r3
 8008f66:	000b      	movs	r3, r1
                && (base[i].data.key.value & (0xFF << keyByteOffset))
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d139      	bne.n	8008fe0 <shellHandler+0x178>
            {
                shell->parser.keyValue |= data << keyByteOffset;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f70:	1cfb      	adds	r3, r7, #3
 8008f72:	7819      	ldrb	r1, [r3, #0]
 8008f74:	193b      	adds	r3, r7, r4
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4099      	lsls	r1, r3
 8008f7a:	000b      	movs	r3, r1
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	639a      	str	r2, [r3, #56]	; 0x38
                data = 0x00;
 8008f82:	1cfb      	adds	r3, r7, #3
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
                if (keyByteOffset == 0 
 8008f88:	0021      	movs	r1, r4
 8008f8a:	187b      	adds	r3, r7, r1
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00e      	beq.n	8008fb0 <shellHandler+0x148>
                    || (base[i].data.key.value & (0xFF << (keyByteOffset - 8)))
 8008f92:	183b      	adds	r3, r7, r0
 8008f94:	2200      	movs	r2, #0
 8008f96:	5e9b      	ldrsh	r3, [r3, r2]
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	18d3      	adds	r3, r2, r3
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	187a      	adds	r2, r7, r1
 8008fa2:	7812      	ldrb	r2, [r2, #0]
 8008fa4:	3a08      	subs	r2, #8
 8008fa6:	21ff      	movs	r1, #255	; 0xff
 8008fa8:	4091      	lsls	r1, r2
 8008faa:	000a      	movs	r2, r1
 8008fac:	4013      	ands	r3, r2
 8008fae:	d117      	bne.n	8008fe0 <shellHandler+0x178>
                        == 0x00000000)
                {
                    if (base[i].data.key.function)
 8008fb0:	210e      	movs	r1, #14
 8008fb2:	187b      	adds	r3, r7, r1
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	5e9b      	ldrsh	r3, [r3, r2]
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	18d3      	adds	r3, r2, r3
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d009      	beq.n	8008fd8 <shellHandler+0x170>
                    {
                        base[i].data.key.function(shell);
 8008fc4:	187b      	adds	r3, r7, r1
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	5e9b      	ldrsh	r3, [r3, r2]
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	18d3      	adds	r3, r2, r3
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	0010      	movs	r0, r2
 8008fd6:	4798      	blx	r3
                    }
                    shell->parser.keyValue = 0x00000000;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38
                    break;
 8008fde:	e012      	b.n	8009006 <shellHandler+0x19e>
    for (short i = 0; i < shell->commandList.count; i++)
 8008fe0:	210e      	movs	r1, #14
 8008fe2:	187b      	adds	r3, r7, r1
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	5e9b      	ldrsh	r3, [r3, r2]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3301      	adds	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	187b      	adds	r3, r7, r1
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	230e      	movs	r3, #14
 8008ff4:	18fb      	adds	r3, r7, r3
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	5e9b      	ldrsh	r3, [r3, r2]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	215c      	movs	r1, #92	; 0x5c
 8008ffe:	5a52      	ldrh	r2, [r2, r1]
 8009000:	4293      	cmp	r3, r2
 8009002:	da00      	bge.n	8009006 <shellHandler+0x19e>
 8009004:	e774      	b.n	8008ef0 <shellHandler+0x88>
                }
            }
        }
    }

    if (data != 0x00)
 8009006:	1cfb      	adds	r3, r7, #3
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d009      	beq.n	8009022 <shellHandler+0x1ba>
    {
        shell->parser.keyValue = 0x00000000;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
        shellNormalInput(shell, data);
 8009014:	1cfb      	adds	r3, r7, #3
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	0011      	movs	r1, r2
 800901c:	0018      	movs	r0, r3
 800901e:	f7ff fcb5 	bl	800898c <shellNormalInput>

    if (SHELL_GET_TICK())
    {
        shell->info.activeTime = SHELL_GET_TICK();
    }
    SHELL_UNLOCK(shell);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	0010      	movs	r0, r2
 800902a:	4798      	blx	r3
}
 800902c:	46bd      	mov	sp, r7
 800902e:	b007      	add	sp, #28
 8009030:	bd90      	pop	{r4, r7, pc}
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	ffffff00 	.word	0xffffff00
 8009038:	ffff0000 	.word	0xffff0000

0800903c <shellUsers>:

/**
 * @brief shell 输出用户列表(shell调用)
 */
void shellUsers(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 8009042:	f7fd ff63 	bl	8006f0c <shellGetCurrent>
 8009046:	0003      	movs	r3, r0
 8009048:	607b      	str	r3, [r7, #4]
    if (shell)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <shellUsers+0x1c>
    {
        shellListUser(shell);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	0018      	movs	r0, r3
 8009054:	f7fe fb8e 	bl	8007774 <shellListUser>
    }
}
 8009058:	46c0      	nop			; (mov r8, r8)
 800905a:	46bd      	mov	sp, r7
 800905c:	b002      	add	sp, #8
 800905e:	bd80      	pop	{r7, pc}

08009060 <shellCmds>:

/**
 * @brief shell 输出命令列表(shell调用)
 */
void shellCmds(void)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 8009066:	f7fd ff51 	bl	8006f0c <shellGetCurrent>
 800906a:	0003      	movs	r3, r0
 800906c:	607b      	str	r3, [r7, #4]
    if (shell)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <shellCmds+0x1c>
    {
        shellListCommand(shell);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	0018      	movs	r0, r3
 8009078:	f7fe facc 	bl	8007614 <shellListCommand>
    }
}
 800907c:	46c0      	nop			; (mov r8, r8)
 800907e:	46bd      	mov	sp, r7
 8009080:	b002      	add	sp, #8
 8009082:	bd80      	pop	{r7, pc}

08009084 <shellVars>:

/**
 * @brief shell 输出变量列表(shell调用)
 */
void shellVars(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 800908a:	f7fd ff3f 	bl	8006f0c <shellGetCurrent>
 800908e:	0003      	movs	r3, r0
 8009090:	607b      	str	r3, [r7, #4]
    if (shell)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d003      	beq.n	80090a0 <shellVars+0x1c>
    {
        shellListVar(shell);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	0018      	movs	r0, r3
 800909c:	f7fe fb0c 	bl	80076b8 <shellListVar>
    }
}
 80090a0:	46c0      	nop			; (mov r8, r8)
 80090a2:	46bd      	mov	sp, r7
 80090a4:	b002      	add	sp, #8
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <shellKeys>:

/**
 * @brief shell 输出按键列表(shell调用)
 */
void shellKeys(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 80090ae:	f7fd ff2d 	bl	8006f0c <shellGetCurrent>
 80090b2:	0003      	movs	r3, r0
 80090b4:	607b      	str	r3, [r7, #4]
    if (shell)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <shellKeys+0x1c>
    {
        shellListKey(shell);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	0018      	movs	r0, r3
 80090c0:	f7fe fbb6 	bl	8007830 <shellListKey>
    }
}
 80090c4:	46c0      	nop			; (mov r8, r8)
 80090c6:	46bd      	mov	sp, r7
 80090c8:	b002      	add	sp, #8
 80090ca:	bd80      	pop	{r7, pc}

080090cc <shellClear>:

/**
 * @brief shell 清空控制台(shell调用)
 */
void shellClear(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
    Shell *shell = shellGetCurrent();
 80090d2:	f7fd ff1b 	bl	8006f0c <shellGetCurrent>
 80090d6:	0003      	movs	r3, r0
 80090d8:	607b      	str	r3, [r7, #4]
    if (shell)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d006      	beq.n	80090ee <shellClear+0x22>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <shellClear+0x2c>)
 80090e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	0011      	movs	r1, r2
 80090e8:	0018      	movs	r0, r3
 80090ea:	f7fd ff58 	bl	8006f9e <shellWriteString>
    }
}
 80090ee:	46c0      	nop			; (mov r8, r8)
 80090f0:	46bd      	mov	sp, r7
 80090f2:	b002      	add	sp, #8
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	20000010 	.word	0x20000010

080090fc <shellExtNumType>:
 * 
 * @param string 参数字符串
 * @return ShellNumType 进制
 */
static ShellNumType shellExtNumType(char *string)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    char *p = string;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	60fb      	str	r3, [r7, #12]
    ShellNumType type = NUM_TYPE_DEC;
 8009108:	230b      	movs	r3, #11
 800910a:	18fb      	adds	r3, r7, r3
 800910c:	2200      	movs	r2, #0
 800910e:	701a      	strb	r2, [r3, #0]

    if ((*p == '0') && ((*(p + 1) == 'x') || (*(p + 1) == 'X')))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b30      	cmp	r3, #48	; 0x30
 8009116:	d10e      	bne.n	8009136 <shellExtNumType+0x3a>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3301      	adds	r3, #1
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b78      	cmp	r3, #120	; 0x78
 8009120:	d004      	beq.n	800912c <shellExtNumType+0x30>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3301      	adds	r3, #1
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b58      	cmp	r3, #88	; 0x58
 800912a:	d104      	bne.n	8009136 <shellExtNumType+0x3a>
    {
        type = NUM_TYPE_HEX;
 800912c:	230b      	movs	r3, #11
 800912e:	18fb      	adds	r3, r7, r3
 8009130:	2203      	movs	r2, #3
 8009132:	701a      	strb	r2, [r3, #0]
 8009134:	e01a      	b.n	800916c <shellExtNumType+0x70>
    }
    else if ((*p == '0') && ((*(p + 1) == 'b') || (*(p + 1) == 'B')))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b30      	cmp	r3, #48	; 0x30
 800913c:	d10e      	bne.n	800915c <shellExtNumType+0x60>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b62      	cmp	r3, #98	; 0x62
 8009146:	d004      	beq.n	8009152 <shellExtNumType+0x56>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	2b42      	cmp	r3, #66	; 0x42
 8009150:	d104      	bne.n	800915c <shellExtNumType+0x60>
    {
        type = NUM_TYPE_BIN;
 8009152:	230b      	movs	r3, #11
 8009154:	18fb      	adds	r3, r7, r3
 8009156:	2201      	movs	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	e007      	b.n	800916c <shellExtNumType+0x70>
    }
    else if (*p == '0')
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b30      	cmp	r3, #48	; 0x30
 8009162:	d112      	bne.n	800918a <shellExtNumType+0x8e>
    {
        type = NUM_TYPE_OCT;
 8009164:	230b      	movs	r3, #11
 8009166:	18fb      	adds	r3, r7, r3
 8009168:	2202      	movs	r2, #2
 800916a:	701a      	strb	r2, [r3, #0]
    }
    
    while (*p++)
 800916c:	e00d      	b.n	800918a <shellExtNumType+0x8e>
    {
        if (*p == '.' && *(p + 1) != 0)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b2e      	cmp	r3, #46	; 0x2e
 8009174:	d109      	bne.n	800918a <shellExtNumType+0x8e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3301      	adds	r3, #1
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d004      	beq.n	800918a <shellExtNumType+0x8e>
        {
            type = NUM_TYPE_FLOAT;
 8009180:	230b      	movs	r3, #11
 8009182:	18fb      	adds	r3, r7, r3
 8009184:	2204      	movs	r2, #4
 8009186:	701a      	strb	r2, [r3, #0]
            break;
 8009188:	e005      	b.n	8009196 <shellExtNumType+0x9a>
    while (*p++)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	60fa      	str	r2, [r7, #12]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1eb      	bne.n	800916e <shellExtNumType+0x72>
        }
    }

    return type;
 8009196:	230b      	movs	r3, #11
 8009198:	18fb      	adds	r3, r7, r3
 800919a:	781b      	ldrb	r3, [r3, #0]
}
 800919c:	0018      	movs	r0, r3
 800919e:	46bd      	mov	sp, r7
 80091a0:	b004      	add	sp, #16
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <shellExtToNum>:
 * 
 * @param code 字符
 * @return char 数字
 */
static char shellExtToNum(char code)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	0002      	movs	r2, r0
 80091ac:	1dfb      	adds	r3, r7, #7
 80091ae:	701a      	strb	r2, [r3, #0]
    if ((code >= '0') && (code <= '9'))
 80091b0:	1dfb      	adds	r3, r7, #7
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b2f      	cmp	r3, #47	; 0x2f
 80091b6:	d908      	bls.n	80091ca <shellExtToNum+0x26>
 80091b8:	1dfb      	adds	r3, r7, #7
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b39      	cmp	r3, #57	; 0x39
 80091be:	d804      	bhi.n	80091ca <shellExtToNum+0x26>
    {
        return code -'0';
 80091c0:	1dfb      	adds	r3, r7, #7
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	3b30      	subs	r3, #48	; 0x30
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	e01a      	b.n	8009200 <shellExtToNum+0x5c>
    }
    else if ((code >= 'a') && (code <= 'f'))
 80091ca:	1dfb      	adds	r3, r7, #7
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b60      	cmp	r3, #96	; 0x60
 80091d0:	d908      	bls.n	80091e4 <shellExtToNum+0x40>
 80091d2:	1dfb      	adds	r3, r7, #7
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b66      	cmp	r3, #102	; 0x66
 80091d8:	d804      	bhi.n	80091e4 <shellExtToNum+0x40>
    {
        return code - 'a' + 10;
 80091da:	1dfb      	adds	r3, r7, #7
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	3b57      	subs	r3, #87	; 0x57
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	e00d      	b.n	8009200 <shellExtToNum+0x5c>
    }
    else if ((code >= 'A') && (code <= 'F'))
 80091e4:	1dfb      	adds	r3, r7, #7
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b40      	cmp	r3, #64	; 0x40
 80091ea:	d908      	bls.n	80091fe <shellExtToNum+0x5a>
 80091ec:	1dfb      	adds	r3, r7, #7
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b46      	cmp	r3, #70	; 0x46
 80091f2:	d804      	bhi.n	80091fe <shellExtToNum+0x5a>
    {
        return code - 'A' + 10;
 80091f4:	1dfb      	adds	r3, r7, #7
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	3b37      	subs	r3, #55	; 0x37
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	e000      	b.n	8009200 <shellExtToNum+0x5c>
    }
    else
    {
        return 0;
 80091fe:	2300      	movs	r3, #0
    }
}
 8009200:	0018      	movs	r0, r3
 8009202:	46bd      	mov	sp, r7
 8009204:	b002      	add	sp, #8
 8009206:	bd80      	pop	{r7, pc}

08009208 <shellExtParseChar>:
 * 
 * @param string 字符串参数
 * @return char 解析出的字符
 */
static char shellExtParseChar(char *string)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
    char *p = (*string == '\'') ? (string + 1) : string;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b27      	cmp	r3, #39	; 0x27
 8009216:	d102      	bne.n	800921e <shellExtParseChar+0x16>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3301      	adds	r3, #1
 800921c:	e000      	b.n	8009220 <shellExtParseChar+0x18>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60bb      	str	r3, [r7, #8]
    char value = 0;
 8009222:	210f      	movs	r1, #15
 8009224:	187b      	adds	r3, r7, r1
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]

    if (*p == '\\')
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b5c      	cmp	r3, #92	; 0x5c
 8009230:	d12d      	bne.n	800928e <shellExtParseChar+0x86>
    {
        switch (*(p + 1))
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3301      	adds	r3, #1
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b74      	cmp	r3, #116	; 0x74
 800923a:	d018      	beq.n	800926e <shellExtParseChar+0x66>
 800923c:	dc21      	bgt.n	8009282 <shellExtParseChar+0x7a>
 800923e:	2b72      	cmp	r3, #114	; 0x72
 8009240:	d00b      	beq.n	800925a <shellExtParseChar+0x52>
 8009242:	dc1e      	bgt.n	8009282 <shellExtParseChar+0x7a>
 8009244:	2b6e      	cmp	r3, #110	; 0x6e
 8009246:	d00d      	beq.n	8009264 <shellExtParseChar+0x5c>
 8009248:	dc1b      	bgt.n	8009282 <shellExtParseChar+0x7a>
 800924a:	2b30      	cmp	r3, #48	; 0x30
 800924c:	d014      	beq.n	8009278 <shellExtParseChar+0x70>
 800924e:	2b62      	cmp	r3, #98	; 0x62
 8009250:	d117      	bne.n	8009282 <shellExtParseChar+0x7a>
        {
        case 'b':
            value = '\b';
 8009252:	187b      	adds	r3, r7, r1
 8009254:	2208      	movs	r2, #8
 8009256:	701a      	strb	r2, [r3, #0]
            break;
 8009258:	e01e      	b.n	8009298 <shellExtParseChar+0x90>
        case 'r':
            value = '\r';
 800925a:	230f      	movs	r3, #15
 800925c:	18fb      	adds	r3, r7, r3
 800925e:	220d      	movs	r2, #13
 8009260:	701a      	strb	r2, [r3, #0]
            break;
 8009262:	e019      	b.n	8009298 <shellExtParseChar+0x90>
        case 'n':
            value = '\n';
 8009264:	230f      	movs	r3, #15
 8009266:	18fb      	adds	r3, r7, r3
 8009268:	220a      	movs	r2, #10
 800926a:	701a      	strb	r2, [r3, #0]
            break;
 800926c:	e014      	b.n	8009298 <shellExtParseChar+0x90>
        case 't':
            value = '\t';
 800926e:	230f      	movs	r3, #15
 8009270:	18fb      	adds	r3, r7, r3
 8009272:	2209      	movs	r2, #9
 8009274:	701a      	strb	r2, [r3, #0]
            break;
 8009276:	e00f      	b.n	8009298 <shellExtParseChar+0x90>
        case '0':
            value = 0;
 8009278:	230f      	movs	r3, #15
 800927a:	18fb      	adds	r3, r7, r3
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]
            break;
 8009280:	e00a      	b.n	8009298 <shellExtParseChar+0x90>
        default:
            value = *(p + 1);
 8009282:	230f      	movs	r3, #15
 8009284:	18fb      	adds	r3, r7, r3
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	7852      	ldrb	r2, [r2, #1]
 800928a:	701a      	strb	r2, [r3, #0]
            break;
 800928c:	e004      	b.n	8009298 <shellExtParseChar+0x90>
        }
    }
    else
    {
        value = *p;
 800928e:	230f      	movs	r3, #15
 8009290:	18fb      	adds	r3, r7, r3
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	701a      	strb	r2, [r3, #0]
    }
    return value;
 8009298:	230f      	movs	r3, #15
 800929a:	18fb      	adds	r3, r7, r3
 800929c:	781b      	ldrb	r3, [r3, #0]
}
 800929e:	0018      	movs	r0, r3
 80092a0:	46bd      	mov	sp, r7
 80092a2:	b004      	add	sp, #16
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <shellExtParseString>:
 * 
 * @param string 字符串参数
 * @return char* 解析出的字符串
 */
static char* shellExtParseString(char *string)
{
 80092a6:	b590      	push	{r4, r7, lr}
 80092a8:	b085      	sub	sp, #20
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
    char *p = string;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	60fb      	str	r3, [r7, #12]
    unsigned short index = 0;
 80092b2:	230a      	movs	r3, #10
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	2200      	movs	r2, #0
 80092b8:	801a      	strh	r2, [r3, #0]

    if (*string == '\"')
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	2b22      	cmp	r3, #34	; 0x22
 80092c0:	d135      	bne.n	800932e <shellExtParseString+0x88>
    {
        p = ++string;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3301      	adds	r3, #1
 80092c6:	607b      	str	r3, [r7, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60fb      	str	r3, [r7, #12]
    }

    while (*p)
 80092cc:	e02f      	b.n	800932e <shellExtParseString+0x88>
    {
        if (*p == '\\')
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b5c      	cmp	r3, #92	; 0x5c
 80092d4:	d10e      	bne.n	80092f4 <shellExtParseString+0x4e>
        {
            *(string + index) = shellExtParseChar(p);
 80092d6:	230a      	movs	r3, #10
 80092d8:	18fb      	adds	r3, r7, r3
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	18d4      	adds	r4, r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	0018      	movs	r0, r3
 80092e4:	f7ff ff90 	bl	8009208 <shellExtParseChar>
 80092e8:	0003      	movs	r3, r0
 80092ea:	7023      	strb	r3, [r4, #0]
            p++;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e013      	b.n	800931c <shellExtParseString+0x76>
        }
        else if (*p == '\"')
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b22      	cmp	r3, #34	; 0x22
 80092fa:	d107      	bne.n	800930c <shellExtParseString+0x66>
        {
            *(string + index) = 0;
 80092fc:	230a      	movs	r3, #10
 80092fe:	18fb      	adds	r3, r7, r3
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	18d3      	adds	r3, r2, r3
 8009306:	2200      	movs	r2, #0
 8009308:	701a      	strb	r2, [r3, #0]
 800930a:	e007      	b.n	800931c <shellExtParseString+0x76>
        }
        else
        {
            *(string + index) = *p;
 800930c:	230a      	movs	r3, #10
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	18d3      	adds	r3, r2, r3
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	701a      	strb	r2, [r3, #0]
        }
        p++;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	3301      	adds	r3, #1
 8009320:	60fb      	str	r3, [r7, #12]
        index ++;
 8009322:	210a      	movs	r1, #10
 8009324:	187b      	adds	r3, r7, r1
 8009326:	881a      	ldrh	r2, [r3, #0]
 8009328:	187b      	adds	r3, r7, r1
 800932a:	3201      	adds	r2, #1
 800932c:	801a      	strh	r2, [r3, #0]
    while (*p)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1cb      	bne.n	80092ce <shellExtParseString+0x28>
    }
    *(string + index) = 0;
 8009336:	230a      	movs	r3, #10
 8009338:	18fb      	adds	r3, r7, r3
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	18d3      	adds	r3, r2, r3
 8009340:	2200      	movs	r2, #0
 8009342:	701a      	strb	r2, [r3, #0]
    return string;
 8009344:	687b      	ldr	r3, [r7, #4]
}
 8009346:	0018      	movs	r0, r3
 8009348:	46bd      	mov	sp, r7
 800934a:	b005      	add	sp, #20
 800934c:	bd90      	pop	{r4, r7, pc}

0800934e <shellExtParseNumber>:
 * 
 * @param string 字符串参数
 * @return size_t 解析出的数字
 */
static size_t shellExtParseNumber(char *string)
{
 800934e:	b5b0      	push	{r4, r5, r7, lr}
 8009350:	b08a      	sub	sp, #40	; 0x28
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
    ShellNumType type = NUM_TYPE_DEC;
 8009356:	2313      	movs	r3, #19
 8009358:	18fb      	adds	r3, r7, r3
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
    char radix = 10;
 800935e:	2327      	movs	r3, #39	; 0x27
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	220a      	movs	r2, #10
 8009364:	701a      	strb	r2, [r3, #0]
    char *p = string;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	623b      	str	r3, [r7, #32]
    char offset = 0;
 800936a:	231f      	movs	r3, #31
 800936c:	18fb      	adds	r3, r7, r3
 800936e:	2200      	movs	r2, #0
 8009370:	701a      	strb	r2, [r3, #0]
    signed char sign = 1;
 8009372:	211e      	movs	r1, #30
 8009374:	187b      	adds	r3, r7, r1
 8009376:	2201      	movs	r2, #1
 8009378:	701a      	strb	r2, [r3, #0]
    size_t valueInt = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	61bb      	str	r3, [r7, #24]
    float valueFloat = 0.0;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]
    size_t devide = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]

    if (*string == '-')
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b2d      	cmp	r3, #45	; 0x2d
 800938c:	d102      	bne.n	8009394 <shellExtParseNumber+0x46>
    {
        sign = -1;
 800938e:	187b      	adds	r3, r7, r1
 8009390:	22ff      	movs	r2, #255	; 0xff
 8009392:	701a      	strb	r2, [r3, #0]
    }

    type = shellExtNumType(string + ((sign == -1) ? 1 : 0));
 8009394:	231e      	movs	r3, #30
 8009396:	18fb      	adds	r3, r7, r3
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	b25b      	sxtb	r3, r3
 800939c:	3301      	adds	r3, #1
 800939e:	d101      	bne.n	80093a4 <shellExtParseNumber+0x56>
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <shellExtParseNumber+0x58>
 80093a4:	2300      	movs	r3, #0
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	18d3      	adds	r3, r2, r3
 80093aa:	2513      	movs	r5, #19
 80093ac:	197c      	adds	r4, r7, r5
 80093ae:	0018      	movs	r0, r3
 80093b0:	f7ff fea4 	bl	80090fc <shellExtNumType>
 80093b4:	0003      	movs	r3, r0
 80093b6:	7023      	strb	r3, [r4, #0]

    switch ((char)type)
 80093b8:	197b      	adds	r3, r7, r5
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d005      	beq.n	80093cc <shellExtParseNumber+0x7e>
 80093c0:	dc1f      	bgt.n	8009402 <shellExtParseNumber+0xb4>
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d014      	beq.n	80093f0 <shellExtParseNumber+0xa2>
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d009      	beq.n	80093de <shellExtParseNumber+0x90>
        radix = 2;
        offset = 2;
        break;
    
    default:
        break;
 80093ca:	e01a      	b.n	8009402 <shellExtParseNumber+0xb4>
        radix = 16;
 80093cc:	2327      	movs	r3, #39	; 0x27
 80093ce:	18fb      	adds	r3, r7, r3
 80093d0:	2210      	movs	r2, #16
 80093d2:	701a      	strb	r2, [r3, #0]
        offset = 2;
 80093d4:	231f      	movs	r3, #31
 80093d6:	18fb      	adds	r3, r7, r3
 80093d8:	2202      	movs	r2, #2
 80093da:	701a      	strb	r2, [r3, #0]
        break;
 80093dc:	e012      	b.n	8009404 <shellExtParseNumber+0xb6>
        radix = 8;
 80093de:	2327      	movs	r3, #39	; 0x27
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	2208      	movs	r2, #8
 80093e4:	701a      	strb	r2, [r3, #0]
        offset = 1;
 80093e6:	231f      	movs	r3, #31
 80093e8:	18fb      	adds	r3, r7, r3
 80093ea:	2201      	movs	r2, #1
 80093ec:	701a      	strb	r2, [r3, #0]
        break;
 80093ee:	e009      	b.n	8009404 <shellExtParseNumber+0xb6>
        radix = 2;
 80093f0:	2327      	movs	r3, #39	; 0x27
 80093f2:	18fb      	adds	r3, r7, r3
 80093f4:	2202      	movs	r2, #2
 80093f6:	701a      	strb	r2, [r3, #0]
        offset = 2;
 80093f8:	231f      	movs	r3, #31
 80093fa:	18fb      	adds	r3, r7, r3
 80093fc:	2202      	movs	r2, #2
 80093fe:	701a      	strb	r2, [r3, #0]
        break;
 8009400:	e000      	b.n	8009404 <shellExtParseNumber+0xb6>
        break;
 8009402:	46c0      	nop			; (mov r8, r8)
    }

    p = string + offset + ((sign == -1) ? 1 : 0);
 8009404:	231f      	movs	r3, #31
 8009406:	18fb      	adds	r3, r7, r3
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	231e      	movs	r3, #30
 800940c:	18fb      	adds	r3, r7, r3
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	b25b      	sxtb	r3, r3
 8009412:	3301      	adds	r3, #1
 8009414:	d101      	bne.n	800941a <shellExtParseNumber+0xcc>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <shellExtParseNumber+0xce>
 800941a:	2300      	movs	r3, #0
 800941c:	189b      	adds	r3, r3, r2
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	18d3      	adds	r3, r2, r3
 8009422:	623b      	str	r3, [r7, #32]

    while (*p)
 8009424:	e020      	b.n	8009468 <shellExtParseNumber+0x11a>
    {
        if (*p == '.')
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b2e      	cmp	r3, #46	; 0x2e
 800942c:	d105      	bne.n	800943a <shellExtParseNumber+0xec>
        {
            devide = 1;
 800942e:	2301      	movs	r3, #1
 8009430:	617b      	str	r3, [r7, #20]
            p++;
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	3301      	adds	r3, #1
 8009436:	623b      	str	r3, [r7, #32]
            continue;
 8009438:	e016      	b.n	8009468 <shellExtParseNumber+0x11a>
        }
        valueInt = valueInt * radix + shellExtToNum(*p);
 800943a:	2327      	movs	r3, #39	; 0x27
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	435a      	muls	r2, r3
 8009444:	0014      	movs	r4, r2
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	0018      	movs	r0, r3
 800944c:	f7ff feaa 	bl	80091a4 <shellExtToNum>
 8009450:	0003      	movs	r3, r0
 8009452:	18e3      	adds	r3, r4, r3
 8009454:	61bb      	str	r3, [r7, #24]
        devide *= 10;
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	0013      	movs	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	189b      	adds	r3, r3, r2
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	617b      	str	r3, [r7, #20]
        p++;
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	3301      	adds	r3, #1
 8009466:	623b      	str	r3, [r7, #32]
    while (*p)
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1da      	bne.n	8009426 <shellExtParseNumber+0xd8>
    }
    if (type == NUM_TYPE_FLOAT && devide != 0)
 8009470:	2313      	movs	r3, #19
 8009472:	18fb      	adds	r3, r7, r3
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	2b04      	cmp	r3, #4
 8009478:	d122      	bne.n	80094c0 <shellExtParseNumber+0x172>
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01f      	beq.n	80094c0 <shellExtParseNumber+0x172>
    {
        valueFloat = (float)valueInt / devide * sign;
 8009480:	69b8      	ldr	r0, [r7, #24]
 8009482:	f7f7 fb9d 	bl	8000bc0 <__aeabi_ui2f>
 8009486:	1c04      	adds	r4, r0, #0
 8009488:	6978      	ldr	r0, [r7, #20]
 800948a:	f7f7 fb99 	bl	8000bc0 <__aeabi_ui2f>
 800948e:	1c03      	adds	r3, r0, #0
 8009490:	1c19      	adds	r1, r3, #0
 8009492:	1c20      	adds	r0, r4, #0
 8009494:	f7f7 f8da 	bl	800064c <__aeabi_fdiv>
 8009498:	1c03      	adds	r3, r0, #0
 800949a:	1c1c      	adds	r4, r3, #0
 800949c:	231e      	movs	r3, #30
 800949e:	18fb      	adds	r3, r7, r3
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	b25b      	sxtb	r3, r3
 80094a4:	0018      	movs	r0, r3
 80094a6:	f7f7 fb39 	bl	8000b1c <__aeabi_i2f>
 80094aa:	1c03      	adds	r3, r0, #0
 80094ac:	1c19      	adds	r1, r3, #0
 80094ae:	1c20      	adds	r0, r4, #0
 80094b0:	f7f7 f9e6 	bl	8000880 <__aeabi_fmul>
 80094b4:	1c03      	adds	r3, r0, #0
 80094b6:	60fb      	str	r3, [r7, #12]
        return *(size_t *)(&valueFloat);
 80094b8:	230c      	movs	r3, #12
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	e005      	b.n	80094cc <shellExtParseNumber+0x17e>
    }
    else
    {
        return valueInt * sign;
 80094c0:	231e      	movs	r3, #30
 80094c2:	18fb      	adds	r3, r7, r3
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	b25b      	sxtb	r3, r3
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	4353      	muls	r3, r2
    }
}
 80094cc:	0018      	movs	r0, r3
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b00a      	add	sp, #40	; 0x28
 80094d2:	bdb0      	pop	{r4, r5, r7, pc}

080094d4 <shellExtParseVar>:
 * @param shell shell对象
 * @param var 变量
 * @return size_t 变量值
 */
static size_t shellExtParseVar(Shell *shell, char *var)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
    ShellCommand *command = shellSeekCommand(shell,
                                             var + 1,
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	1c59      	adds	r1, r3, #1
                                             shell->commandList.base,
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    ShellCommand *command = shellSeekCommand(shell,
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	2300      	movs	r3, #0
 80094ea:	f7fe fdef 	bl	80080cc <shellSeekCommand>
 80094ee:	0003      	movs	r3, r0
 80094f0:	60fb      	str	r3, [r7, #12]
                                             0);
    if (command)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d007      	beq.n	8009508 <shellExtParseVar+0x34>
    {
        return shellGetVarValue(shell, command);
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	0011      	movs	r1, r2
 80094fe:	0018      	movs	r0, r3
 8009500:	f7fe fe58 	bl	80081b4 <shellGetVarValue>
 8009504:	0003      	movs	r3, r0
 8009506:	e000      	b.n	800950a <shellExtParseVar+0x36>
    }
    else
    {
        return 0;
 8009508:	2300      	movs	r3, #0
    }
}
 800950a:	0018      	movs	r0, r3
 800950c:	46bd      	mov	sp, r7
 800950e:	b004      	add	sp, #16
 8009510:	bd80      	pop	{r7, pc}

08009512 <shellExtParsePara>:
 * @param result 解析结果
 * 
 * @return int 0 解析成功 --1 解析失败
 */
int shellExtParsePara(Shell *shell, char *string, char *type, size_t *result)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	603b      	str	r3, [r7, #0]
    if (type == NULL || (*string == '$' && *(string + 1)))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d008      	beq.n	8009538 <shellExtParsePara+0x26>
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b24      	cmp	r3, #36	; 0x24
 800952c:	d14e      	bne.n	80095cc <shellExtParsePara+0xba>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	3301      	adds	r3, #1
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d049      	beq.n	80095cc <shellExtParsePara+0xba>
    {
        if (*string == '\'' && *(string + 1))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b27      	cmp	r3, #39	; 0x27
 800953e:	d10e      	bne.n	800955e <shellExtParsePara+0x4c>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	3301      	adds	r3, #1
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d009      	beq.n	800955e <shellExtParsePara+0x4c>
        {
            *result = (size_t)shellExtParseChar(string);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	0018      	movs	r0, r3
 800954e:	f7ff fe5b 	bl	8009208 <shellExtParseChar>
 8009552:	0003      	movs	r3, r0
 8009554:	001a      	movs	r2, r3
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	601a      	str	r2, [r3, #0]
            return 0;
 800955a:	2300      	movs	r3, #0
 800955c:	e038      	b.n	80095d0 <shellExtParsePara+0xbe>
        }
        else if (*string == '-' || (*string >= '0' && *string <= '9'))
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b2d      	cmp	r3, #45	; 0x2d
 8009564:	d007      	beq.n	8009576 <shellExtParsePara+0x64>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b2f      	cmp	r3, #47	; 0x2f
 800956c:	d90c      	bls.n	8009588 <shellExtParsePara+0x76>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b39      	cmp	r3, #57	; 0x39
 8009574:	d808      	bhi.n	8009588 <shellExtParsePara+0x76>
        {
            *result = shellExtParseNumber(string);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	0018      	movs	r0, r3
 800957a:	f7ff fee8 	bl	800934e <shellExtParseNumber>
 800957e:	0002      	movs	r2, r0
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	601a      	str	r2, [r3, #0]
            return 0;
 8009584:	2300      	movs	r3, #0
 8009586:	e023      	b.n	80095d0 <shellExtParsePara+0xbe>
        }
        else if (*string == '$' && *(string + 1))
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b24      	cmp	r3, #36	; 0x24
 800958e:	d10f      	bne.n	80095b0 <shellExtParsePara+0x9e>
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	3301      	adds	r3, #1
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <shellExtParsePara+0x9e>
        {
            *result = shellExtParseVar(shell, string);
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	0011      	movs	r1, r2
 80095a0:	0018      	movs	r0, r3
 80095a2:	f7ff ff97 	bl	80094d4 <shellExtParseVar>
 80095a6:	0002      	movs	r2, r0
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	601a      	str	r2, [r3, #0]
            return 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	e00f      	b.n	80095d0 <shellExtParsePara+0xbe>
        }
        else if (*string)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d009      	beq.n	80095cc <shellExtParsePara+0xba>
        {
            *result = (size_t)shellExtParseString(string);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	0018      	movs	r0, r3
 80095bc:	f7ff fe73 	bl	80092a6 <shellExtParseString>
 80095c0:	0003      	movs	r3, r0
 80095c2:	001a      	movs	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	601a      	str	r2, [r3, #0]
            return 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	e001      	b.n	80095d0 <shellExtParsePara+0xbe>
                return -1;
            }
        }
    }
#endif /** SHELL_USING_FUNC_SIGNATURE == 1 */
    return -1;
 80095cc:	2301      	movs	r3, #1
 80095ce:	425b      	negs	r3, r3
}
 80095d0:	0018      	movs	r0, r3
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b004      	add	sp, #16
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <shellExtRun>:
 * @param argc 参数个数
 * @param argv 参数
 * @return int 返回值
 */
int shellExtRun(Shell *shell, ShellCommand *command, int argc, char *argv[])
{
 80095d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095da:	b09b      	sub	sp, #108	; 0x6c
 80095dc:	af04      	add	r7, sp, #16
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	657b      	str	r3, [r7, #84]	; 0x54
    size_t params[SHELL_PARAMETER_MAX_NUMBER] = {0};
 80095ea:	2310      	movs	r3, #16
 80095ec:	18fb      	adds	r3, r7, r3
 80095ee:	0018      	movs	r0, r3
 80095f0:	2320      	movs	r3, #32
 80095f2:	001a      	movs	r2, r3
 80095f4:	2100      	movs	r1, #0
 80095f6:	f000 f95b 	bl	80098b0 <memset>
    int paramNum = command->attr.attrs.paramNum > (argc - 1) ? 
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	789b      	ldrb	r3, [r3, #2]
 80095fe:	071b      	lsls	r3, r3, #28
 8009600:	0f1b      	lsrs	r3, r3, #28
 8009602:	b2db      	uxtb	r3, r3
 8009604:	001a      	movs	r2, r3
        command->attr.attrs.paramNum : (argc - 1);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4293      	cmp	r3, r2
 800960a:	dc05      	bgt.n	8009618 <shellExtRun+0x40>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	789b      	ldrb	r3, [r3, #2]
 8009610:	071b      	lsls	r3, r3, #28
 8009612:	0f1b      	lsrs	r3, r3, #28
 8009614:	b2db      	uxtb	r3, r3
 8009616:	e001      	b.n	800961c <shellExtRun+0x44>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3b01      	subs	r3, #1
    int paramNum = command->attr.attrs.paramNum > (argc - 1) ? 
 800961c:	64fb      	str	r3, [r7, #76]	; 0x4c
            shellWriteString(shell, "Parameters number incorrect\r\n");
            return -1;
        }
    }
#endif
    for (int i = 0; i < argc - 1; i++)
 800961e:	2300      	movs	r3, #0
 8009620:	653b      	str	r3, [r7, #80]	; 0x50
 8009622:	e016      	b.n	8009652 <shellExtRun+0x7a>
            }
        }
        else
    #endif /** SHELL_USING_FUNC_SIGNATURE == 1 */
        {
            if (shellExtParsePara(shell, argv[i + 1], NULL, &params[i]) != 0)
 8009624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009626:	3301      	adds	r3, #1
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	18d3      	adds	r3, r2, r3
 800962e:	6819      	ldr	r1, [r3, #0]
 8009630:	2310      	movs	r3, #16
 8009632:	18fa      	adds	r2, r7, r3
 8009634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	18d3      	adds	r3, r2, r3
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f7ff ff68 	bl	8009512 <shellExtParsePara>
 8009642:	1e03      	subs	r3, r0, #0
 8009644:	d002      	beq.n	800964c <shellExtRun+0x74>
            {
                return -1;
 8009646:	2301      	movs	r3, #1
 8009648:	425b      	negs	r3, r3
 800964a:	e0a3      	b.n	8009794 <shellExtRun+0x1bc>
    for (int i = 0; i < argc - 1; i++)
 800964c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800964e:	3301      	adds	r3, #1
 8009650:	653b      	str	r3, [r7, #80]	; 0x50
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	3b01      	subs	r3, #1
 8009656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009658:	429a      	cmp	r2, r3
 800965a:	dbe3      	blt.n	8009624 <shellExtRun+0x4c>
            }
        }
    }
    switch (paramNum)
 800965c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965e:	2b07      	cmp	r3, #7
 8009660:	d900      	bls.n	8009664 <shellExtRun+0x8c>
 8009662:	e092      	b.n	800978a <shellExtRun+0x1b2>
 8009664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009666:	009a      	lsls	r2, r3, #2
 8009668:	4b4c      	ldr	r3, [pc, #304]	; (800979c <shellExtRun+0x1c4>)
 800966a:	18d3      	adds	r3, r2, r3
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	469f      	mov	pc, r3
    {
#if SHELL_PARAMETER_MAX_NUMBER >= 1
    case 0:
        ret = command->data.cmd.function();
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	4798      	blx	r3
 8009676:	0003      	movs	r3, r0
 8009678:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 800967a:	e08a      	b.n	8009792 <shellExtRun+0x1ba>
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 1 */
#if SHELL_PARAMETER_MAX_NUMBER >= 2
    case 1:
    {
        int (*func)(size_t) = command->data.cmd.function;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	633b      	str	r3, [r7, #48]	; 0x30
        ret = func(params[0]);
 8009682:	2310      	movs	r3, #16
 8009684:	18fb      	adds	r3, r7, r3
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	0010      	movs	r0, r2
 800968c:	4798      	blx	r3
 800968e:	0003      	movs	r3, r0
 8009690:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8009692:	e07e      	b.n	8009792 <shellExtRun+0x1ba>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 2 */
#if SHELL_PARAMETER_MAX_NUMBER >= 3
    case 2:
    {
        int (*func)(size_t, size_t) = command->data.cmd.function;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	637b      	str	r3, [r7, #52]	; 0x34
        ret = func(params[0], params[1]);
 800969a:	2110      	movs	r1, #16
 800969c:	187b      	adds	r3, r7, r1
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	187b      	adds	r3, r7, r1
 80096a2:	6859      	ldr	r1, [r3, #4]
 80096a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a6:	0010      	movs	r0, r2
 80096a8:	4798      	blx	r3
 80096aa:	0003      	movs	r3, r0
 80096ac:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 80096ae:	e070      	b.n	8009792 <shellExtRun+0x1ba>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 3 */
#if SHELL_PARAMETER_MAX_NUMBER >= 4
    case 3:
    {
        int (*func)(size_t, size_t, size_t) = command->data.cmd.function;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	63bb      	str	r3, [r7, #56]	; 0x38
        ret = func(params[0], params[1], params[2]);
 80096b6:	2210      	movs	r2, #16
 80096b8:	18bb      	adds	r3, r7, r2
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	18bb      	adds	r3, r7, r2
 80096be:	6859      	ldr	r1, [r3, #4]
 80096c0:	18bb      	adds	r3, r7, r2
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	4798      	blx	r3
 80096c8:	0003      	movs	r3, r0
 80096ca:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 80096cc:	e061      	b.n	8009792 <shellExtRun+0x1ba>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 4 */
#if SHELL_PARAMETER_MAX_NUMBER >= 5
    case 4:
    {
        int (*func)(size_t, size_t, size_t, size_t) = command->data.cmd.function;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = func(params[0], params[1], params[2], params[3]);
 80096d4:	2410      	movs	r4, #16
 80096d6:	193b      	adds	r3, r7, r4
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	193b      	adds	r3, r7, r4
 80096dc:	6859      	ldr	r1, [r3, #4]
 80096de:	193b      	adds	r3, r7, r4
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	193b      	adds	r3, r7, r4
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80096e8:	47a0      	blx	r4
 80096ea:	0003      	movs	r3, r0
 80096ec:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 80096ee:	e050      	b.n	8009792 <shellExtRun+0x1ba>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 5 */
#if SHELL_PARAMETER_MAX_NUMBER >= 6
    case 5:
    {
        int (*func)(size_t, size_t, size_t, size_t, size_t) = command->data.cmd.function;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	643b      	str	r3, [r7, #64]	; 0x40
        ret = func(params[0], params[1], params[2], params[3], params[4]);
 80096f6:	2410      	movs	r4, #16
 80096f8:	193b      	adds	r3, r7, r4
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	193b      	adds	r3, r7, r4
 80096fe:	6859      	ldr	r1, [r3, #4]
 8009700:	193b      	adds	r3, r7, r4
 8009702:	689a      	ldr	r2, [r3, #8]
 8009704:	193b      	adds	r3, r7, r4
 8009706:	68dd      	ldr	r5, [r3, #12]
 8009708:	193b      	adds	r3, r7, r4
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009710:	002b      	movs	r3, r5
 8009712:	47a0      	blx	r4
 8009714:	0003      	movs	r3, r0
 8009716:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8009718:	e03b      	b.n	8009792 <shellExtRun+0x1ba>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 6 */
#if SHELL_PARAMETER_MAX_NUMBER >= 7
    case 6:
    {
        int (*func)(size_t, size_t, size_t, size_t, size_t, size_t) = command->data.cmd.function;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	647b      	str	r3, [r7, #68]	; 0x44
        ret = func(params[0], params[1], params[2], params[3], params[4], params[5]);
 8009720:	2410      	movs	r4, #16
 8009722:	193b      	adds	r3, r7, r4
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	193b      	adds	r3, r7, r4
 8009728:	6859      	ldr	r1, [r3, #4]
 800972a:	193b      	adds	r3, r7, r4
 800972c:	689d      	ldr	r5, [r3, #8]
 800972e:	193b      	adds	r3, r7, r4
 8009730:	68de      	ldr	r6, [r3, #12]
 8009732:	193b      	adds	r3, r7, r4
 8009734:	691a      	ldr	r2, [r3, #16]
 8009736:	193b      	adds	r3, r7, r4
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	9200      	str	r2, [sp, #0]
 800973e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8009740:	0033      	movs	r3, r6
 8009742:	002a      	movs	r2, r5
 8009744:	47a0      	blx	r4
 8009746:	0003      	movs	r3, r0
 8009748:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 800974a:	e022      	b.n	8009792 <shellExtRun+0x1ba>
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 7 */
#if SHELL_PARAMETER_MAX_NUMBER >= 8
    case 7:
    {
        int (*func)(size_t, size_t, size_t, size_t, size_t, size_t, size_t) = command->data.cmd.function;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	64bb      	str	r3, [r7, #72]	; 0x48
        ret = func(params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
 8009752:	2210      	movs	r2, #16
 8009754:	18bb      	adds	r3, r7, r2
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	18bb      	adds	r3, r7, r2
 800975a:	685d      	ldr	r5, [r3, #4]
 800975c:	18bb      	adds	r3, r7, r2
 800975e:	689e      	ldr	r6, [r3, #8]
 8009760:	18bb      	adds	r3, r7, r2
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	469c      	mov	ip, r3
 8009766:	0014      	movs	r4, r2
 8009768:	193b      	adds	r3, r7, r4
 800976a:	691a      	ldr	r2, [r3, #16]
 800976c:	193b      	adds	r3, r7, r4
 800976e:	6959      	ldr	r1, [r3, #20]
 8009770:	193b      	adds	r3, r7, r4
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	9302      	str	r3, [sp, #8]
 8009776:	9101      	str	r1, [sp, #4]
 8009778:	9200      	str	r2, [sp, #0]
 800977a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800977c:	4663      	mov	r3, ip
 800977e:	0032      	movs	r2, r6
 8009780:	0029      	movs	r1, r5
 8009782:	47a0      	blx	r4
 8009784:	0003      	movs	r3, r0
 8009786:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8009788:	e003      	b.n	8009792 <shellExtRun+0x1ba>
                   params[8], params[9], params[10], params[11], params[12], params[13], params[14]);
        break;
    }
#endif /** SHELL_PARAMETER_MAX_NUMBER >= 16 */
    default:
        ret = -1;
 800978a:	2301      	movs	r3, #1
 800978c:	425b      	negs	r3, r3
 800978e:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8009790:	46c0      	nop			; (mov r8, r8)
            shellExtCleanerPara(shell, type, params[i]);
        }
    }
#endif /** SHELL_USING_FUNC_SIGNATURE == 1 */

    return ret;
 8009792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8009794:	0018      	movs	r0, r3
 8009796:	46bd      	mov	sp, r7
 8009798:	b017      	add	sp, #92	; 0x5c
 800979a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979c:	08009f38 	.word	0x08009f38

080097a0 <userShellWrite>:
 * @param len 数据长度
 * 
 * @return short 实际写入的数据长度
 */
short userShellWrite(char *data, unsigned short len)
{
 80097a0:	b590      	push	{r4, r7, lr}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	000a      	movs	r2, r1
 80097aa:	1cbb      	adds	r3, r7, #2
 80097ac:	801a      	strh	r2, [r3, #0]
//    serialTransmit(&debugSerial, (uint8_t *)data, len, 0x1FF);
	HAL_UART_Transmit(&huart1, (uint8_t *)data, len, 0x1FF);
 80097ae:	4c07      	ldr	r4, [pc, #28]	; (80097cc <userShellWrite+0x2c>)
 80097b0:	1cbb      	adds	r3, r7, #2
 80097b2:	881a      	ldrh	r2, [r3, #0]
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	4806      	ldr	r0, [pc, #24]	; (80097d0 <userShellWrite+0x30>)
 80097b8:	0023      	movs	r3, r4
 80097ba:	f7f9 fa31 	bl	8002c20 <HAL_UART_Transmit>
    return len;
 80097be:	1cbb      	adds	r3, r7, #2
 80097c0:	2200      	movs	r2, #0
 80097c2:	5e9b      	ldrsh	r3, [r3, r2]
}
 80097c4:	0018      	movs	r0, r3
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b003      	add	sp, #12
 80097ca:	bd90      	pop	{r4, r7, pc}
 80097cc:	000001ff 	.word	0x000001ff
 80097d0:	200000d0 	.word	0x200000d0

080097d4 <userShellRead>:
 * @param len 数据长度
 * 
 * @return short 实际读取到
 */
short userShellRead(char *data, unsigned short len)
{
 80097d4:	b590      	push	{r4, r7, lr}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	000a      	movs	r2, r1
 80097de:	1cbb      	adds	r3, r7, #2
 80097e0:	801a      	strh	r2, [r3, #0]
 //   return serialReceive(&debugSerial, (uint8_t *)data, len, 0);
//	return HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1)
//	if ( HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1) != HAL_OK)
	if(HAL_UART_Receive(&huart1, (uint8_t*)data, len, 0xFFFF) != HAL_OK)
 80097e2:	4c08      	ldr	r4, [pc, #32]	; (8009804 <userShellRead+0x30>)
 80097e4:	1cbb      	adds	r3, r7, #2
 80097e6:	881a      	ldrh	r2, [r3, #0]
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	4807      	ldr	r0, [pc, #28]	; (8009808 <userShellRead+0x34>)
 80097ec:	0023      	movs	r3, r4
 80097ee:	f7f9 fab7 	bl	8002d60 <HAL_UART_Receive>
 80097f2:	1e03      	subs	r3, r0, #0
 80097f4:	d001      	beq.n	80097fa <userShellRead+0x26>
////	if(HAL_UART_Receive_IT(&huart1, (uint8_t*)data, len))
	{
		return 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	e000      	b.n	80097fc <userShellRead+0x28>
	}
	else
	{

		return 1;
 80097fa:	2301      	movs	r3, #1
	}
}
 80097fc:	0018      	movs	r0, r3
 80097fe:	46bd      	mov	sp, r7
 8009800:	b003      	add	sp, #12
 8009802:	bd90      	pop	{r4, r7, pc}
 8009804:	0000ffff 	.word	0x0000ffff
 8009808:	200000d0 	.word	0x200000d0

0800980c <userShellLock>:
 * @param shell shell
 * 
 * @return int 0
 */
int userShellLock(Shell *shell)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
//    xSemaphoreTakeRecursive(shellMutex, portMAX_DELAY);
    xSemaphoreTake(shellMutex, portMAX_DELAY);
 8009814:	4b06      	ldr	r3, [pc, #24]	; (8009830 <userShellLock+0x24>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2201      	movs	r2, #1
 800981a:	4252      	negs	r2, r2
 800981c:	0011      	movs	r1, r2
 800981e:	0018      	movs	r0, r3
 8009820:	f7fb fb64 	bl	8004eec <xQueueSemaphoreTake>
    return 0;
 8009824:	2300      	movs	r3, #0
}
 8009826:	0018      	movs	r0, r3
 8009828:	46bd      	mov	sp, r7
 800982a:	b002      	add	sp, #8
 800982c:	bd80      	pop	{r7, pc}
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	2000189c 	.word	0x2000189c

08009834 <userShellUnlock>:
 * @param shell shell
 * 
 * @return int 0
 */
int userShellUnlock(Shell *shell)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
//    xSemaphoreGiveRecursive(shellMutex);
    xSemaphoreGive(shellMutex);
 800983c:	4b05      	ldr	r3, [pc, #20]	; (8009854 <userShellUnlock+0x20>)
 800983e:	6818      	ldr	r0, [r3, #0]
 8009840:	2300      	movs	r3, #0
 8009842:	2200      	movs	r2, #0
 8009844:	2100      	movs	r1, #0
 8009846:	f7fb f967 	bl	8004b18 <xQueueGenericSend>
    return 0;
 800984a:	2300      	movs	r3, #0
}
 800984c:	0018      	movs	r0, r3
 800984e:	46bd      	mov	sp, r7
 8009850:	b002      	add	sp, #8
 8009852:	bd80      	pop	{r7, pc}
 8009854:	2000189c 	.word	0x2000189c

08009858 <userShellInit>:
/**
 * @brief 用户shell初始化
 * 
 */
void userShellInit(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
    shellMutex = xSemaphoreCreateMutex();
 800985c:	2001      	movs	r0, #1
 800985e:	f7fb f93f 	bl	8004ae0 <xQueueCreateMutex>
 8009862:	0002      	movs	r2, r0
 8009864:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <userShellInit+0x3c>)
 8009866:	601a      	str	r2, [r3, #0]

    shell.write = userShellWrite;
 8009868:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <userShellInit+0x40>)
 800986a:	4a0c      	ldr	r2, [pc, #48]	; (800989c <userShellInit+0x44>)
 800986c:	669a      	str	r2, [r3, #104]	; 0x68
    shell.read = userShellRead;
 800986e:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <userShellInit+0x40>)
 8009870:	4a0b      	ldr	r2, [pc, #44]	; (80098a0 <userShellInit+0x48>)
 8009872:	665a      	str	r2, [r3, #100]	; 0x64
    shell.lock = userShellLock;
 8009874:	4b08      	ldr	r3, [pc, #32]	; (8009898 <userShellInit+0x40>)
 8009876:	4a0b      	ldr	r2, [pc, #44]	; (80098a4 <userShellInit+0x4c>)
 8009878:	66da      	str	r2, [r3, #108]	; 0x6c
    shell.unlock = userShellUnlock;
 800987a:	4b07      	ldr	r3, [pc, #28]	; (8009898 <userShellInit+0x40>)
 800987c:	4a0a      	ldr	r2, [pc, #40]	; (80098a8 <userShellInit+0x50>)
 800987e:	671a      	str	r2, [r3, #112]	; 0x70
    shellInit(&shell, shellBuffer, 512);
 8009880:	2380      	movs	r3, #128	; 0x80
 8009882:	009a      	lsls	r2, r3, #2
 8009884:	4909      	ldr	r1, [pc, #36]	; (80098ac <userShellInit+0x54>)
 8009886:	4b04      	ldr	r3, [pc, #16]	; (8009898 <userShellInit+0x40>)
 8009888:	0018      	movs	r0, r3
 800988a:	f7fd fa8f 	bl	8006dac <shellInit>
//    xTaskCreate(shellTask, "shell", 256, &shell, 5, NULL);
}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	2000189c 	.word	0x2000189c
 8009898:	20001628 	.word	0x20001628
 800989c:	080097a1 	.word	0x080097a1
 80098a0:	080097d5 	.word	0x080097d5
 80098a4:	0800980d 	.word	0x0800980d
 80098a8:	08009835 	.word	0x08009835
 80098ac:	2000169c 	.word	0x2000169c

080098b0 <memset>:
 80098b0:	0003      	movs	r3, r0
 80098b2:	1882      	adds	r2, r0, r2
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d100      	bne.n	80098ba <memset+0xa>
 80098b8:	4770      	bx	lr
 80098ba:	7019      	strb	r1, [r3, #0]
 80098bc:	3301      	adds	r3, #1
 80098be:	e7f9      	b.n	80098b4 <memset+0x4>

080098c0 <strncmp>:
 80098c0:	b530      	push	{r4, r5, lr}
 80098c2:	0005      	movs	r5, r0
 80098c4:	1e10      	subs	r0, r2, #0
 80098c6:	d00b      	beq.n	80098e0 <strncmp+0x20>
 80098c8:	2400      	movs	r4, #0
 80098ca:	3a01      	subs	r2, #1
 80098cc:	5d2b      	ldrb	r3, [r5, r4]
 80098ce:	5d08      	ldrb	r0, [r1, r4]
 80098d0:	4283      	cmp	r3, r0
 80098d2:	d104      	bne.n	80098de <strncmp+0x1e>
 80098d4:	42a2      	cmp	r2, r4
 80098d6:	d002      	beq.n	80098de <strncmp+0x1e>
 80098d8:	3401      	adds	r4, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1f6      	bne.n	80098cc <strncmp+0xc>
 80098de:	1a18      	subs	r0, r3, r0
 80098e0:	bd30      	pop	{r4, r5, pc}
	...

080098e4 <__libc_init_array>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	2600      	movs	r6, #0
 80098e8:	4c0c      	ldr	r4, [pc, #48]	; (800991c <__libc_init_array+0x38>)
 80098ea:	4d0d      	ldr	r5, [pc, #52]	; (8009920 <__libc_init_array+0x3c>)
 80098ec:	1b64      	subs	r4, r4, r5
 80098ee:	10a4      	asrs	r4, r4, #2
 80098f0:	42a6      	cmp	r6, r4
 80098f2:	d109      	bne.n	8009908 <__libc_init_array+0x24>
 80098f4:	2600      	movs	r6, #0
 80098f6:	f000 f823 	bl	8009940 <_init>
 80098fa:	4c0a      	ldr	r4, [pc, #40]	; (8009924 <__libc_init_array+0x40>)
 80098fc:	4d0a      	ldr	r5, [pc, #40]	; (8009928 <__libc_init_array+0x44>)
 80098fe:	1b64      	subs	r4, r4, r5
 8009900:	10a4      	asrs	r4, r4, #2
 8009902:	42a6      	cmp	r6, r4
 8009904:	d105      	bne.n	8009912 <__libc_init_array+0x2e>
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	00b3      	lsls	r3, r6, #2
 800990a:	58eb      	ldr	r3, [r5, r3]
 800990c:	4798      	blx	r3
 800990e:	3601      	adds	r6, #1
 8009910:	e7ee      	b.n	80098f0 <__libc_init_array+0xc>
 8009912:	00b3      	lsls	r3, r6, #2
 8009914:	58eb      	ldr	r3, [r5, r3]
 8009916:	4798      	blx	r3
 8009918:	3601      	adds	r6, #1
 800991a:	e7f2      	b.n	8009902 <__libc_init_array+0x1e>
 800991c:	0800a080 	.word	0x0800a080
 8009920:	0800a080 	.word	0x0800a080
 8009924:	0800a084 	.word	0x0800a084
 8009928:	0800a080 	.word	0x0800a080

0800992c <memcpy>:
 800992c:	2300      	movs	r3, #0
 800992e:	b510      	push	{r4, lr}
 8009930:	429a      	cmp	r2, r3
 8009932:	d100      	bne.n	8009936 <memcpy+0xa>
 8009934:	bd10      	pop	{r4, pc}
 8009936:	5ccc      	ldrb	r4, [r1, r3]
 8009938:	54c4      	strb	r4, [r0, r3]
 800993a:	3301      	adds	r3, #1
 800993c:	e7f8      	b.n	8009930 <memcpy+0x4>
	...

08009940 <_init>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr

0800994c <_fini>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr
